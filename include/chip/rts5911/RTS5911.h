/*
 * The license belong to Realtek Semiconductor Corp. All the rights reserved.
 *
 * @file     RTS5911.h
 * @brief    CMSIS HeaderFile
 * @version  1.0
 * @date     11. May 2023
 * @note     Generated by SVDConv V3.3.42 on Thursday, 11.05.2023 18:51:24
 *           from File 'RTS5911.svd',
 *           last modified on Thursday, 11.05.2023 10:51:22
 */



/** @addtogroup Realtek Semiconductor Corp.
  * @{
  */


/** @addtogroup RTS5911
  * @{
  */


#ifndef RTS5911_H
#define RTS5911_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* ========================================  ARM ARMV8MML Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SecureFault_IRQn          =  -9,              /*!< -9 Secure Fault Handler                                                   */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ==========================================  RTS5911 Specific Interrupt Numbers  =========================================== */
  GPIO000_IRQn              =   0,              /*!< 0  GPIO000 Interrupt                                                      */
  GPIO001_IRQn              =   1,              /*!< 1  GPIO001 Interrupt                                                      */
  GPIO002_IRQn              =   2,              /*!< 2  GPIO002 Interrupt                                                      */
  GPIO003_IRQn              =   3,              /*!< 3  GPIO003 Interrupt                                                      */
  GPIO004_IRQn              =   4,              /*!< 4  GPIO004 Interrupt                                                      */
  GPIO005_IRQn              =   5,              /*!< 5  GPIO005 Interrupt                                                      */
  GPIO006_IRQn              =   6,              /*!< 6  GPIO006 Interrupt                                                      */
  GPIO007_IRQn              =   7,              /*!< 7  GPIO007 Interrupt                                                      */
  GPIO008_IRQn              =   8,              /*!< 8  GPIO008 Interrupt                                                      */
  GPIO009_IRQn              =   9,              /*!< 9  GPIO009 Interrupt                                                      */
  GPIO010_IRQn              =  10,              /*!< 10 GPIO010 Interrupt                                                      */
  GPIO011_IRQn              =  11,              /*!< 11 GPIO011 Interrupt                                                      */
  GPIO012_IRQn              =  12,              /*!< 12 GPIO012 Interrupt                                                      */
  GPIO013_IRQn              =  13,              /*!< 13 GPIO013 Interrupt                                                      */
  GPIO014_IRQn              =  14,              /*!< 14 GPIO014 Interrupt                                                      */
  GPIO015_IRQn              =  15,              /*!< 15 GPIO015 Interrupt                                                      */
  GPIO016_IRQn              =  16,              /*!< 16 GPIO016 Interrupt                                                      */
  GPIO017_IRQn              =  17,              /*!< 17 GPIO017 Interrupt                                                      */
  GPIO018_IRQn              =  18,              /*!< 18 GPIO018 Interrupt                                                      */
  GPIO019_IRQn              =  19,              /*!< 19 GPIO019 Interrupt                                                      */
  GPIO020_IRQn              =  20,              /*!< 20 GPIO020 Interrupt                                                      */
  GPIO021_IRQn              =  21,              /*!< 21 GPIO021 Interrupt                                                      */
  GPIO022_IRQn              =  22,              /*!< 22 GPIO022 Interrupt                                                      */
  GPIO023_IRQn              =  23,              /*!< 23 GPIO023 Interrupt                                                      */
  GPIO024_IRQn              =  24,              /*!< 24 GPIO024 Interrupt                                                      */
  GPIO025_IRQn              =  25,              /*!< 25 GPIO025 Interrupt                                                      */
  GPIO026_IRQn              =  26,              /*!< 26 GPIO026 Interrupt                                                      */
  GPIO027_IRQn              =  27,              /*!< 27 GPIO027 Interrupt                                                      */
  GPIO028_IRQn              =  28,              /*!< 28 GPIO028 Interrupt                                                      */
  GPIO029_IRQn              =  29,              /*!< 29 GPIO029 Interrupt                                                      */
  GPIO030_IRQn              =  30,              /*!< 30 GPIO030 Interrupt                                                      */
  GPIO031_IRQn              =  31,              /*!< 31 GPIO031 Interrupt                                                      */
  GPIO032_IRQn              =  32,              /*!< 32 GPIO032 Interrupt                                                      */
  GPIO033_IRQn              =  33,              /*!< 33 GPIO033 Interrupt                                                      */
  GPIO034_IRQn              =  34,              /*!< 34 GPIO034 Interrupt                                                      */
  GPIO035_IRQn              =  35,              /*!< 35 GPIO035 Interrupt                                                      */
  GPIO036_IRQn              =  36,              /*!< 36 GPIO036 Interrupt                                                      */
  GPIO037_IRQn              =  37,              /*!< 37 GPIO037 Interrupt                                                      */
  GPIO038_IRQn              =  38,              /*!< 38 GPIO038 Interrupt                                                      */
  GPIO039_IRQn              =  39,              /*!< 39 GPIO039 Interrupt                                                      */
  GPIO040_IRQn              =  40,              /*!< 40 GPIO040 Interrupt                                                      */
  GPIO041_IRQn              =  41,              /*!< 41 GPIO041 Interrupt                                                      */
  GPIO042_IRQn              =  42,              /*!< 42 GPIO042 Interrupt                                                      */
  GPIO043_IRQn              =  43,              /*!< 43 GPIO043 Interrupt                                                      */
  GPIO044_IRQn              =  44,              /*!< 44 GPIO044 Interrupt                                                      */
  GPIO045_IRQn              =  45,              /*!< 45 GPIO045 Interrupt                                                      */
  GPIO046_IRQn              =  46,              /*!< 46 GPIO046 Interrupt                                                      */
  GPIO047_IRQn              =  47,              /*!< 47 GPIO047 Interrupt                                                      */
  GPIO048_IRQn              =  48,              /*!< 48 GPIO048 Interrupt                                                      */
  GPIO049_IRQn              =  49,              /*!< 49 GPIO049 Interrupt                                                      */
  GPIO050_IRQn              =  50,              /*!< 50 GPIO050 Interrupt                                                      */
  GPIO051_IRQn              =  51,              /*!< 51 GPIO051 Interrupt                                                      */
  GPIO052_IRQn              =  52,              /*!< 52 GPIO052 Interrupt                                                      */
  GPIO053_IRQn              =  53,              /*!< 53 GPIO053 Interrupt                                                      */
  GPIO054_IRQn              =  54,              /*!< 54 GPIO054 Interrupt                                                      */
  GPIO055_IRQn              =  55,              /*!< 55 GPIO055 Interrupt                                                      */
  GPIO056_IRQn              =  56,              /*!< 56 GPIO056 Interrupt                                                      */
  GPIO057_IRQn              =  57,              /*!< 57 GPIO057 Interrupt                                                      */
  GPIO058_IRQn              =  58,              /*!< 58 GPIO058 Interrupt                                                      */
  GPIO059_IRQn              =  59,              /*!< 59 GPIO059 Interrupt                                                      */
  GPIO060_IRQn              =  60,              /*!< 60 GPIO060 Interrupt                                                      */
  GPIO061_IRQn              =  61,              /*!< 61 GPIO061 Interrupt                                                      */
  GPIO062_IRQn              =  62,              /*!< 62 GPIO062 Interrupt                                                      */
  GPIO063_IRQn              =  63,              /*!< 63 GPIO063 Interrupt                                                      */
  GPIO064_IRQn              =  64,              /*!< 64 GPIO064 Interrupt                                                      */
  GPIO065_IRQn              =  65,              /*!< 65 GPIO065 Interrupt                                                      */
  GPIO066_IRQn              =  66,              /*!< 66 GPIO066 Interrupt                                                      */
  GPIO067_IRQn              =  67,              /*!< 67 GPIO067 Interrupt                                                      */
  GPIO068_IRQn              =  68,              /*!< 68 GPIO068 Interrupt                                                      */
  GPIO069_IRQn              =  69,              /*!< 69 GPIO069 Interrupt                                                      */
  GPIO070_IRQn              =  70,              /*!< 70 GPIO070 Interrupt                                                      */
  GPIO071_IRQn              =  71,              /*!< 71 GPIO071 Interrupt                                                      */
  GPIO072_IRQn              =  72,              /*!< 72 GPIO072 Interrupt                                                      */
  GPIO073_IRQn              =  73,              /*!< 73 GPIO073 Interrupt                                                      */
  GPIO074_IRQn              =  74,              /*!< 74 GPIO074 Interrupt                                                      */
  GPIO075_IRQn              =  75,              /*!< 75 GPIO075 Interrupt                                                      */
  GPIO076_IRQn              =  76,              /*!< 76 GPIO076 Interrupt                                                      */
  GPIO077_IRQn              =  77,              /*!< 77 GPIO077 Interrupt                                                      */
  GPIO078_IRQn              =  78,              /*!< 78 GPIO078 Interrupt                                                      */
  GPIO079_IRQn              =  79,              /*!< 79 GPIO079 Interrupt                                                      */
  GPIO080_IRQn              =  80,              /*!< 80 GPIO080 Interrupt                                                      */
  GPIO081_IRQn              =  81,              /*!< 81 GPIO081 Interrupt                                                      */
  GPIO082_IRQn              =  82,              /*!< 82 GPIO082 Interrupt                                                      */
  GPIO083_IRQn              =  83,              /*!< 83 GPIO083 Interrupt                                                      */
  GPIO084_IRQn              =  84,              /*!< 84 GPIO084 Interrupt                                                      */
  GPIO085_IRQn              =  85,              /*!< 85 GPIO085 Interrupt                                                      */
  GPIO086_IRQn              =  86,              /*!< 86 GPIO086 Interrupt                                                      */
  GPIO087_IRQn              =  87,              /*!< 87 GPIO087 Interrupt                                                      */
  GPIO088_IRQn              =  88,              /*!< 88 GPIO088 Interrupt                                                      */
  GPIO089_IRQn              =  89,              /*!< 89 GPIO089 Interrupt                                                      */
  GPIO090_IRQn              =  90,              /*!< 90 GPIO090 Interrupt                                                      */
  GPIO091_IRQn              =  91,              /*!< 91 GPIO091 Interrupt                                                      */
  GPIO092_IRQn              =  92,              /*!< 92 GPIO092 Interrupt                                                      */
  GPIO093_IRQn              =  93,              /*!< 93 GPIO093 Interrupt                                                      */
  GPIO094_IRQn              =  94,              /*!< 94 GPIO094 Interrupt                                                      */
  GPIO095_IRQn              =  95,              /*!< 95 GPIO095 Interrupt                                                      */
  GPIO096_IRQn              =  96,              /*!< 96 GPIO096 Interrupt                                                      */
  GPIO097_IRQn              =  97,              /*!< 97 GPIO097 Interrupt                                                      */
  GPIO098_IRQn              =  98,              /*!< 98 GPIO098 Interrupt                                                      */
  GPIO099_IRQn              =  99,              /*!< 99 GPIO099 Interrupt                                                      */
  GPIO100_IRQn              = 100,              /*!< 100  GPIO100 Interrupt                                                    */
  GPIO101_IRQn              = 101,              /*!< 101  GPIO101 Interrupt                                                    */
  GPIO102_IRQn              = 102,              /*!< 102  GPIO102 Interrupt                                                    */
  GPIO103_IRQn              = 103,              /*!< 103  GPIO103 Interrupt                                                    */
  GPIO104_IRQn              = 104,              /*!< 104  GPIO104 Interrupt                                                    */
  GPIO105_IRQn              = 105,              /*!< 105  GPIO105 Interrupt                                                    */
  GPIO106_IRQn              = 106,              /*!< 106  GPIO106 Interrupt                                                    */
  GPIO107_IRQn              = 107,              /*!< 107  GPIO107 Interrupt                                                    */
  GPIO108_IRQn              = 108,              /*!< 108  GPIO108 Interrupt                                                    */
  GPIO109_IRQn              = 109,              /*!< 109  GPIO109 Interrupt                                                    */
  GPIO110_IRQn              = 110,              /*!< 110  GPIO110 Interrupt                                                    */
  GPIO111_IRQn              = 111,              /*!< 111  GPIO111 Interrupt                                                    */
  GPIO112_IRQn              = 112,              /*!< 112  GPIO112 Interrupt                                                    */
  GPIO113_IRQn              = 113,              /*!< 113  GPIO113 Interrupt                                                    */
  GPIO114_IRQn              = 114,              /*!< 114  GPIO114 Interrupt                                                    */
  GPIO115_IRQn              = 115,              /*!< 115  GPIO115 Interrupt                                                    */
  GPIO116_IRQn              = 116,              /*!< 116  GPIO116 Interrupt                                                    */
  GPIO117_IRQn              = 117,              /*!< 117  GPIO117 Interrupt                                                    */
  GPIO118_IRQn              = 118,              /*!< 118  GPIO118 Interrupt                                                    */
  GPIO119_IRQn              = 119,              /*!< 119  GPIO119 Interrupt                                                    */
  GPIO120_IRQn              = 120,              /*!< 120  GPIO120 Interrupt                                                    */
  GPIO121_IRQn              = 121,              /*!< 121  GPIO121 Interrupt                                                    */
  GPIO122_IRQn              = 122,              /*!< 122  GPIO122 Interrupt                                                    */
  GPIO123_IRQn              = 123,              /*!< 123  GPIO123 Interrupt                                                    */
  GPIO124_IRQn              = 124,              /*!< 124  GPIO124 Interrupt                                                    */
  GPIO125_IRQn              = 125,              /*!< 125  GPIO125 Interrupt                                                    */
  GPIO126_IRQn              = 126,              /*!< 126  GPIO126 Interrupt                                                    */
  GPIO127_IRQn              = 127,              /*!< 127  GPIO127 Interrupt                                                    */
  GPIO128_IRQn              = 128,              /*!< 128  GPIO128 Interrupt                                                    */
  GPIO129_IRQn              = 129,              /*!< 129  GPIO129 Interrupt                                                    */
  GPIO130_IRQn              = 130,              /*!< 130  GPIO130 Interrupt                                                    */
  GPIO131_IRQn              = 131,              /*!< 131  GPIO131 Interrupt                                                    */
  ERST_IRQn                 = 133,              /*!< 133  eSPI Reset Pin Interrupt                                             */
  EPRCH_IRQn                = 134,              /*!< 134  eSPI Peripheral Ch. Interrupt                                        */
  EVCHIDX61_IRQn            = 135,              /*!< 135  eSPI Virtual Wire Ch. Index61 Interrupt                              */
  EVCHIDX51_IRQn            = 136,              /*!< 136  eSPI Virtual Wire Ch. Index51 Interrupt                              */
  EVCHIDX4A_IRQn            = 137,              /*!< 137  eSPI Virtual Wire Ch. Index4A Interrupt                              */
  EVCHIDX47_IRQn            = 138,              /*!< 138  eSPI Virtual Wire Ch. Index47 Interrupt                              */
  EVCHIDX44_IRQn            = 139,              /*!< 139  eSPI Virtual Wire Ch. Index44 Interrupt                              */
  EVCHIDX43_IRQn            = 140,              /*!< 140  eSPI Virtual Wire Ch. Index43 Interrupt                              */
  EVCHIDX42_IRQn            = 141,              /*!< 141  eSPI Virtual Wire Ch. Index42 Interrupt                              */
  EVCHIDX41_IRQn            = 142,              /*!< 142  eSPI Virtual Wire Ch. Index41 Interrupt                              */
  EVCHIDX7_IRQn             = 143,              /*!< 143  eSPI Virtual Wire Ch. Index7 Interrupt                               */
  EVCHIDX3_IRQn             = 144,              /*!< 144  eSPI Virtual Wire Ch. Index3 Interrupt                               */
  EVCHIDX2_IRQn             = 145,              /*!< 145  eSPI Virtual Wire Ch. Index2 Interrupt                               */
  EVCH_IRQn                 = 146,              /*!< 146  eSPI Virtual Wire Ch. Interrupt                                      */
  EOCHTX_IRQn               = 147,              /*!< 147  eSPI OOB Ch. Tx Interrupt                                            */
  EOCHRX_IRQn               = 148,              /*!< 148  eSPI OOB Ch. Rx Interrupt                                            */
  EOCHCFGEN_IRQn            = 149,              /*!< 149  eSPI OOB Ch. Conf Enable Change Interrupt                            */
  EFSAFSTR_IRQn             = 150,              /*!< 150  eSPI SAFS TR Interrupt                                               */
  EFSAFSERASE_IRQn          = 151,              /*!< 151  eSPI SAFS Erase Interrupt                                            */
  EFMAFSTR_IRQn             = 152,              /*!< 152  eSPI MAFS TR Interrupt                                               */
  EFCHCHG_IRQn              = 153,              /*!< 153  eSPI Flash Chanel Change Interrupt                                   */
  KBC_IB_IRQn               = 154,              /*!< 154  KBC Input Buffer Interrupt                                           */
  KBC_OB_IRQn               = 155,              /*!< 155  KBC Output Buffer Interrupt                                          */
  ACPI_IB_IRQn              = 156,              /*!< 156  ACPI Input Buffer Interrupt                                          */
  ACPI_OB_IRQn              = 157,              /*!< 157  ACPI Output Buffer Interrupt                                         */
  PMPORT0_IB_IRQn           = 158,              /*!< 158  PMPORT0 Input Buffer Interrupt                                       */
  PMPORT0_OB_IRQn           = 159,              /*!< 159  PMPORT0 Output Buffer Interrupt                                      */
  PMPORT1_IB_IRQn           = 160,              /*!< 160  PMPORT1 Input Buffer Interrupt                                       */
  PMPORT1_OB_IRQn           = 161,              /*!< 161  PMPORT1 Output Buffer Interrupt                                      */
  PMPORT2_IB_IRQn           = 162,              /*!< 162  PMPORT2 Input Buffer Interrupt                                       */
  PMPORT2_OB_IRQn           = 163,              /*!< 163  PMPORT2 Output Buffer Interrupt                                      */
  PMPORT3_IB_IRQn           = 164,              /*!< 164  PMPORT3 Input Buffer Interrupt                                       */
  PMPORT3_OB_IRQn           = 165,              /*!< 165  PMPORT3 Output Buffer Interrupt                                      */
  PORT80_IRQn               = 166,              /*!< 166  PORT80 Interrupt                                                     */
  PORT81_IRQn               = 167,              /*!< 167  PORT81 Interrupt                                                     */
  PECI_IRQn                 = 168,              /*!< 168  PECI Interrupt                                                       */
  EFSAFOP2_IRQn             = 169,              /*!< 169  eSPI Flash Chanel SAF OP2 Interrupt                                  */
  SPIC_IRQn                 = 180,              /*!< 180  SPIC Interrupt                                                       */
  HSPI_IRQn                 = 181,              /*!< 181  HSPI Interrupt                                                       */
  I2C0_IRQn                 = 182,              /*!< 182  I2C0 Interrupt                                                       */
  I2C1_IRQn                 = 183,              /*!< 183  I2C1 Interrupt                                                       */
  I2C2_IRQn                 = 184,              /*!< 184  I2C2 Interrupt                                                       */
  I2C3_IRQn                 = 185,              /*!< 185  I2C3 Interrupt                                                       */
  I2C4_IRQn                 = 186,              /*!< 186  I2C4 Interrupt                                                       */
  I2C5_IRQn                 = 187,              /*!< 187  I2C5 Interrupt                                                       */
  I2C6_IRQn                 = 188,              /*!< 188  I2C6 Interrupt                                                       */
  I2C7_IRQn                 = 189,              /*!< 189  I2C7 Interrupt                                                       */
  PS2_IRQn                  = 190,              /*!< 190  PS2 Interrupt                                                        */
  UART_IRQn                 = 191,              /*!< 191  UART Interrupt                                                       */
  TACHO0_IRQn               = 192,              /*!< 192  TACHO0 Interrupt                                                     */
  TACHO1_IRQn               = 193,              /*!< 193  TACHO1 Interrupt                                                     */
  TACHO2_IRQn               = 194,              /*!< 194  TACHO2 Interrupt                                                     */
  TACHO3_IRQn               = 195,              /*!< 195  TACHO3 Interrupt                                                     */
  TMR0_IRQn                 = 196,              /*!< 196  TIMER0 Interrupt                                                     */
  TMR1_IRQn                 = 197,              /*!< 197  TIMER1 Interrupt                                                     */
  TMR2_IRQn                 = 198,              /*!< 198  TIMER2 Interrupt                                                     */
  TMR3_IRQn                 = 199,              /*!< 199  TIMER3 Interrupt                                                     */
  TMR4_IRQn                 = 200,              /*!< 200  TIMER4 Interrupt                                                     */
  TMR5_IRQn                 = 201,              /*!< 201  TIMER5 Interrupt                                                     */
  SLWTMR0_IRQn              = 202,              /*!< 202  SLOWTIMER0 Interrupt                                                 */
  SLWTMR1_IRQn              = 203,              /*!< 203  SLOWTIMER1 Interrupt                                                 */
  RTMR_IRQn                 = 204,              /*!< 204  RTOSTIMER Interrupt                                                  */
  RTC_IRQn                  = 205,              /*!< 205  RTC Interrupt                                                        */
  I3C0_IRQn                 = 206,              /*!< 206  I3C0 Interrupt                                                       */
  I3C1_IRQn                 = 207,              /*!< 207  I3C1 Interrupt                                                       */
  PWRBTN_IRQn               = 208,              /*!< 208  PWRBTN Interrupt                                                     */
  WDT_IRQn                  = 209,              /*!< 209  WDT Interrupt                                                        */
  KBM_IRQn                  = 210,              /*!< 210  KBM Interrupt                                                        */
  MSPI_IRQn                 = 211,              /*!< 211  MSPI interrupt                                                       */
  EMI0_IRQn                 = 212,              /*!< 212  EMI0 Interrupt                                                       */
  EMI1_IRQn                 = 213,              /*!< 213  EMI1 Interrupt                                                       */
  EMI2_IRQn                 = 214,              /*!< 214  EMI2 Interrupt                                                       */
  EMI3_IRQn                 = 215,              /*!< 215  EMI3 Interrupt                                                       */
  EMI4_IRQn                 = 216,              /*!< 216  EMI4 Interrupt                                                       */
  EMI5_IRQn                 = 217,              /*!< 217  EMI5 Interrupt                                                       */
  EMI6_IRQn                 = 218,              /*!< 218  EMI6 Interrupt                                                       */
  EMI7_IRQn                 = 219,              /*!< 219  EMI7 Interrupt                                                       */
  MBX_IRQn                  = 220,              /*!< 220  MAILBOX Interrupt                                                    */
  ADC_IRQn                  = 221,              /*!< 221  ADC Interrupt                                                        */
  DMA_IRQn                  = 234,              /*!< 234  DMA Interrupt                                                        */
  SHA2_IRQn                 = 235,              /*!< 235  SHA2 Interrupt                                                       */
  SHA3_IRQn                 = 236,              /*!< 236  SHA3 Interrupt                                                       */
  AES_IRQn                  = 237,              /*!< 237  AES Interrupt                                                        */
  PKE_IRQn                  = 238,              /*!< 238  PKE Interrupt                                                        */
  PUFOTP_IRQn               = 239               /*!< 239  PUFOTP Interrupt                                                     */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM ARMV8MML Processor and Core Peripherals  ============================ */
#define __ARMV8MML_REV                 0x0000U  /*!< ARMV8MML Core Revision                                                    */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __VTOR_PRESENT                 1        /*!< Set to 1 if CPU supports Vector Table Offset Register                     */
#define __MPU_PRESENT                  1        /*!< MPU present                                                               */
#define __FPU_PRESENT                  1        /*!< FPU present                                                               */
#define __FPU_DP                       0        /*!< Double Precision FPU                                                      */
#define __SAUREGION_PRESENT            1        /*!< SAU region present                                                        */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "armv8m/core_armv8mml.h"               /*!< ARM ARMV8MML processor and core peripherals                               */
#include "chip/rts5911/system_RTS5911.h"        /*!< RTS5911 System                                                            */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           SHA2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Lalu SHA2 Engine (SHA2)
  */

typedef struct {                                /*!< (@ 0x40000000) SHA2 Structure                                             */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000000) CONTROL REGISTER                                           */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t RST        : 1;            /*!< [1..1] Reset Digest Registers                                             */
      __IOM uint32_t DMAMD      : 1;            /*!< [2..2] DMA Mode Selection                                                 */
      __IOM uint32_t BYTEINV    : 1;            /*!< [3..3] Inverse Byte Order or Not                                          */
      __IOM uint32_t SHAMD      : 1;            /*!< [4..4] SHA Mode Selection                                                 */
      __IOM uint32_t ICGEN      : 1;            /*!< [5..5] Enable Auto Clock Gating                                           */
      __IOM uint32_t SLVMD      : 1;            /*!< [6..6] Slave Mode/DMA Mode Selection                                      */
            uint32_t            : 25;
    } CTRL_b;
  } ;
  
  union {
    __IM  uint32_t STS;                         /*!< (@ 0x00000004) STATUS REGISTER                                            */
    
    struct {
      __IM  uint32_t FIFOSPACE  : 5;            /*!< [4..0] Number Of Available FIFO Space In Byte                             */
            uint32_t            : 1;
      __IM  uint32_t BUSY       : 1;            /*!< [6..6] Engine Busy Bit                                                    */
            uint32_t            : 25;
    } STS_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  DIGEST[16];                   /*!< (@ 0x00000010) DEGIEST REGISTER                                           */
  __IOM uint32_t  FIFOIN;                       /*!< (@ 0x00000050) FIFO INPUT DATA REGISTER                                   */
} SHA2_Type;                                    /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                          SHA2DMA                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Lalu SHA2 DMA Controller (SHA2DMA)
  */

typedef struct {                                /*!< (@ 0x40001000) SHA2DMA Structure                                          */
  __IOM uint32_t  SAR;                          /*!< (@ 0x00000000) SOURCE ADDRESS REGISTER                                    */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  DAR;                          /*!< (@ 0x00000008) DESTINATION ADDRESS REGISTER                               */
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t CTRLL;                       /*!< (@ 0x00000018) CONTROL REGISTER LOW                                       */
    
    struct {
      __IOM uint32_t INTEN      : 1;            /*!< [0..0] Interrupt Enable Bit                                               */
      __IOM uint32_t DSTTRWIDTH : 3;            /*!< [3..1] Destination Transfer Width                                         */
      __IOM uint32_t SRCTRWIDTH : 3;            /*!< [6..4] Source Transfer Width                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment                                      */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment                                          */
      __IOM uint32_t DESTMSIZE  : 3;            /*!< [13..11] Destination Burst Transaction Length                             */
      __IOM uint32_t SRCMSIZE   : 3;            /*!< [16..14] Source Burst Transaction Length                                  */
            uint32_t            : 15;
    } CTRLL_b;
  } ;
  
  union {
    __IOM uint32_t CTRLH;                       /*!< (@ 0x0000001C) CONTROL REGISTER HIGH                                      */
    
    struct {
      __IOM uint32_t BLOCKTS    : 12;           /*!< [11..0] Block Transfer Size                                               */
            uint32_t            : 20;
    } CTRLH_b;
  } ;
  __IM  uint32_t  RESERVED2[9];
  
  union {
    __IOM uint32_t CFG;                         /*!< (@ 0x00000044) CONFIGURATION REGISTER                                     */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control                                                 */
            uint32_t            : 28;
    } CFG_b;
  } ;
  __IM  uint32_t  RESERVED3[178];
  __IOM uint32_t  MSKTFR;                       /*!< (@ 0x00000310) MASK FOR INTTFR INTERRUPT REGISTER                         */
  __IOM  uint32_t  RESERVED4[9];
  __IOM uint32_t  CLRTFR;                       /*!< (@ 0x00000338) CLEAR INTERRUPT STATUS FOR INTTFR INTERRUPT REGISTER       */
  __IM  uint32_t  RESERVED5[9];
  
  union {
    __IM  uint32_t INTSTS;                      /*!< (@ 0x00000360) COMBINED INTERRUPT SATAUS REGISTER                         */
    
    struct {
      __IM  uint32_t TFR        : 1;            /*!< [0..0] OR of The Contents of StatusTfr Register                           */
      __IM  uint32_t BLOCK      : 1;            /*!< [1..1] OR of The Contents of StatusBlock Register                         */
      __IM  uint32_t SRCT       : 1;            /*!< [2..2] OR of The Contents of StatusSrcTran Register                       */
      __IM  uint32_t DSTT       : 1;            /*!< [3..3] OR of The Contents of StatusDst Register                           */
      __IM  uint32_t ERR        : 1;            /*!< [4..4] OR of The Contents of StatusErr Register                           */
            uint32_t            : 27;
    } INTSTS_b;
  } ;
  __IM  uint32_t  RESERVED6[13];
  
  union {
    __IOM uint32_t CONF;                        /*!< (@ 0x00000398) CONFIGURATION REGISTER                                     */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable DMA Controller                                              */
            uint32_t            : 31;
    } CONF_b;
  } ;
  __IM  uint32_t  RESERVED7;
  
  union {
    __IOM uint32_t CHEN;                        /*!< (@ 0x000003A0) CHANNEL ENABLE REGISTER                                    */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Enables DMA Channel                                                */
            uint32_t            : 7;
      __IOM uint32_t CHENWE     : 1;            /*!< [8..8] Enables Channel Write Enable                                       */
            uint32_t            : 23;
    } CHEN_b;
  } ;
} SHA2DMA_Type;                                 /*!< Size = 932 (0x3a4)                                                        */



/* =========================================================================================================================== */
/* ================                                           SHA3                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Lalu SHA3 Engine (SHA3)
  */

typedef struct {                                /*!< (@ 0x40002000) SHA3 Structure                                             */
  __IOM uint32_t  ADDR;                         /*!< (@ 0x00000000) START ADDRESS REGISTER                                     */
  __IOM uint32_t  LEN;                          /*!< (@ 0x00000004) DATA LENGTH REGISTER                                       */
  
  union {
    __IOM uint32_t SPEC;                        /*!< (@ 0x00000008) SPECIFICATION REGISTER                                     */
    
    struct {
      __IOM uint32_t SPEC       : 1;            /*!< [0..0] SHA3 Or SHAKE Selection                                            */
            uint32_t            : 7;
      __IOM uint32_t SUFFIX     : 3;            /*!< [10..8] Suffix Of SHA3 Specification                                      */
            uint32_t            : 21;
    } SPEC_b;
  } ;
  __IOM uint32_t  INTDIS;                       /*!< (@ 0x0000000C) INTERRUPT DISABLE REGISTER                                 */
  __IOM uint32_t  LPMDDIS;                      /*!< (@ 0x00000010) LOW POWER MODE DISABLE REGISTER                            */
  
  union {
    __IOM uint32_t ENABLE;                      /*!< (@ 0x00000014) ENABLE REGISTER                                            */
    
    struct {
            uint32_t            : 8;
      __IOM uint32_t EN         : 3;            /*!< [10..8] Enable SHA3 Engine To Execute Command                             */
            uint32_t            : 21;
    } ENABLE_b;
  } ;
  __IOM uint32_t  CLR;                          /*!< (@ 0x00000018) CLEAR HASH VALUE AND INPUT BUFFER REGISTER                 */
  __IOM uint32_t  CLRINT;                       /*!< (@ 0x0000001C) CLEAR INTERRUPT REGISTER                                   */
  __IOM uint32_t  SQUEEZE;                      /*!< (@ 0x00000020) SQUEEZE REGISTER                                           */
  __IOM uint32_t  INTSTS;                       /*!< (@ 0x00000024) INTERRUPT STATUS REGISTER                                  */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  RDERRSTS;                     /*!< (@ 0x0000002C) READ ERROR STATUS REGISTER                                 */
  __IOM uint32_t  ADDRERR;                      /*!< (@ 0x00000030) READ ERROR ADDRESS REGISTER                                */
  
  union {
    __IOM uint32_t HASH[50];                    /*!< (@ 0x00000034) HASH VALUE REGISTER                                        */
    
    struct {
      __IOM uint32_t BYTE0      : 8;            /*!< [7..0] Hash value, byte0                                                  */
      __IOM uint32_t BYTE1      : 8;            /*!< [15..8] Hash value, byte1                                                 */
      __IOM uint32_t BYTE2      : 8;            /*!< [23..16] Hash value, byte2                                                */
      __IOM uint32_t BYTE3      : 8;            /*!< [31..24] Hash value, byte3                                                */
    } HASH_b[50];
  } ;
} SHA3_Type;                                    /*!< Size = 252 (0xfc)                                                         */



/* =========================================================================================================================== */
/* ================                                            AES                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Lalu AES Engine (AES)
  */

typedef struct {                                /*!< (@ 0x40003000) AES Structure                                              */
  __IOM uint32_t  DATAIN3;                      /*!< (@ 0x00000000) DATA IN REGISTER                                           */
  __IOM uint32_t  DATAIN2;                      /*!< (@ 0x00000004) DATA IN REGISTER                                           */
  __IOM uint32_t  DATAIN1;                      /*!< (@ 0x00000008) DATA IN REGISTER                                           */
  __IOM uint32_t  DATAIN0;                      /*!< (@ 0x0000000C) DATA IN REGISTER                                           */
  __IOM uint32_t  DATAOUT3;                     /*!< (@ 0x00000010) DATA OUT REGISTER                                          */
  __IOM uint32_t  DATAOUT2;                     /*!< (@ 0x00000014) DATA OUT REGISTER                                          */
  __IOM uint32_t  DATAOUT1;                     /*!< (@ 0x00000018) DATA OUT REGISTER                                          */
  __IOM uint32_t  DATAOUT0;                     /*!< (@ 0x0000001C) DATA OUT REGISTER                                          */
  __IOM uint32_t  KEYDEAOUT7;                   /*!< (@ 0x00000020) DECRYPTION KEY REGISTER                                    */
  __IOM uint32_t  KEYDEAOUT6;                   /*!< (@ 0x00000024) DECRYPTION KEY REGISTER                                    */
  __IOM uint32_t  KEYDEAOUT5;                   /*!< (@ 0x00000028) DECRYPTION KEY REGISTER                                    */
  __IOM uint32_t  KEYDEAOUT4;                   /*!< (@ 0x0000002C) DECRYPTION KEY REGISTER                                    */
  __IOM uint32_t  KEYDEAOUT3;                   /*!< (@ 0x00000030) DECRYPTION KEY REGISTER                                    */
  __IOM uint32_t  KEYDEAOUT2;                   /*!< (@ 0x00000034) DECRYPTION KEY REGISTER                                    */
  __IOM uint32_t  KEYDEAOUT1;                   /*!< (@ 0x00000038) DECRYPTION KEY REGISTER                                    */
  __IOM uint32_t  KEYDEAOUT0;                   /*!< (@ 0x0000003C) DECRYPTION KEY REGISTER                                    */
  __IOM uint32_t  KEY7;                         /*!< (@ 0x00000040) KEY REGISTER                                               */
  __IOM uint32_t  KEY6;                         /*!< (@ 0x00000044) KEY REGISTER                                               */
  __IOM uint32_t  KEY5;                         /*!< (@ 0x00000048) KEY REGISTER                                               */
  __IOM uint32_t  KEY4;                         /*!< (@ 0x0000004C) KEY REGISTER                                               */
  __IOM uint32_t  KEY3;                         /*!< (@ 0x00000050) KEY REGISTER                                               */
  __IOM uint32_t  KEY2;                         /*!< (@ 0x00000054) KEY REGISTER                                               */
  __IOM uint32_t  KEY1;                         /*!< (@ 0x00000058) KEY REGISTER                                               */
  __IOM uint32_t  KEY0;                         /*!< (@ 0x0000005C) KEY REGISTER                                               */
  __IOM uint32_t  IV3;                          /*!< (@ 0x00000060) IV REGISTER                                                */
  __IOM uint32_t  IV2;                          /*!< (@ 0x00000064) IV REGISTER                                                */
  __IOM uint32_t  IV1;                          /*!< (@ 0x00000068) IV REGISTER                                                */
  __IOM uint32_t  IV0;                          /*!< (@ 0x0000006C) IV REGISTER                                                */
  
  union {
    __IOM uint32_t CONF;                        /*!< (@ 0x00000070) CONFIGURATION REGISTER                                     */
    
    struct {
      __IOM uint32_t MODE       : 1;            /*!< [0..0] Engnie Mode Selection                                              */
      __IOM uint32_t CIPHERMD   : 4;            /*!< [4..1] Cipher Mode Selection                                              */
      __IOM uint32_t KEYSIZE    : 2;            /*!< [6..5] Key Size Selection                                                 */
      __IOM uint32_t DECRYPT    : 1;            /*!< [7..7] Decrypt/Encrypt Selection                                          */
      __IOM uint32_t FIRSTBLK   : 1;            /*!< [8..8] First Block                                                        */
      __IOM uint32_t DEKEYGEN   : 1;            /*!< [9..9] Generate A Key When Decrypting                                     */
      __IOM uint32_t BYTESWAP   : 1;            /*!< [10..10] Byte Swap or Not                                                 */
      __IOM uint32_t SCANMSKEN  : 1;            /*!< [11..11] SCA Mask Enable                                                  */
            uint32_t            : 4;
      __IOM uint32_t GCMLAST    : 1;            /*!< [16..16] Indicated The Last Block                                         */
      __IOM uint32_t CMACLAST   : 1;            /*!< [17..17] Indicated The Last Block                                         */
            uint32_t            : 14;
    } CONF_b;
  } ;
  __IOM uint32_t  LEN;                          /*!< (@ 0x00000074) INPUT LENGTH REGISTER                                      */
  __IOM uint32_t  GMACLEN1;                     /*!< (@ 0x00000078) AAD LENGTH REGISTER                                        */
  __IOM uint32_t  GMACLEN0;                     /*!< (@ 0x0000007C) AAD LENGTH REGISTER                                        */
  __IOM uint32_t  TAG3;                         /*!< (@ 0x00000080) TAG REGISTER                                               */
  __IOM uint32_t  TAG2;                         /*!< (@ 0x00000084) TAG REGISTER                                               */
  __IOM uint32_t  TAG1;                         /*!< (@ 0x00000088) TAG REGISTER                                               */
  __IOM uint32_t  TAG0;                         /*!< (@ 0x0000008C) TAG REGISTER                                               */
  __IOM uint32_t  GHASHKEY3;                    /*!< (@ 0x00000090) GHASH KEY REGISTER                                         */
  __IOM uint32_t  GHASHKEY2;                    /*!< (@ 0x00000094) GHASH KEY REGISTER                                         */
  __IOM uint32_t  GHASHKEY1;                    /*!< (@ 0x00000098) GHASH KEY REGISTER                                         */
  __IOM uint32_t  GHASHKEY0;                    /*!< (@ 0x0000009C) GHASH KEY REGISTER                                         */
  __IM  uint32_t  RESERVED[912];
  
  union {
    __IOM uint32_t INTSTS;                      /*!< (@ 0x00000EE0) INTERRUPT STATUS REGISTER                                  */
    
    struct {
      __IOM uint32_t CH0INTSTS  : 1;            /*!< [0..0] Channel Interrupt Status                                           */
      __IOM uint32_t CH1INTSTS  : 1;            /*!< [1..1] Channel Interrupt Status                                           */
      __IOM uint32_t CH2INTSTS  : 1;            /*!< [2..2] Channel Interrupt Status                                           */
      __IOM uint32_t CH3INTSTS  : 1;            /*!< [3..3] Channel Interrupt Status                                           */
      __IOM uint32_t CH4INTSTS  : 1;            /*!< [4..4] Channel Interrupt Status                                           */
      __IOM uint32_t CH5INTSTS  : 1;            /*!< [5..5] Channel Interrupt Status                                           */
      __IOM uint32_t CH6INTSTS  : 1;            /*!< [6..6] Channel Interrupt Status                                           */
      __IOM uint32_t CH7INTSTS  : 1;            /*!< [7..7] Channel Interrupt Status                                           */
      __IOM uint32_t CH8INTSTS  : 1;            /*!< [8..8] Channel Interrupt Status                                           */
      __IOM uint32_t CH9INTSTS  : 1;            /*!< [9..9] Channel Interrupt Status                                           */
      __IOM uint32_t CH10INTSTS : 1;            /*!< [10..10] Channel Interrupt Status                                         */
      __IOM uint32_t CH11INTSTS : 1;            /*!< [11..11] Channel Interrupt Status                                         */
      __IOM uint32_t CH12INTSTS : 1;            /*!< [12..12] Channel Interrupt Status                                         */
      __IOM uint32_t CH13INTSTS : 1;            /*!< [13..13] Channel Interrupt Status                                         */
      __IOM uint32_t CH14INTSTS : 1;            /*!< [14..14] Channel Interrupt Status                                         */
      __IOM uint32_t CH15INTSTS : 1;            /*!< [15..15] Channel Interrupt Status                                         */
            uint32_t            : 16;
    } INTSTS_b;
  } ;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IM  uint32_t INTRAW;                      /*!< (@ 0x00000EF0) RAW INTERRUPT STATUS REGISTER                              */
    
    struct {
      __IM  uint32_t SLVDONE    : 1;            /*!< [0..0] Slave Mode Completes AES                                           */
      __IM  uint32_t ERRBLKSIZE : 1;            /*!< [1..1] Input size is a multiple of 128                                    */
      __IM  uint32_t ERRDECIPHER : 1;           /*!< [2..2] User Set a Non-Existent Cipher Mode                                */
      __IM  uint32_t ERRORENDE  : 1;            /*!< [3..3] User Uses Operation When Closing                                   */
            uint32_t            : 28;
    } INTRAW_b;
  } ;
  
  union {
    __IOM uint32_t INTMSK;                      /*!< (@ 0x00000EF4) ENABLE INTERRUPT REGISTER                                  */
    
    struct {
      __IOM uint32_t SLVDONE    : 1;            /*!< [0..0] Enable SLVDONE Interrupt                                           */
      __IOM uint32_t ERRBLKSIZE : 1;            /*!< [1..1] Enable ERRBLKSIZE Interrupt                                        */
      __IOM uint32_t ERRDECIPHER : 1;           /*!< [2..2] Enable ERRDECIPHER Interrupt                                       */
      __IOM uint32_t ERRORENDE  : 1;            /*!< [3..3] Enable ERRORENDE Interrupt                                         */
            uint32_t            : 28;
    } INTMSK_b;
  } ;
  
  union {
    __IOM uint32_t INTMSKSTS;                   /*!< (@ 0x00000EF8) MASKED INTERRUPT STATUS REGISTER                           */
    
    struct {
      __IOM uint32_t SLVDONE    : 1;            /*!< [0..0] Slave Mode Completes AES                                           */
      __IOM uint32_t ERRBLKSIZE : 1;            /*!< [1..1] Input size is a multiple of 128                                    */
      __IOM uint32_t ERRDECIPHER : 1;           /*!< [2..2] User Set a Non-Existent Cipher Mode                                */
      __IOM uint32_t ERRORENDE  : 1;            /*!< [3..3] User Uses Operation When Closing                                   */
            uint32_t            : 28;
    } INTMSKSTS_b;
  } ;
  
  union {
    __IOM uint32_t INTCLR;                      /*!< (@ 0x00000EFC) CLEAR INTERRUPT REGISTER                                   */
    
    struct {
      __IOM uint32_t AESINTCLR  : 1;            /*!< [3..3] Clear ERRORENDE Interrupt                                          */
            uint32_t            : 31;
    } INTCLR_b;
  } ;
} AES_Type;                                     /*!< Size = 3840 (0xf00)                                                       */



/* =========================================================================================================================== */
/* ================                                            DMA                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA Controller (DMA)
  */

typedef struct {                                /*!< (@ 0x4000B800) DMA Structure                                              */
  __IOM uint32_t  SAR0;                         /*!< (@ 0x00000000) SOURCE ADDRESS REGISTER                                    */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  DAR0;                         /*!< (@ 0x00000008) DESTINATION ADDRESS REGISTER                               */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t LLP0;                        /*!< (@ 0x00000010) LINKED LIST POINTER REGISTER                               */
    
    struct {
      __IOM uint32_t LMS        : 2;            /*!< [1..0] List Master Select                                                 */
      __IOM uint32_t LOC        : 30;           /*!< [31..2] Starting Address In Memory                                        */
    } LLP0_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t CTRL0L;                      /*!< (@ 0x00000018) CONTROL REGISTER LOW                                       */
    
    struct {
      __IOM uint32_t INTEN      : 1;            /*!< [0..0] Interrupt Enable Bit                                               */
      __IOM uint32_t DSTTRWIDTH : 3;            /*!< [3..1] Destination Transfer Width                                         */
      __IOM uint32_t SRCTRWIDTH : 3;            /*!< [6..4] Source Transfer Width                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment                                      */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment                                          */
      __IOM uint32_t DESTMSIZE  : 3;            /*!< [13..11] Destination Burst Transaction Length                             */
      __IOM uint32_t SRCMSIZE   : 3;            /*!< [16..14] Source Burst Transaction Length                                  */
      __IOM uint32_t SRCGATHEREN : 1;           /*!< [17..17] Source gather enable bit                                         */
      __IOM uint32_t DSTSCATTEREN : 1;          /*!< [18..18] Destination scatter enable bit                                   */
      __IOM uint32_t WRNPEN     : 1;            /*!< [19..19] OCP non-posted write enable bit                                  */
      __IOM uint32_t TTFC       : 3;            /*!< [22..20] Transfer Type and Flow Control                                   */
            uint32_t            : 4;
      __IOM uint32_t LLPDSTEN   : 1;            /*!< [27..27] Block chanining is enabled on the destination side
                                                     only                                                                      */
      __IOM uint32_t LLPSRCEN   : 1;            /*!< [28..28] Block chanining is enabled on the source side only               */
            uint32_t            : 3;
    } CTRL0L_b;
  } ;
  
  union {
    __IOM uint32_t CTRL0H;                      /*!< (@ 0x0000001C) CONTROL REGISTER HIGH                                      */
    
    struct {
      __IOM uint32_t BLOCKTS    : 32;           /*!< [31..0] Block Transfer Size                                               */
    } CTRL0H_b;
  } ;
  __IM  uint32_t  RESERVED3[8];
  
  union {
    __IOM uint32_t CFG0L;                       /*!< (@ 0x00000040) CONFIGURATION REGISTER LOW                                 */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive                               */
      __IM  uint32_t SRCPCTLOVER : 1;           /*!< [1..1] DMA Source bus protocol finish, indicating the current
                                                     read command has finished                                                 */
      __IM  uint32_t DSTPCTLOVER : 1;           /*!< [2..2] DMA destination bus protocol finish, indicating the current
                                                     read command has finished                                                 */
            uint32_t            : 1;
      __IOM uint32_t CHPRIOR    : 4;            /*!< [7..4] Channel priority                                                   */
      __IOM uint32_t CHSUSP     : 1;            /*!< [8..8] Channel Suspend                                                    */
      __IM  uint32_t FIFOEMPTY  : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO                */
      __IOM uint32_t HSSELDST   : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select              */
      __IOM uint32_t HSSELSRC   : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select                   */
            uint32_t            : 6;
      __IOM uint32_t DSTHSPOL   : 1;            /*!< [18..18] Destination Handshaking Interface Polarity                       */
      __IOM uint32_t SRCHSPOL   : 1;            /*!< [19..19] Source Handshaking Interface Polarity                            */
      __IOM uint32_t MAXABRST   : 10;           /*!< [29..20] Maximum AXI Burst Length                                         */
      __IOM uint32_t RELOADSRC  : 1;            /*!< [30..30] Automatic Source Reload                                          */
      __IOM uint32_t RELOADDST  : 1;            /*!< [31..31] Automatic Destination Reload                                     */
    } CFG0L_b;
  } ;
  
  union {
    __IOM uint32_t CFG0H;                       /*!< (@ 0x00000044) CONFIGURATION REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode                                                  */
      __IOM uint32_t FIFOMODE   : 1;            /*!< [1..1] FIFO Mode Select                                                   */
            uint32_t            : 1;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control                                                 */
            uint32_t            : 3;
      __IOM uint32_t SRCPER     : 4;            /*!< [10..7] Assigns a Hardware Handshaking Interface to The Source
                                                     of Channel                                                                */
      __IOM uint32_t DSTPER     : 4;            /*!< [14..11] Assigns a Hardware Handshaking Interface to The Destination
                                                     of Channel                                                                */
      __IOM uint32_t EXTSRCPER1 : 1;            /*!< [15..15] The extened 4th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER1 : 1;            /*!< [16..16] The extened 4th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER2 : 1;            /*!< [17..17] The extened 5th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER2 : 1;            /*!< [18..18] The extened 5th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER3 : 1;            /*!< [19..19] The extened 6th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER3 : 1;            /*!< [20..20] The extened 6th bit of DSTPER                                    */
            uint32_t            : 11;
    } CFG0H_b;
  } ;
  
  union {
    __IOM uint32_t SGR0L;                       /*!< (@ 0x00000048) SOURCE GATHER REGISTER LOW                                 */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source Gather Interval                                            */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source Gather Count                                              */
    } SGR0L_b;
  } ;
  
  union {
    __IOM uint32_t SGR0H;                       /*!< (@ 0x0000004C) SOURCE GATHER REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source Gather Circular Streaming Number                           */
      __IOM uint32_t BLKTS      : 16;           /*!< [31..16] Block Transfer Size                                              */
    } SGR0H_b;
  } ;
  
  union {
    __IOM uint32_t DSR0L;                       /*!< (@ 0x00000050) DESTINATION SCATTER REGISTER LOW                           */
    
    struct {
      __IOM uint32_t DSI        : 20;           /*!< [19..0] Destination Scatter Interval                                      */
      __IOM uint32_t DSC        : 12;           /*!< [31..20] Destination Scatter Count                                        */
    } DSR0L_b;
  } ;
  
  union {
    __IOM uint32_t DSR0H;                       /*!< (@ 0x00000054) DESTINATION SCATTER REGISTER HIGH                          */
    
    struct {
      __IOM uint32_t DSI        : 5;            /*!< [4..0] Destination Scatter Circular Streaming Number                      */
            uint32_t            : 27;
    } DSR0H_b;
  } ;
  __IOM uint32_t  SAR1;                         /*!< (@ 0x00000058) SOURCE ADDRESS REGISTER                                    */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  DAR1;                         /*!< (@ 0x00000060) DESTINATION ADDRESS REGISTER                               */
  __IM  uint32_t  RESERVED5;
  
  union {
    __IOM uint32_t LLP1;                        /*!< (@ 0x00000068) LINKED LIST POINTER REGISTER                               */
    
    struct {
      __IOM uint32_t LMS        : 2;            /*!< [1..0] List Master Select                                                 */
      __IOM uint32_t LOC        : 30;           /*!< [31..2] Starting Address In Memory                                        */
    } LLP1_b;
  } ;
  __IM  uint32_t  RESERVED6;
  
  union {
    __IOM uint32_t CTRL1L;                      /*!< (@ 0x00000070) CONTROL REGISTER LOW                                       */
    
    struct {
      __IOM uint32_t INTEN      : 1;            /*!< [0..0] Interrupt Enable Bit                                               */
      __IOM uint32_t DSTTRWIDTH : 3;            /*!< [3..1] Destination Transfer Width                                         */
      __IOM uint32_t SRCTRWIDTH : 3;            /*!< [6..4] Source Transfer Width                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment                                      */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment                                          */
      __IOM uint32_t DESTMSIZE  : 3;            /*!< [13..11] Destination Burst Transaction Length                             */
      __IOM uint32_t SRCMSIZE   : 3;            /*!< [16..14] Source Burst Transaction Length                                  */
      __IOM uint32_t SRCGATHEREN : 1;           /*!< [17..17] Source gather enable bit                                         */
      __IOM uint32_t DSTSCATTEREN : 1;          /*!< [18..18] Destination scatter enable bit                                   */
      __IOM uint32_t WRNPEN     : 1;            /*!< [19..19] OCP non-posted write enable bit                                  */
      __IOM uint32_t TTFC       : 3;            /*!< [22..20] Transfer Type and Flow Control                                   */
            uint32_t            : 4;
      __IOM uint32_t LLPDSTEN   : 1;            /*!< [27..27] Block chanining is enabled on the destination side
                                                     only                                                                      */
      __IOM uint32_t LLPSRCEN   : 1;            /*!< [28..28] Block chanining is enabled on the source side only               */
            uint32_t            : 3;
    } CTRL1L_b;
  } ;
  
  union {
    __IOM uint32_t CTRL1H;                      /*!< (@ 0x00000074) CONTROL REGISTER HIGH                                      */
    
    struct {
      __IOM uint32_t BLOCKTS    : 32;           /*!< [31..0] Block Transfer Size                                               */
    } CTRL1H_b;
  } ;
  __IM  uint32_t  RESERVED7[8];
  
  union {
    __IOM uint32_t CFG1L;                       /*!< (@ 0x00000098) CONFIGURATION REGISTER LOW                                 */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive                               */
      __IM  uint32_t SRCPCTLOVER : 1;           /*!< [1..1] DMA Source bus protocol finish, indicating the current
                                                     read command has finished                                                 */
      __IM  uint32_t DSTPCTLOVER : 1;           /*!< [2..2] DMA destination bus protocol finish, indicating the current
                                                     read command has finished                                                 */
            uint32_t            : 1;
      __IOM uint32_t CHPRIOR    : 4;            /*!< [7..4] Channel priority                                                   */
      __IOM uint32_t CHSUSP     : 1;            /*!< [8..8] Channel Suspend                                                    */
      __IM  uint32_t FIFOEMPTY  : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO                */
      __IOM uint32_t HSSELDST   : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select              */
      __IOM uint32_t HSSELSRC   : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select                   */
            uint32_t            : 6;
      __IOM uint32_t DSTHSPOL   : 1;            /*!< [18..18] Destination Handshaking Interface Polarity                       */
      __IOM uint32_t SRCHSPOL   : 1;            /*!< [19..19] Source Handshaking Interface Polarity                            */
      __IOM uint32_t MAXABRST   : 10;           /*!< [29..20] Maximum AXI Burst Length                                         */
      __IOM uint32_t RELOADSRC  : 1;            /*!< [30..30] Automatic Source Reload                                          */
      __IOM uint32_t RELOADDST  : 1;            /*!< [31..31] Automatic Destination Reload                                     */
    } CFG1L_b;
  } ;
  
  union {
    __IOM uint32_t CFG1H;                       /*!< (@ 0x0000009C) CONFIGURATION REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode                                                  */
      __IOM uint32_t FIFOMODE   : 1;            /*!< [1..1] FIFO Mode Select                                                   */
            uint32_t            : 1;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control                                                 */
            uint32_t            : 3;
      __IOM uint32_t SRCPER     : 4;            /*!< [10..7] Assigns a Hardware Handshaking Interface to The Source
                                                     of Channel                                                                */
      __IOM uint32_t DSTPER     : 4;            /*!< [14..11] Assigns a Hardware Handshaking Interface to The Destination
                                                     of Channel                                                                */
      __IOM uint32_t EXTSRCPER1 : 1;            /*!< [15..15] The extened 4th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER1 : 1;            /*!< [16..16] The extened 4th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER2 : 1;            /*!< [17..17] The extened 5th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER2 : 1;            /*!< [18..18] The extened 5th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER3 : 1;            /*!< [19..19] The extened 6th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER3 : 1;            /*!< [20..20] The extened 6th bit of DSTPER                                    */
            uint32_t            : 11;
    } CFG1H_b;
  } ;
  
  union {
    __IOM uint32_t SGR1L;                       /*!< (@ 0x000000A0) SOURCE GATHER REGISTER LOW                                 */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source Gather Interval                                            */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source Gather Count                                              */
    } SGR1L_b;
  } ;
  
  union {
    __IOM uint32_t SGR1H;                       /*!< (@ 0x000000A4) SOURCE GATHER REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source Gather Circular Streaming Number                           */
      __IOM uint32_t BLKTS      : 16;           /*!< [31..16] Block Transfer Size                                              */
    } SGR1H_b;
  } ;
  
  union {
    __IOM uint32_t DSR1L;                       /*!< (@ 0x000000A8) DESTINATION SCATTER REGISTER LOW                           */
    
    struct {
      __IOM uint32_t DSI        : 20;           /*!< [19..0] Destination Scatter Interval                                      */
      __IOM uint32_t DSC        : 12;           /*!< [31..20] Destination Scatter Count                                        */
    } DSR1L_b;
  } ;
  
  union {
    __IOM uint32_t DSR1H;                       /*!< (@ 0x000000AC) DESTINATION SCATTER REGISTER HIGH                          */
    
    struct {
      __IOM uint32_t DSI        : 5;            /*!< [4..0] Destination Scatter Circular Streaming Number                      */
            uint32_t            : 27;
    } DSR1H_b;
  } ;
  __IOM uint32_t  SAR2;                         /*!< (@ 0x000000B0) SOURCE ADDRESS REGISTER                                    */
  __IM  uint32_t  RESERVED8;
  __IOM uint32_t  DAR2;                         /*!< (@ 0x000000B8) DESTINATION ADDRESS REGISTER                               */
  __IM  uint32_t  RESERVED9;
  
  union {
    __IOM uint32_t LLP2;                        /*!< (@ 0x000000C0) LINKED LIST POINTER REGISTER                               */
    
    struct {
      __IOM uint32_t LMS        : 2;            /*!< [1..0] List Master Select                                                 */
      __IOM uint32_t LOC        : 30;           /*!< [31..2] Starting Address In Memory                                        */
    } LLP2_b;
  } ;
  __IM  uint32_t  RESERVED10;
  
  union {
    __IOM uint32_t CTRL2L;                      /*!< (@ 0x000000C8) CONTROL REGISTER LOW                                       */
    
    struct {
      __IOM uint32_t INTEN      : 1;            /*!< [0..0] Interrupt Enable Bit                                               */
      __IOM uint32_t DSTTRWIDTH : 3;            /*!< [3..1] Destination Transfer Width                                         */
      __IOM uint32_t SRCTRWIDTH : 3;            /*!< [6..4] Source Transfer Width                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment                                      */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment                                          */
      __IOM uint32_t DESTMSIZE  : 3;            /*!< [13..11] Destination Burst Transaction Length                             */
      __IOM uint32_t SRCMSIZE   : 3;            /*!< [16..14] Source Burst Transaction Length                                  */
      __IOM uint32_t SRCGATHEREN : 1;           /*!< [17..17] Source gather enable bit                                         */
      __IOM uint32_t DSTSCATTEREN : 1;          /*!< [18..18] Destination scatter enable bit                                   */
      __IOM uint32_t WRNPEN     : 1;            /*!< [19..19] OCP non-posted write enable bit                                  */
      __IOM uint32_t TTFC       : 3;            /*!< [22..20] Transfer Type and Flow Control                                   */
            uint32_t            : 4;
      __IOM uint32_t LLPDSTEN   : 1;            /*!< [27..27] Block chanining is enabled on the destination side
                                                     only                                                                      */
      __IOM uint32_t LLPSRCEN   : 1;            /*!< [28..28] Block chanining is enabled on the source side only               */
            uint32_t            : 3;
    } CTRL2L_b;
  } ;
  
  union {
    __IOM uint32_t CTRL2H;                      /*!< (@ 0x000000CC) CONTROL REGISTER HIGH                                      */
    
    struct {
      __IOM uint32_t BLOCKTS    : 32;           /*!< [31..0] Block Transfer Size                                               */
    } CTRL2H_b;
  } ;
  __IM  uint32_t  RESERVED11[8];
  
  union {
    __IOM uint32_t CFG2L;                       /*!< (@ 0x000000F0) CONFIGURATION REGISTER LOW                                 */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive                               */
      __IM  uint32_t SRCPCTLOVER : 1;           /*!< [1..1] DMA Source bus protocol finish, indicating the current
                                                     read command has finished                                                 */
      __IM  uint32_t DSTPCTLOVER : 1;           /*!< [2..2] DMA destination bus protocol finish, indicating the current
                                                     read command has finished                                                 */
            uint32_t            : 1;
      __IOM uint32_t CHPRIOR    : 4;            /*!< [7..4] Channel priority                                                   */
      __IOM uint32_t CHSUSP     : 1;            /*!< [8..8] Channel Suspend                                                    */
      __IM  uint32_t FIFOEMPTY  : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO                */
      __IOM uint32_t HSSELDST   : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select              */
      __IOM uint32_t HSSELSRC   : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select                   */
            uint32_t            : 6;
      __IOM uint32_t DSTHSPOL   : 1;            /*!< [18..18] Destination Handshaking Interface Polarity                       */
      __IOM uint32_t SRCHSPOL   : 1;            /*!< [19..19] Source Handshaking Interface Polarity                            */
      __IOM uint32_t MAXABRST   : 10;           /*!< [29..20] Maximum AXI Burst Length                                         */
      __IOM uint32_t RELOADSRC  : 1;            /*!< [30..30] Automatic Source Reload                                          */
      __IOM uint32_t RELOADDST  : 1;            /*!< [31..31] Automatic Destination Reload                                     */
    } CFG2L_b;
  } ;
  
  union {
    __IOM uint32_t CFG2H;                       /*!< (@ 0x000000F4) CONFIGURATION REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode                                                  */
      __IOM uint32_t FIFOMODE   : 1;            /*!< [1..1] FIFO Mode Select                                                   */
            uint32_t            : 1;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control                                                 */
            uint32_t            : 3;
      __IOM uint32_t SRCPER     : 4;            /*!< [10..7] Assigns a Hardware Handshaking Interface to The Source
                                                     of Channel                                                                */
      __IOM uint32_t DSTPER     : 4;            /*!< [14..11] Assigns a Hardware Handshaking Interface to The Destination
                                                     of Channel                                                                */
      __IOM uint32_t EXTSRCPER1 : 1;            /*!< [15..15] The extened 4th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER1 : 1;            /*!< [16..16] The extened 4th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER2 : 1;            /*!< [17..17] The extened 5th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER2 : 1;            /*!< [18..18] The extened 5th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER3 : 1;            /*!< [19..19] The extened 6th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER3 : 1;            /*!< [20..20] The extened 6th bit of DSTPER                                    */
            uint32_t            : 11;
    } CFG2H_b;
  } ;
  
  union {
    __IOM uint32_t SGR2L;                       /*!< (@ 0x000000F8) SOURCE GATHER REGISTER LOW                                 */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source Gather Interval                                            */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source Gather Count                                              */
    } SGR2L_b;
  } ;
  
  union {
    __IOM uint32_t SGR2H;                       /*!< (@ 0x000000FC) SOURCE GATHER REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source Gather Circular Streaming Number                           */
      __IOM uint32_t BLKTS      : 16;           /*!< [31..16] Block Transfer Size                                              */
    } SGR2H_b;
  } ;
  
  union {
    __IOM uint32_t DSR2L;                       /*!< (@ 0x00000100) DESTINATION SCATTER REGISTER LOW                           */
    
    struct {
      __IOM uint32_t DSI        : 20;           /*!< [19..0] Destination Scatter Interval                                      */
      __IOM uint32_t DSC        : 12;           /*!< [31..20] Destination Scatter Count                                        */
    } DSR2L_b;
  } ;
  
  union {
    __IOM uint32_t DSR2H;                       /*!< (@ 0x00000104) DESTINATION SCATTER REGISTER HIGH                          */
    
    struct {
      __IOM uint32_t DSI        : 5;            /*!< [4..0] Destination Scatter Circular Streaming Number                      */
            uint32_t            : 27;
    } DSR2H_b;
  } ;
  __IOM uint32_t  SAR3;                         /*!< (@ 0x00000108) SOURCE ADDRESS REGISTER                                    */
  __IM  uint32_t  RESERVED12;
  __IOM uint32_t  DAR3;                         /*!< (@ 0x00000110) DESTINATION ADDRESS REGISTER                               */
  __IM  uint32_t  RESERVED13;
  
  union {
    __IOM uint32_t LLP3;                        /*!< (@ 0x00000118) LINKED LIST POINTER REGISTER                               */
    
    struct {
      __IOM uint32_t LMS        : 2;            /*!< [1..0] List Master Select                                                 */
      __IOM uint32_t LOC        : 30;           /*!< [31..2] Starting Address In Memory                                        */
    } LLP3_b;
  } ;
  __IM  uint32_t  RESERVED14;
  
  union {
    __IOM uint32_t CTRL3L;                      /*!< (@ 0x00000120) CONTROL REGISTER LOW                                       */
    
    struct {
      __IOM uint32_t INTEN      : 1;            /*!< [0..0] Interrupt Enable Bit                                               */
      __IOM uint32_t DSTTRWIDTH : 3;            /*!< [3..1] Destination Transfer Width                                         */
      __IOM uint32_t SRCTRWIDTH : 3;            /*!< [6..4] Source Transfer Width                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment                                      */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment                                          */
      __IOM uint32_t DESTMSIZE  : 3;            /*!< [13..11] Destination Burst Transaction Length                             */
      __IOM uint32_t SRCMSIZE   : 3;            /*!< [16..14] Source Burst Transaction Length                                  */
      __IOM uint32_t SRCGATHEREN : 1;           /*!< [17..17] Source gather enable bit                                         */
      __IOM uint32_t DSTSCATTEREN : 1;          /*!< [18..18] Destination scatter enable bit                                   */
      __IOM uint32_t WRNPEN     : 1;            /*!< [19..19] OCP non-posted write enable bit                                  */
      __IOM uint32_t TTFC       : 3;            /*!< [22..20] Transfer Type and Flow Control                                   */
            uint32_t            : 4;
      __IOM uint32_t LLPDSTEN   : 1;            /*!< [27..27] Block chanining is enabled on the destination side
                                                     only                                                                      */
      __IOM uint32_t LLPSRCEN   : 1;            /*!< [28..28] Block chanining is enabled on the source side only               */
            uint32_t            : 3;
    } CTRL3L_b;
  } ;
  
  union {
    __IOM uint32_t CTRL3H;                      /*!< (@ 0x00000124) CONTROL REGISTER HIGH                                      */
    
    struct {
      __IOM uint32_t BLOCKTS    : 32;           /*!< [31..0] Block Transfer Size                                               */
    } CTRL3H_b;
  } ;
  __IM  uint32_t  RESERVED15[8];
  
  union {
    __IOM uint32_t CFG3L;                       /*!< (@ 0x00000148) CONFIGURATION REGISTER LOW                                 */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive                               */
      __IM  uint32_t SRCPCTLOVER : 1;           /*!< [1..1] DMA Source bus protocol finish, indicating the current
                                                     read command has finished                                                 */
      __IM  uint32_t DSTPCTLOVER : 1;           /*!< [2..2] DMA destination bus protocol finish, indicating the current
                                                     read command has finished                                                 */
            uint32_t            : 1;
      __IOM uint32_t CHPRIOR    : 4;            /*!< [7..4] Channel priority                                                   */
      __IOM uint32_t CHSUSP     : 1;            /*!< [8..8] Channel Suspend                                                    */
      __IM  uint32_t FIFOEMPTY  : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO                */
      __IOM uint32_t HSSELDST   : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select              */
      __IOM uint32_t HSSELSRC   : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select                   */
            uint32_t            : 6;
      __IOM uint32_t DSTHSPOL   : 1;            /*!< [18..18] Destination Handshaking Interface Polarity                       */
      __IOM uint32_t SRCHSPOL   : 1;            /*!< [19..19] Source Handshaking Interface Polarity                            */
      __IOM uint32_t MAXABRST   : 10;           /*!< [29..20] Maximum AXI Burst Length                                         */
      __IOM uint32_t RELOADSRC  : 1;            /*!< [30..30] Automatic Source Reload                                          */
      __IOM uint32_t RELOADDST  : 1;            /*!< [31..31] Automatic Destination Reload                                     */
    } CFG3L_b;
  } ;
  
  union {
    __IOM uint32_t CFG3H;                       /*!< (@ 0x0000014C) CONFIGURATION REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode                                                  */
      __IOM uint32_t FIFOMODE   : 1;            /*!< [1..1] FIFO Mode Select                                                   */
            uint32_t            : 1;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control                                                 */
            uint32_t            : 3;
      __IOM uint32_t SRCPER     : 4;            /*!< [10..7] Assigns a Hardware Handshaking Interface to The Source
                                                     of Channel                                                                */
      __IOM uint32_t DSTPER     : 4;            /*!< [14..11] Assigns a Hardware Handshaking Interface to The Destination
                                                     of Channel                                                                */
      __IOM uint32_t EXTSRCPER1 : 1;            /*!< [15..15] The extened 4th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER1 : 1;            /*!< [16..16] The extened 4th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER2 : 1;            /*!< [17..17] The extened 5th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER2 : 1;            /*!< [18..18] The extened 5th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER3 : 1;            /*!< [19..19] The extened 6th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER3 : 1;            /*!< [20..20] The extened 6th bit of DSTPER                                    */
            uint32_t            : 11;
    } CFG3H_b;
  } ;
  
  union {
    __IOM uint32_t SGR3L;                       /*!< (@ 0x00000150) SOURCE GATHER REGISTER LOW                                 */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source Gather Interval                                            */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source Gather Count                                              */
    } SGR3L_b;
  } ;
  
  union {
    __IOM uint32_t SGR3H;                       /*!< (@ 0x00000154) SOURCE GATHER REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source Gather Circular Streaming Number                           */
      __IOM uint32_t BLKTS      : 16;           /*!< [31..16] Block Transfer Size                                              */
    } SGR3H_b;
  } ;
  
  union {
    __IOM uint32_t DSR3L;                       /*!< (@ 0x00000158) DESTINATION SCATTER REGISTER LOW                           */
    
    struct {
      __IOM uint32_t DSI        : 20;           /*!< [19..0] Destination Scatter Interval                                      */
      __IOM uint32_t DSC        : 12;           /*!< [31..20] Destination Scatter Count                                        */
    } DSR3L_b;
  } ;
  
  union {
    __IOM uint32_t DSR3H;                       /*!< (@ 0x0000015C) DESTINATION SCATTER REGISTER HIGH                          */
    
    struct {
      __IOM uint32_t DSI        : 5;            /*!< [4..0] Destination Scatter Circular Streaming Number                      */
            uint32_t            : 27;
    } DSR3H_b;
  } ;
  __IOM uint32_t  SAR4;                         /*!< (@ 0x00000160) SOURCE ADDRESS REGISTER                                    */
  __IM  uint32_t  RESERVED16;
  __IOM uint32_t  DAR4;                         /*!< (@ 0x00000168) DESTINATION ADDRESS REGISTER                               */
  __IM  uint32_t  RESERVED17;
  
  union {
    __IOM uint32_t LLP4;                        /*!< (@ 0x00000170) LINKED LIST POINTER REGISTER                               */
    
    struct {
      __IOM uint32_t LMS        : 2;            /*!< [1..0] List Master Select                                                 */
      __IOM uint32_t LOC        : 30;           /*!< [31..2] Starting Address In Memory                                        */
    } LLP4_b;
  } ;
  __IM  uint32_t  RESERVED18;
  
  union {
    __IOM uint32_t CTRL4L;                      /*!< (@ 0x00000178) CONTROL REGISTER LOW                                       */
    
    struct {
      __IOM uint32_t INTEN      : 1;            /*!< [0..0] Interrupt Enable Bit                                               */
      __IOM uint32_t DSTTRWIDTH : 3;            /*!< [3..1] Destination Transfer Width                                         */
      __IOM uint32_t SRCTRWIDTH : 3;            /*!< [6..4] Source Transfer Width                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment                                      */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment                                          */
      __IOM uint32_t DESTMSIZE  : 3;            /*!< [13..11] Destination Burst Transaction Length                             */
      __IOM uint32_t SRCMSIZE   : 3;            /*!< [16..14] Source Burst Transaction Length                                  */
      __IOM uint32_t SRCGATHEREN : 1;           /*!< [17..17] Source gather enable bit                                         */
      __IOM uint32_t DSTSCATTEREN : 1;          /*!< [18..18] Destination scatter enable bit                                   */
      __IOM uint32_t WRNPEN     : 1;            /*!< [19..19] OCP non-posted write enable bit                                  */
      __IOM uint32_t TTFC       : 3;            /*!< [22..20] Transfer Type and Flow Control                                   */
            uint32_t            : 4;
      __IOM uint32_t LLPDSTEN   : 1;            /*!< [27..27] Block chanining is enabled on the destination side
                                                     only                                                                      */
      __IOM uint32_t LLPSRCEN   : 1;            /*!< [28..28] Block chanining is enabled on the source side only               */
            uint32_t            : 3;
    } CTRL4L_b;
  } ;
  
  union {
    __IOM uint32_t CTRL4H;                      /*!< (@ 0x0000017C) CONTROL REGISTER HIGH                                      */
    
    struct {
      __IOM uint32_t BLOCKTS    : 32;           /*!< [31..0] Block Transfer Size                                               */
    } CTRL4H_b;
  } ;
  __IM  uint32_t  RESERVED19[8];
  
  union {
    __IOM uint32_t CFG4L;                       /*!< (@ 0x000001A0) CONFIGURATION REGISTER LOW                                 */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive                               */
      __IM  uint32_t SRCPCTLOVER : 1;           /*!< [1..1] DMA Source bus protocol finish, indicating the current
                                                     read command has finished                                                 */
      __IM  uint32_t DSTPCTLOVER : 1;           /*!< [2..2] DMA destination bus protocol finish, indicating the current
                                                     read command has finished                                                 */
            uint32_t            : 1;
      __IOM uint32_t CHPRIOR    : 4;            /*!< [7..4] Channel priority                                                   */
      __IOM uint32_t CHSUSP     : 1;            /*!< [8..8] Channel Suspend                                                    */
      __IM  uint32_t FIFOEMPTY  : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO                */
      __IOM uint32_t HSSELDST   : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select              */
      __IOM uint32_t HSSELSRC   : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select                   */
            uint32_t            : 6;
      __IOM uint32_t DSTHSPOL   : 1;            /*!< [18..18] Destination Handshaking Interface Polarity                       */
      __IOM uint32_t SRCHSPOL   : 1;            /*!< [19..19] Source Handshaking Interface Polarity                            */
      __IOM uint32_t MAXABRST   : 10;           /*!< [29..20] Maximum AXI Burst Length                                         */
      __IOM uint32_t RELOADSRC  : 1;            /*!< [30..30] Automatic Source Reload                                          */
      __IOM uint32_t RELOADDST  : 1;            /*!< [31..31] Automatic Destination Reload                                     */
    } CFG4L_b;
  } ;
  
  union {
    __IOM uint32_t CFG4H;                       /*!< (@ 0x000001A4) CONFIGURATION REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode                                                  */
      __IOM uint32_t FIFOMODE   : 1;            /*!< [1..1] FIFO Mode Select                                                   */
            uint32_t            : 1;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control                                                 */
            uint32_t            : 3;
      __IOM uint32_t SRCPER     : 4;            /*!< [10..7] Assigns a Hardware Handshaking Interface to The Source
                                                     of Channel                                                                */
      __IOM uint32_t DSTPER     : 4;            /*!< [14..11] Assigns a Hardware Handshaking Interface to The Destination
                                                     of Channel                                                                */
      __IOM uint32_t EXTSRCPER1 : 1;            /*!< [15..15] The extened 4th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER1 : 1;            /*!< [16..16] The extened 4th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER2 : 1;            /*!< [17..17] The extened 5th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER2 : 1;            /*!< [18..18] The extened 5th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER3 : 1;            /*!< [19..19] The extened 6th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER3 : 1;            /*!< [20..20] The extened 6th bit of DSTPER                                    */
            uint32_t            : 11;
    } CFG4H_b;
  } ;
  
  union {
    __IOM uint32_t SGR4L;                       /*!< (@ 0x000001A8) SOURCE GATHER REGISTER LOW                                 */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source Gather Interval                                            */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source Gather Count                                              */
    } SGR4L_b;
  } ;
  
  union {
    __IOM uint32_t SGR4H;                       /*!< (@ 0x000001AC) SOURCE GATHER REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source Gather Circular Streaming Number                           */
      __IOM uint32_t BLKTS      : 16;           /*!< [31..16] Block Transfer Size                                              */
    } SGR4H_b;
  } ;
  
  union {
    __IOM uint32_t DSR4L;                       /*!< (@ 0x000001B0) DESTINATION SCATTER REGISTER LOW                           */
    
    struct {
      __IOM uint32_t DSI        : 20;           /*!< [19..0] Destination Scatter Interval                                      */
      __IOM uint32_t DSC        : 12;           /*!< [31..20] Destination Scatter Count                                        */
    } DSR4L_b;
  } ;
  
  union {
    __IOM uint32_t DSR4H;                       /*!< (@ 0x000001B4) DESTINATION SCATTER REGISTER HIGH                          */
    
    struct {
      __IOM uint32_t DSI        : 5;            /*!< [4..0] Destination Scatter Circular Streaming Number                      */
            uint32_t            : 27;
    } DSR4H_b;
  } ;
  __IOM uint32_t  SAR5;                         /*!< (@ 0x000001B8) SOURCE ADDRESS REGISTER                                    */
  __IM  uint32_t  RESERVED20;
  __IOM uint32_t  DAR5;                         /*!< (@ 0x000001C0) DESTINATION ADDRESS REGISTER                               */
  __IM  uint32_t  RESERVED21;
  
  union {
    __IOM uint32_t LLP5;                        /*!< (@ 0x000001C8) LINKED LIST POINTER REGISTER                               */
    
    struct {
      __IOM uint32_t LMS        : 2;            /*!< [1..0] List Master Select                                                 */
      __IOM uint32_t LOC        : 30;           /*!< [31..2] Starting Address In Memory                                        */
    } LLP5_b;
  } ;
  __IM  uint32_t  RESERVED22;
  
  union {
    __IOM uint32_t CTRL5L;                      /*!< (@ 0x000001D0) CONTROL REGISTER LOW                                       */
    
    struct {
      __IOM uint32_t INTEN      : 1;            /*!< [0..0] Interrupt Enable Bit                                               */
      __IOM uint32_t DSTTRWIDTH : 3;            /*!< [3..1] Destination Transfer Width                                         */
      __IOM uint32_t SRCTRWIDTH : 3;            /*!< [6..4] Source Transfer Width                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment                                      */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment                                          */
      __IOM uint32_t DESTMSIZE  : 3;            /*!< [13..11] Destination Burst Transaction Length                             */
      __IOM uint32_t SRCMSIZE   : 3;            /*!< [16..14] Source Burst Transaction Length                                  */
      __IOM uint32_t SRCGATHEREN : 1;           /*!< [17..17] Source gather enable bit                                         */
      __IOM uint32_t DSTSCATTEREN : 1;          /*!< [18..18] Destination scatter enable bit                                   */
      __IOM uint32_t WRNPEN     : 1;            /*!< [19..19] OCP non-posted write enable bit                                  */
      __IOM uint32_t TTFC       : 3;            /*!< [22..20] Transfer Type and Flow Control                                   */
            uint32_t            : 4;
      __IOM uint32_t LLPDSTEN   : 1;            /*!< [27..27] Block chanining is enabled on the destination side
                                                     only                                                                      */
      __IOM uint32_t LLPSRCEN   : 1;            /*!< [28..28] Block chanining is enabled on the source side only               */
            uint32_t            : 3;
    } CTRL5L_b;
  } ;
  
  union {
    __IOM uint32_t CTRL5H;                      /*!< (@ 0x000001D4) CONTROL REGISTER HIGH                                      */
    
    struct {
      __IOM uint32_t BLOCKTS    : 32;           /*!< [31..0] Block Transfer Size                                               */
    } CTRL5H_b;
  } ;
  __IM  uint32_t  RESERVED23[8];
  
  union {
    __IOM uint32_t CFG5L;                       /*!< (@ 0x000001F8) CONFIGURATION REGISTER LOW                                 */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive                               */
      __IM  uint32_t SRCPCTLOVER : 1;           /*!< [1..1] DMA Source bus protocol finish, indicating the current
                                                     read command has finished                                                 */
      __IM  uint32_t DSTPCTLOVER : 1;           /*!< [2..2] DMA destination bus protocol finish, indicating the current
                                                     read command has finished                                                 */
            uint32_t            : 1;
      __IOM uint32_t CHPRIOR    : 4;            /*!< [7..4] Channel priority                                                   */
      __IOM uint32_t CHSUSP     : 1;            /*!< [8..8] Channel Suspend                                                    */
      __IM  uint32_t FIFOEMPTY  : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO                */
      __IOM uint32_t HSSELDST   : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select              */
      __IOM uint32_t HSSELSRC   : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select                   */
            uint32_t            : 6;
      __IOM uint32_t DSTHSPOL   : 1;            /*!< [18..18] Destination Handshaking Interface Polarity                       */
      __IOM uint32_t SRCHSPOL   : 1;            /*!< [19..19] Source Handshaking Interface Polarity                            */
      __IOM uint32_t MAXABRST   : 10;           /*!< [29..20] Maximum AXI Burst Length                                         */
      __IOM uint32_t RELOADSRC  : 1;            /*!< [30..30] Automatic Source Reload                                          */
      __IOM uint32_t RELOADDST  : 1;            /*!< [31..31] Automatic Destination Reload                                     */
    } CFG5L_b;
  } ;
  
  union {
    __IOM uint32_t CFG5H;                       /*!< (@ 0x000001FC) CONFIGURATION REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode                                                  */
      __IOM uint32_t FIFOMODE   : 1;            /*!< [1..1] FIFO Mode Select                                                   */
            uint32_t            : 1;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control                                                 */
            uint32_t            : 3;
      __IOM uint32_t SRCPER     : 4;            /*!< [10..7] Assigns a Hardware Handshaking Interface to The Source
                                                     of Channel                                                                */
      __IOM uint32_t DSTPER     : 4;            /*!< [14..11] Assigns a Hardware Handshaking Interface to The Destination
                                                     of Channel                                                                */
      __IOM uint32_t EXTSRCPER1 : 1;            /*!< [15..15] The extened 4th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER1 : 1;            /*!< [16..16] The extened 4th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER2 : 1;            /*!< [17..17] The extened 5th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER2 : 1;            /*!< [18..18] The extened 5th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER3 : 1;            /*!< [19..19] The extened 6th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER3 : 1;            /*!< [20..20] The extened 6th bit of DSTPER                                    */
            uint32_t            : 11;
    } CFG5H_b;
  } ;
  
  union {
    __IOM uint32_t SGR5L;                       /*!< (@ 0x00000200) SOURCE GATHER REGISTER LOW                                 */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source Gather Interval                                            */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source Gather Count                                              */
    } SGR5L_b;
  } ;
  
  union {
    __IOM uint32_t SGR5H;                       /*!< (@ 0x00000204) SOURCE GATHER REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source Gather Circular Streaming Number                           */
      __IOM uint32_t BLKTS      : 16;           /*!< [31..16] Block Transfer Size                                              */
    } SGR5H_b;
  } ;
  
  union {
    __IOM uint32_t DSR5L;                       /*!< (@ 0x00000208) DESTINATION SCATTER REGISTER LOW                           */
    
    struct {
      __IOM uint32_t DSI        : 20;           /*!< [19..0] Destination Scatter Interval                                      */
      __IOM uint32_t DSC        : 12;           /*!< [31..20] Destination Scatter Count                                        */
    } DSR5L_b;
  } ;
  
  union {
    __IOM uint32_t DSR5H;                       /*!< (@ 0x0000020C) DESTINATION SCATTER REGISTER HIGH                          */
    
    struct {
      __IOM uint32_t DSI        : 5;            /*!< [4..0] Destination Scatter Circular Streaming Number                      */
            uint32_t            : 27;
    } DSR5H_b;
  } ;
  __IOM uint32_t  SAR6;                         /*!< (@ 0x00000210) SOURCE ADDRESS REGISTER                                    */
  __IM  uint32_t  RESERVED24;
  __IOM uint32_t  DAR6;                         /*!< (@ 0x00000218) DESTINATION ADDRESS REGISTER                               */
  __IM  uint32_t  RESERVED25;
  
  union {
    __IOM uint32_t LLP6;                        /*!< (@ 0x00000220) LINKED LIST POINTER REGISTER                               */
    
    struct {
      __IOM uint32_t LMS        : 2;            /*!< [1..0] List Master Select                                                 */
      __IOM uint32_t LOC        : 30;           /*!< [31..2] Starting Address In Memory                                        */
    } LLP6_b;
  } ;
  __IM  uint32_t  RESERVED26;
  
  union {
    __IOM uint32_t CTRL6L;                      /*!< (@ 0x00000228) CONTROL REGISTER LOW                                       */
    
    struct {
      __IOM uint32_t INTEN      : 1;            /*!< [0..0] Interrupt Enable Bit                                               */
      __IOM uint32_t DSTTRWIDTH : 3;            /*!< [3..1] Destination Transfer Width                                         */
      __IOM uint32_t SRCTRWIDTH : 3;            /*!< [6..4] Source Transfer Width                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment                                      */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment                                          */
      __IOM uint32_t DESTMSIZE  : 3;            /*!< [13..11] Destination Burst Transaction Length                             */
      __IOM uint32_t SRCMSIZE   : 3;            /*!< [16..14] Source Burst Transaction Length                                  */
      __IOM uint32_t SRCGATHEREN : 1;           /*!< [17..17] Source gather enable bit                                         */
      __IOM uint32_t DSTSCATTEREN : 1;          /*!< [18..18] Destination scatter enable bit                                   */
      __IOM uint32_t WRNPEN     : 1;            /*!< [19..19] OCP non-posted write enable bit                                  */
      __IOM uint32_t TTFC       : 3;            /*!< [22..20] Transfer Type and Flow Control                                   */
            uint32_t            : 4;
      __IOM uint32_t LLPDSTEN   : 1;            /*!< [27..27] Block chanining is enabled on the destination side
                                                     only                                                                      */
      __IOM uint32_t LLPSRCEN   : 1;            /*!< [28..28] Block chanining is enabled on the source side only               */
            uint32_t            : 3;
    } CTRL6L_b;
  } ;
  
  union {
    __IOM uint32_t CTRL6H;                      /*!< (@ 0x0000022C) CONTROL REGISTER HIGH                                      */
    
    struct {
      __IOM uint32_t BLOCKTS    : 32;           /*!< [31..0] Block Transfer Size                                               */
    } CTRL6H_b;
  } ;
  __IM  uint32_t  RESERVED27[8];
  
  union {
    __IOM uint32_t CFG6L;                       /*!< (@ 0x00000250) CONFIGURATION REGISTER LOW                                 */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive                               */
      __IM  uint32_t SRCPCTLOVER : 1;           /*!< [1..1] DMA Source bus protocol finish, indicating the current
                                                     read command has finished                                                 */
      __IM  uint32_t DSTPCTLOVER : 1;           /*!< [2..2] DMA destination bus protocol finish, indicating the current
                                                     read command has finished                                                 */
            uint32_t            : 1;
      __IOM uint32_t CHPRIOR    : 4;            /*!< [7..4] Channel priority                                                   */
      __IOM uint32_t CHSUSP     : 1;            /*!< [8..8] Channel Suspend                                                    */
      __IM  uint32_t FIFOEMPTY  : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO                */
      __IOM uint32_t HSSELDST   : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select              */
      __IOM uint32_t HSSELSRC   : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select                   */
            uint32_t            : 6;
      __IOM uint32_t DSTHSPOL   : 1;            /*!< [18..18] Destination Handshaking Interface Polarity                       */
      __IOM uint32_t SRCHSPOL   : 1;            /*!< [19..19] Source Handshaking Interface Polarity                            */
      __IOM uint32_t MAXABRST   : 10;           /*!< [29..20] Maximum AXI Burst Length                                         */
      __IOM uint32_t RELOADSRC  : 1;            /*!< [30..30] Automatic Source Reload                                          */
      __IOM uint32_t RELOADDST  : 1;            /*!< [31..31] Automatic Destination Reload                                     */
    } CFG6L_b;
  } ;
  
  union {
    __IOM uint32_t CFG6H;                       /*!< (@ 0x00000254) CONFIGURATION REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode                                                  */
      __IOM uint32_t FIFOMODE   : 1;            /*!< [1..1] FIFO Mode Select                                                   */
            uint32_t            : 1;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control                                                 */
            uint32_t            : 3;
      __IOM uint32_t SRCPER     : 4;            /*!< [10..7] Assigns a Hardware Handshaking Interface to The Source
                                                     of Channel                                                                */
      __IOM uint32_t DSTPER     : 4;            /*!< [14..11] Assigns a Hardware Handshaking Interface to The Destination
                                                     of Channel                                                                */
      __IOM uint32_t EXTSRCPER1 : 1;            /*!< [15..15] The extened 4th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER1 : 1;            /*!< [16..16] The extened 4th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER2 : 1;            /*!< [17..17] The extened 5th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER2 : 1;            /*!< [18..18] The extened 5th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER3 : 1;            /*!< [19..19] The extened 6th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER3 : 1;            /*!< [20..20] The extened 6th bit of DSTPER                                    */
            uint32_t            : 11;
    } CFG6H_b;
  } ;
  
  union {
    __IOM uint32_t SGR6L;                       /*!< (@ 0x00000258) SOURCE GATHER REGISTER LOW                                 */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source Gather Interval                                            */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source Gather Count                                              */
    } SGR6L_b;
  } ;
  
  union {
    __IOM uint32_t SGR6H;                       /*!< (@ 0x0000025C) SOURCE GATHER REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source Gather Circular Streaming Number                           */
      __IOM uint32_t BLKTS      : 16;           /*!< [31..16] Block Transfer Size                                              */
    } SGR6H_b;
  } ;
  
  union {
    __IOM uint32_t DSR6L;                       /*!< (@ 0x00000260) DESTINATION SCATTER REGISTER LOW                           */
    
    struct {
      __IOM uint32_t DSI        : 20;           /*!< [19..0] Destination Scatter Interval                                      */
      __IOM uint32_t DSC        : 12;           /*!< [31..20] Destination Scatter Count                                        */
    } DSR6L_b;
  } ;
  
  union {
    __IOM uint32_t DSR6H;                       /*!< (@ 0x00000264) DESTINATION SCATTER REGISTER HIGH                          */
    
    struct {
      __IOM uint32_t DSI        : 5;            /*!< [4..0] Destination Scatter Circular Streaming Number                      */
            uint32_t            : 27;
    } DSR6H_b;
  } ;
  __IOM uint32_t  SAR7;                         /*!< (@ 0x00000268) SOURCE ADDRESS REGISTER                                    */
  __IM  uint32_t  RESERVED28;
  __IOM uint32_t  DAR7;                         /*!< (@ 0x00000270) DESTINATION ADDRESS REGISTER                               */
  __IM  uint32_t  RESERVED29;
  
  union {
    __IOM uint32_t LLP7;                        /*!< (@ 0x00000278) LINKED LIST POINTER REGISTER                               */
    
    struct {
      __IOM uint32_t LMS        : 2;            /*!< [1..0] List Master Select                                                 */
      __IOM uint32_t LOC        : 30;           /*!< [31..2] Starting Address In Memory                                        */
    } LLP7_b;
  } ;
  __IM  uint32_t  RESERVED30;
  
  union {
    __IOM uint32_t CTRL7L;                      /*!< (@ 0x00000280) CONTROL REGISTER LOW                                       */
    
    struct {
      __IOM uint32_t INTEN      : 1;            /*!< [0..0] Interrupt Enable Bit                                               */
      __IOM uint32_t DSTTRWIDTH : 3;            /*!< [3..1] Destination Transfer Width                                         */
      __IOM uint32_t SRCTRWIDTH : 3;            /*!< [6..4] Source Transfer Width                                              */
      __IOM uint32_t DINC       : 2;            /*!< [8..7] Destination Address Increment                                      */
      __IOM uint32_t SINC       : 2;            /*!< [10..9] Source Address Increment                                          */
      __IOM uint32_t DESTMSIZE  : 3;            /*!< [13..11] Destination Burst Transaction Length                             */
      __IOM uint32_t SRCMSIZE   : 3;            /*!< [16..14] Source Burst Transaction Length                                  */
      __IOM uint32_t SRCGATHEREN : 1;           /*!< [17..17] Source gather enable bit                                         */
      __IOM uint32_t DSTSCATTEREN : 1;          /*!< [18..18] Destination scatter enable bit                                   */
      __IOM uint32_t WRNPEN     : 1;            /*!< [19..19] OCP non-posted write enable bit                                  */
      __IOM uint32_t TTFC       : 3;            /*!< [22..20] Transfer Type and Flow Control                                   */
            uint32_t            : 4;
      __IOM uint32_t LLPDSTEN   : 1;            /*!< [27..27] Block chanining is enabled on the destination side
                                                     only                                                                      */
      __IOM uint32_t LLPSRCEN   : 1;            /*!< [28..28] Block chanining is enabled on the source side only               */
            uint32_t            : 3;
    } CTRL7L_b;
  } ;
  
  union {
    __IOM uint32_t CTRL7H;                      /*!< (@ 0x00000284) CONTROL REGISTER HIGH                                      */
    
    struct {
      __IOM uint32_t BLOCKTS    : 32;           /*!< [31..0] Block Transfer Size                                               */
    } CTRL7H_b;
  } ;
  __IM  uint32_t  RESERVED31[8];
  
  union {
    __IOM uint32_t CFG7L;                       /*!< (@ 0x000002A8) CONFIGURATION REGISTER LOW                                 */
    
    struct {
      __IM  uint32_t INACTIVE   : 1;            /*!< [0..0] Indicates if the channel is inactive                               */
      __IM  uint32_t SRCPCTLOVER : 1;           /*!< [1..1] DMA Source bus protocol finish, indicating the current
                                                     read command has finished                                                 */
      __IM  uint32_t DSTPCTLOVER : 1;           /*!< [2..2] DMA destination bus protocol finish, indicating the current
                                                     read command has finished                                                 */
            uint32_t            : 1;
      __IOM uint32_t CHPRIOR    : 4;            /*!< [7..4] Channel priority                                                   */
      __IOM uint32_t CHSUSP     : 1;            /*!< [8..8] Channel Suspend                                                    */
      __IM  uint32_t FIFOEMPTY  : 1;            /*!< [9..9] Indicates if there is data left in the channel FIFO                */
      __IOM uint32_t HSSELDST   : 1;            /*!< [10..10] Destination Software or Hardware Handshaking Select              */
      __IOM uint32_t HSSELSRC   : 1;            /*!< [11..11] Source Software or Hardware Handshaking Select                   */
            uint32_t            : 6;
      __IOM uint32_t DSTHSPOL   : 1;            /*!< [18..18] Destination Handshaking Interface Polarity                       */
      __IOM uint32_t SRCHSPOL   : 1;            /*!< [19..19] Source Handshaking Interface Polarity                            */
      __IOM uint32_t MAXABRST   : 10;           /*!< [29..20] Maximum AXI Burst Length                                         */
      __IOM uint32_t RELOADSRC  : 1;            /*!< [30..30] Automatic Source Reload                                          */
      __IOM uint32_t RELOADDST  : 1;            /*!< [31..31] Automatic Destination Reload                                     */
    } CFG7L_b;
  } ;
  
  union {
    __IOM uint32_t CFG7H;                       /*!< (@ 0x000002AC) CONFIGURATION REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t FCMODE     : 1;            /*!< [0..0] Flow Control Mode                                                  */
      __IOM uint32_t FIFOMODE   : 1;            /*!< [1..1] FIFO Mode Select                                                   */
            uint32_t            : 1;
      __IOM uint32_t PROTCTL    : 1;            /*!< [3..3] Protection Control                                                 */
            uint32_t            : 3;
      __IOM uint32_t SRCPER     : 4;            /*!< [10..7] Assigns a Hardware Handshaking Interface to The Source
                                                     of Channel                                                                */
      __IOM uint32_t DSTPER     : 4;            /*!< [14..11] Assigns a Hardware Handshaking Interface to The Destination
                                                     of Channel                                                                */
      __IOM uint32_t EXTSRCPER1 : 1;            /*!< [15..15] The extened 4th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER1 : 1;            /*!< [16..16] The extened 4th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER2 : 1;            /*!< [17..17] The extened 5th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER2 : 1;            /*!< [18..18] The extened 5th bit of DSTPER                                    */
      __IOM uint32_t EXTSRCPER3 : 1;            /*!< [19..19] The extened 6th bit of SRCPER                                    */
      __IOM uint32_t EXTDSTPER3 : 1;            /*!< [20..20] The extened 6th bit of DSTPER                                    */
            uint32_t            : 11;
    } CFG7H_b;
  } ;
  
  union {
    __IOM uint32_t SGR7L;                       /*!< (@ 0x000002B0) SOURCE GATHER REGISTER LOW                                 */
    
    struct {
      __IOM uint32_t SGI        : 20;           /*!< [19..0] Source Gather Interval                                            */
      __IOM uint32_t SGC        : 12;           /*!< [31..20] Source Gather Count                                              */
    } SGR7L_b;
  } ;
  
  union {
    __IOM uint32_t SGR7H;                       /*!< (@ 0x000002B4) SOURCE GATHER REGISTER HIGH                                */
    
    struct {
      __IOM uint32_t SGSN       : 16;           /*!< [15..0] Source Gather Circular Streaming Number                           */
      __IOM uint32_t BLKTS      : 16;           /*!< [31..16] Block Transfer Size                                              */
    } SGR7H_b;
  } ;
  
  union {
    __IOM uint32_t DSR7L;                       /*!< (@ 0x000002B8) DESTINATION SCATTER REGISTER LOW                           */
    
    struct {
      __IOM uint32_t DSI        : 20;           /*!< [19..0] Destination Scatter Interval                                      */
      __IOM uint32_t DSC        : 12;           /*!< [31..20] Destination Scatter Count                                        */
    } DSR7L_b;
  } ;
  
  union {
    __IOM uint32_t DSR7H;                       /*!< (@ 0x000002BC) DESTINATION SCATTER REGISTER HIGH                          */
    
    struct {
      __IOM uint32_t DSI        : 5;            /*!< [4..0] Destination Scatter Circular Streaming Number                      */
            uint32_t            : 27;
    } DSR7H_b;
  } ;
  __IOM uint32_t  RAWTFR;                       /*!< (@ 0x000002C0) RAW STATUS FOR INTTFR INTERRUPT REGISTER                   */
  __IM  uint32_t  RESERVED32;
  __IOM uint32_t  RAWBLOCK;                     /*!< (@ 0x000002C8) RAW STATUS FOR INTBLOCK REGISTER                           */
  __IM  uint32_t  RESERVED33;
  __IOM uint32_t  RAWSRCTRAN;                   /*!< (@ 0x000002D0) RAW STATUS FOR INTSRCTRAN INTERRUPT REGISTER               */
  __IM  uint32_t  RESERVED34;
  __IOM uint32_t  RAWDSTTRAN;                   /*!< (@ 0x000002D8) RAW STATUS FOR INTDSTTRAN INTERRUPT REGISTER               */
  __IM  uint32_t  RESERVED35;
  __IOM uint32_t  RAWERR;                       /*!< (@ 0x000002E0) RAW STATUS FOR INTERR INTERRUPT REGISTER                   */
  __IM  uint32_t  RESERVED36;
  __IOM uint32_t  STSTFR;                       /*!< (@ 0x000002E8) INTERRUPT STATUS FOR INTTFR INTERRUPT REGISTER             */
  __IM  uint32_t  RESERVED37;
  __IOM uint32_t  STSBLOCK;                     /*!< (@ 0x000002F0) INTERRUPT STATUS FOR INTBLOCK REGISTER                     */
  __IM  uint32_t  RESERVED38;
  __IOM uint32_t  STSSRCTRAN;                   /*!< (@ 0x000002F8) INTERRUPT STATUS FOR INTSRCTRAN INTERRUPT REGISTER         */
  __IM  uint32_t  RESERVED39;
  __IOM uint32_t  STSDSTTRAN;                   /*!< (@ 0x00000300) INTERRUPT STATUS FOR INTDSTTRAN INTERRUPT REGISTER         */
  __IM  uint32_t  RESERVED40;
  __IOM uint32_t  STSERR;                       /*!< (@ 0x00000308) INTERRUPT STATUS FOR INTERR INTERRUPT REGISTER             */
  __IM  uint32_t  RESERVED41;
  __IOM uint32_t  MSKTFRL;                      /*!< (@ 0x00000310) MASK FOR INTTFR INTERRUPT REGISTER LOW                     */
  __IOM uint32_t  MSKTFRH;                      /*!< (@ 0x00000314) MASK FOR INTTFR INTERRUPT REGISTER HIGH                    */
  __IOM uint32_t  MSKBLOCKL;                    /*!< (@ 0x00000318) MASK FOR INTBLOCK REGISTER LOW                             */
  __IOM uint32_t  MSKBLOCKH;                    /*!< (@ 0x0000031C) MASK FOR INTBLOCK REGISTER HIGH                            */
  __IOM uint32_t  MSKSRCTRANL;                  /*!< (@ 0x00000320) MASK FOR INTSRCTRAN INTERRUPT REGISTER LOW                 */
  __IOM uint32_t  MSKSRCTRANH;                  /*!< (@ 0x00000324) MASK FOR INTSRCTRAN INTERRUPT REGISTER HIGH                */
  __IOM uint32_t  MSKDSTTRANL;                  /*!< (@ 0x00000328) MASK FOR INTDSTTRAN INTERRUPT REGISTER LOW                 */
  __IOM uint32_t  MSKDSTTRANH;                  /*!< (@ 0x0000032C) MASK FOR INTDSTTRAN INTERRUPT REGISTER HIGH                */
  __IOM uint32_t  MSKERRL;                      /*!< (@ 0x00000330) MASK FOR INTERR INTERRUPT REGISTER LOW                     */
  __IOM uint32_t  MSKERRH;                      /*!< (@ 0x00000334) MASK FOR INTERR INTERRUPT REGISTER HIGH                    */
  __IOM uint32_t  CLRTFR;                       /*!< (@ 0x00000338) CLEAR INTERRUPT STATUS FOR INTTFR INTERRUPT REGISTER       */
  __IM  uint32_t  RESERVED42;
  __IOM uint32_t  CLRBLOCK;                     /*!< (@ 0x00000340) CLEAR INTERRUPT STATUS FOR INTBLOCK REGISTER               */
  __IM  uint32_t  RESERVED43;
  __IOM uint32_t  CLRSRCTRAN;                   /*!< (@ 0x00000348) CLEAR INTERRUPT STATUS FOR INTSRCTRAN INTERRUPT
                                                                    REGISTER                                                   */
  __IM  uint32_t  RESERVED44;
  __IOM uint32_t  CLRDSTTRAN;                   /*!< (@ 0x00000350) CLEAR INTERRUPT STATUS FOR INTDSTTRAN INTERRUPT
                                                                    REGISTER                                                   */
  __IM  uint32_t  RESERVED45;
  __IOM uint32_t  CLRERR;                       /*!< (@ 0x00000358) CLEAR INTERRUPT STATUS FOR INTERR INTERRUPT REGISTER       */
  __IM  uint32_t  RESERVED46;
  
  union {
    __IM  uint32_t INTSTS;                      /*!< (@ 0x00000360) COMBINED INTERRUPT SATAUS REGISTER                         */
    
    struct {
      __IM  uint32_t TFR        : 1;            /*!< [0..0] OR of The Contents of StatusTfr Register                           */
      __IM  uint32_t BLOCK      : 1;            /*!< [1..1] OR of The Contents of StatusBlock Register                         */
      __IM  uint32_t SRCT       : 1;            /*!< [2..2] OR of The Contents of StatusSrcTran Register                       */
      __IM  uint32_t DSTT       : 1;            /*!< [3..3] OR of The Contents of StatusDst Register                           */
      __IM  uint32_t ERR        : 1;            /*!< [4..4] OR of The Contents of StatusErr Register                           */
            uint32_t            : 27;
    } INTSTS_b;
  } ;
  __IM  uint32_t  RESERVED47[13];
  
  union {
    __IOM uint32_t CONF;                        /*!< (@ 0x00000398) CONFIGURATION REGISTER                                     */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable DMA Controller                                              */
            uint32_t            : 31;
    } CONF_b;
  } ;
  __IM  uint32_t  RESERVED48;
  
  union {
    __IOM uint32_t CHEN;                        /*!< (@ 0x000003A0) CHANNEL ENABLE REGISTER                                    */
    
    struct {
      __IOM uint32_t CH0EN      : 1;            /*!< [0..0] Enables DMA Channel                                                */
      __IOM uint32_t CH1EN      : 1;            /*!< [1..1] Enables DMA Channel                                                */
      __IOM uint32_t CH2EN      : 1;            /*!< [2..2] Enables DMA Channel                                                */
      __IOM uint32_t CH3EN      : 1;            /*!< [3..3] Enables DMA Channel                                                */
      __IOM uint32_t CH4EN      : 1;            /*!< [4..4] Enables DMA Channel                                                */
      __IOM uint32_t CH5EN      : 1;            /*!< [5..5] Enables DMA Channel                                                */
      __IOM uint32_t CH6EN      : 1;            /*!< [6..6] Enables DMA Channel                                                */
      __IOM uint32_t CH7EN      : 1;            /*!< [7..7] Enables DMA Channel                                                */
            uint32_t            : 24;
    } CHEN_b;
  } ;
} DMA_Type;                                     /*!< Size = 932 (0x3a4)                                                        */



/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief WDT Controller (WDT)
  */

typedef struct {                                /*!< (@ 0x4000C000) WDT Structure                                              */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000000) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable WDT                                                         */
      __IOM uint32_t RSTEN      : 1;            /*!< [1..1] Enable WDT to Reset System                                         */
      __IOM uint32_t RELOAD     : 1;            /*!< [2..2] Reload WDT Counter                                                 */
      __IOM uint32_t CLRRSTFLAG : 1;            /*!< [3..3] Clear WDT reset flag                                               */
            uint32_t            : 28;
    } CTRL_b;
  } ;
  
  union {
    __IM  uint32_t STS;                         /*!< (@ 0x00000004) STATUS REGISTER                                            */
    
    struct {
      __IM  uint32_t RSTFLAG    : 1;            /*!< [0..0] Reset Flag                                                         */
            uint32_t            : 31;
    } STS_b;
  } ;
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000008) INITIAL COUNTER REGISTER                                   */
  __IOM uint32_t  DIV;                          /*!< (@ 0x0000000C) DIVIDER REGISTER                                           */
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000010) INTERRUPT ENABLE REGISTER                                  */
    
    struct {
      __IOM uint32_t WDTINTEN   : 1;            /*!< [0..0] Enable WDT Interrupt                                               */
            uint32_t            : 31;
    } INTEN_b;
  } ;
} WDT_Type;                                     /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                          PWRBTN                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Power Button Over WDT Controller (PWRBTN)
  */

typedef struct {                                /*!< (@ 0x4000C028) PWRBTN Structure                                           */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000000) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable WDT                                                         */
      __IOM uint32_t RSTEN      : 1;            /*!< [1..1] Enable WDT to Reset System                                         */
      __IOM uint32_t RELOAD     : 1;            /*!< [2..2] Reload WDT Counter                                                 */
      __IOM uint32_t CLRRSTFLAG : 1;            /*!< [3..3] Clear WDT reset flag                                               */
            uint32_t            : 28;
    } CTRL_b;
  } ;
  
  union {
    __IM  uint32_t STS;                         /*!< (@ 0x00000004) STATUS REGISTER                                            */
    
    struct {
      __IM  uint32_t RSTFLAG    : 1;            /*!< [0..0] Reset Flag                                                         */
            uint32_t            : 31;
    } STS_b;
  } ;
  
  union {
    __IOM uint32_t CNT;                         /*!< (@ 0x00000008) INITIAL COUNTER REGISTER                                   */
    
    struct {
      __IOM uint32_t CNT        : 8;            /*!< [7..0] Counter value                                                      */
            uint32_t            : 24;
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t DIV;                         /*!< (@ 0x0000000C) DIVIDER REGISTER                                           */
    
    struct {
      __IOM uint32_t DIV        : 16;           /*!< [15..0] Divider value                                                     */
            uint32_t            : 16;
    } DIV_b;
  } ;
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000010) INTERRUPT ENABLE REGISTER                                  */
    
    struct {
      __IOM uint32_t WDTINTEN   : 1;            /*!< [0..0] Enable WDT Interrupt                                               */
            uint32_t            : 31;
    } INTEN_b;
  } ;
  
  union {
    __IOM uint32_t CONF;                        /*!< (@ 0x00000014) PWRBTN CONTROL REGISTER                                    */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable Power Button Function                                       */
      __IOM uint32_t TRIGMD     : 1;            /*!< [1..1] Trigger Level Selection                                            */
      __IOM uint32_t RSTOUTPOL  : 1;            /*!< [2..2] Reset Output Polarity                                              */
            uint32_t            : 13;
      __IOM uint32_t RSTPULSEWIDTH : 16;        /*!< [31..16] Reset Output Pulse Width                                         */
    } CONF_b;
  } ;
} PWRBTN_Type;                                  /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief RTC Controller (RTC)
  */

typedef struct {                                /*!< (@ 0x4000C100) RTC Structure                                              */
  __IOM uint8_t   SEC;                          /*!< (@ 0x00000000) SECOND REGISTER                                            */
  __IOM uint8_t   SECALARM;                     /*!< (@ 0x00000001) SECOND ALARM REGISTER                                      */
  __IOM uint8_t   MIN;                          /*!< (@ 0x00000002) MINUTES REGISTER                                           */
  __IOM uint8_t   MINALARM;                     /*!< (@ 0x00000003) MINUTES ALARM REGISTER                                     */
  
  union {
    __IOM uint8_t HR;                           /*!< (@ 0x00000004) HOUR REGISTER                                              */
    
    struct {
      __IOM uint8_t VAL         : 6;            /*!< [5..0] Value of Hour                                                      */
            uint8_t             : 1;
      __IOM uint8_t AMPM        : 1;            /*!< [7..7] AM or PM Mode                                                      */
    } HR_b;
  } ;
  
  union {
    __IOM uint8_t HRALARM;                      /*!< (@ 0x00000005) HOUR ALARM REGISTER                                        */
    
    struct {
      __IOM uint8_t VAL         : 6;            /*!< [5..0] Value of Hour Alarm                                                */
            uint8_t             : 1;
      __IOM uint8_t AMPM        : 1;            /*!< [7..7] AM or PM Mode of Hour Alarm                                        */
    } HRALARM_b;
  } ;
  __IOM uint8_t   DAYWEEK;                      /*!< (@ 0x00000006) DAY OF WEEK REGISTER                                       */
  __IOM uint8_t   DAYMONTH;                     /*!< (@ 0x00000007) DAY OF MONTH REGISTER                                      */
  __IOM uint8_t   MONTH;                        /*!< (@ 0x00000008) MONTH REGISTER                                             */
  __IOM uint8_t   YEAR;                         /*!< (@ 0x00000009) YEAR REGISTER                                              */
  
  union {
    __IOM uint8_t CTRL0;                        /*!< (@ 0x0000000A) CONTROL REGISTER #0                                        */
    
    struct {
      __IOM uint8_t RATESEL     : 4;            /*!< [3..0] Periodic Interrupt Rate Select                                     */
      __IOM uint8_t DIVCTL      : 3;            /*!< [6..4] Divider Chain Control                                              */
      __IOM uint8_t UIP         : 1;            /*!< [7..7] Update In Progress                                                 */
    } CTRL0_b;
  } ;
  
  union {
    __IOM uint8_t CTRL1;                        /*!< (@ 0x0000000B) CONTROL REGISTER #1                                        */
    
    struct {
      __IOM uint8_t DLS         : 1;            /*!< [0..0] Daylight Saving Enable                                             */
      __IOM uint8_t HRMODE      : 1;            /*!< [1..1] Hour Mode Selection                                                */
      __IOM uint8_t DATEMODE    : 1;            /*!< [2..2] Date Mode Selection                                                */
            uint8_t             : 1;
      __IOM uint8_t UIE         : 1;            /*!< [4..4] Update Ended Interrupt Enable                                      */
      __IOM uint8_t AIE         : 1;            /*!< [5..5] Alarm Interrupt Enable                                             */
      __IOM uint8_t PIE         : 1;            /*!< [6..6] Periodic Interrupt Enable                                          */
      __IOM uint8_t SETMODE     : 1;            /*!< [7..7] Set Enable                                                         */
    } CTRL1_b;
  } ;
  
  union {
    __IOM uint8_t CTRL2;                        /*!< (@ 0x0000000C) CONTROL REGISTER #2                                        */
    
    struct {
            uint8_t             : 4;
      __IOM uint8_t UIF         : 1;            /*!< [4..4] Update Interrupt Flag                                              */
      __IOM uint8_t AIF         : 1;            /*!< [5..5] Alarm Interrupt Flag                                               */
      __IOM uint8_t PIF         : 1;            /*!< [6..6] Periodic Interrupt Flag                                            */
      __IOM uint8_t IRQF        : 1;            /*!< [7..7] Interrupt Flag                                                     */
    } CTRL2_b;
  } ;
  __IOM uint8_t   DAYWEEKALARM;                 /*!< (@ 0x0000000D) DAY OF WEEK ALARM REGISTER                                 */
  __IOM uint8_t   DAYMONTHALARM;                /*!< (@ 0x0000000E) DAY OF MONTH ALARM REGISTER                                */
  __IM  uint8_t   RESERVED;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t DLSFW;                       /*!< (@ 0x00000018) DAYLIGHT SAVINGS FORWARD REGISTER                          */
    
    struct {
      __IOM uint32_t DSTMONTH   : 8;            /*!< [7..0] Daylight Saving Forward Month                                      */
      __IOM uint32_t DSTDAYWEEK : 3;            /*!< [10..8] Daylight Saving Forward Day of Week                               */
            uint32_t            : 5;
      __IOM uint32_t DSTWEEK    : 3;            /*!< [18..16] Daylight Saving Forward Week                                     */
            uint32_t            : 5;
      __IOM uint32_t DSTHR      : 7;            /*!< [30..24] Daylight Saving Forward Hour                                     */
      __IOM uint32_t DSTAMPMSEL : 1;            /*!< [31..31] Daylight Saving Forward AM/PM                                    */
    } DLSFW_b;
  } ;
  
  union {
    __IOM uint32_t DLSBW;                       /*!< (@ 0x0000001C) DAYLIGHT SAVINGS BACKWARD REGISTER                         */
    
    struct {
      __IOM uint32_t DSTMONTH   : 8;            /*!< [7..0] Daylight Saving Backward Month                                     */
      __IOM uint32_t DSTDAYWEEK : 3;            /*!< [10..8] Daylight Saving Backward Day of Week                              */
            uint32_t            : 5;
      __IOM uint32_t DSTWEEK    : 3;            /*!< [18..16] Daylight Saving Backward Week                                    */
            uint32_t            : 5;
      __IOM uint32_t DSTHR      : 7;            /*!< [30..24] Daylight Saving Backward Hour                                    */
      __IOM uint32_t DSTAMPMSEL : 1;            /*!< [31..31] Daylight Saving Backward AM/PM                                   */
    } DLSBW_b;
  } ;
  __IOM uint8_t   WEEK;                         /*!< (@ 0x00000020) WEEK REGISTER                                              */
  __IM  uint8_t   RESERVED2;
  __IM  uint16_t  RESERVED3;
} RTC_Type;                                     /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                          SLWTMR0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief 32-bit SlowTimer Controller (SLWTMR0)
  */

typedef struct {                                /*!< (@ 0x4000C200) SLWTMR0 Structure                                          */
  __IOM uint32_t  LDCNT;                        /*!< (@ 0x00000000) LOAD COUNTER REGISTER                                      */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000004) CURRENT COUNTER REGISTER                                   */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000008) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable Timer Contoller                                             */
      __IOM uint32_t MDSEL      : 1;            /*!< [1..1] Timer Operating Mode Selection                                     */
      __IOM uint32_t INTEN      : 1;            /*!< [2..2] Enable Timer Interrupt                                             */
            uint32_t            : 29;
    } CTRL_b;
  } ;
  
  union {
    __IOM uint32_t INTSTS;                      /*!< (@ 0x0000000C) INTERRUPT STATUS REGISTER                                  */
    
    struct {
      __IOM uint32_t STS        : 1;            /*!< [0..0] Timer Interrupt Status                                             */
            uint32_t            : 31;
    } INTSTS_b;
  } ;
} SLWTMR_Type;                                  /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           TMR0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief 32-bit Timer Controller (TMR0)
  */

typedef struct {                                /*!< (@ 0x4000C300) TMR0 Structure                                             */
  __IOM uint32_t  LDCNT;                        /*!< (@ 0x00000000) LOAD COUNTER REGISTER                                      */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000004) CURRENT COUNTER REGISTER                                   */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000008) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable Timer Contoller                                             */
      __IOM uint32_t MDSEL      : 1;            /*!< [1..1] Timer Operating Mode Selection                                     */
      __IOM uint32_t INTMSK     : 1;            /*!< [2..2] Timer Interrupt Mask                                               */
            uint32_t            : 29;
    } CTRL_b;
  } ;
  __IM  uint32_t  INTCLR;                       /*!< (@ 0x0000000C) INTERRUPT CLEAR REGISTER                                   */
  
  union {
    __IM  uint32_t INTSTS;                      /*!< (@ 0x00000010) INTERRUPT STATUS REGISTER                                  */
    
    struct {
      __IM  uint32_t STS        : 1;            /*!< [0..0] Timer Interrupt Status                                             */
            uint32_t            : 31;
    } INTSTS_b;
  } ;
} TIMER32_Type;                                 /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                           RTMR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief RTOS Timer Controller (RTMR)
  */

typedef struct {                                /*!< (@ 0x4000C500) RTMR Structure                                             */
  __IOM uint32_t  LDCNT;                        /*!< (@ 0x00000000) LOAD COUNTER REGISTER                                      */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000004) CURRENT COUNTER REGISTER                                   */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000008) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable Timer Contoller                                             */
      __IOM uint32_t MDSEL      : 1;            /*!< [1..1] Timer Operating Mode Selection                                     */
      __IOM uint32_t INTEN      : 1;            /*!< [2..2] Enable Timer Interrupt                                             */
            uint32_t            : 29;
    } CTRL_b;
  } ;
  
  union {
    __IOM uint32_t INTSTS;                      /*!< (@ 0x0000000C) INTERRUPT STATUS REGISTER                                  */
    
    struct {
      __IOM uint32_t STS        : 1;            /*!< [0..0] Timer Interrupt Status                                             */
            uint32_t            : 31;
    } INTSTS_b;
  } ;
} RTOSTMR_Type;                                 /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           I2C0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief I2C Controller (I2C0)
  */

typedef struct {                                /*!< (@ 0x4000D000) I2C0 Structure                                             */
  
  union {
    __IOM uint32_t CON;                         /*!< (@ 0x00000000) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t MATSER     : 1;            /*!< [0..0] Enable/Disable Master Mode                                         */
      __IOM uint32_t SPEED      : 2;            /*!< [2..1] Speed Mode                                                         */
      __IOM uint32_t SLV10BIT   : 1;            /*!< [3..3] Slave Responds To 7-bit Or 10-bit Addresses                        */
      __IOM uint32_t MST10BIT   : 1;            /*!< [4..4] Master Is 7-bit Or 10-bit Addressing Mode                          */
      __IOM uint32_t RESTREN    : 1;            /*!< [5..5] Enable/Disable Master Restart                                      */
      __IOM uint32_t SLVDISABLE : 1;            /*!< [6..6] Enable/Disable Slave Mode                                          */
      __IOM uint32_t STPDET     : 1;            /*!< [7..7] How Slave Issues Stop Detection Interrupt                          */
      __IOM uint32_t TXEMPTYCTRL : 1;           /*!< [8..8] Controls the Generation Of The Tx Empty Interrupt                  */
      __IOM uint32_t RXFULLHLDC : 1;            /*!< [9..9] Hold the Bus When The Rx FIFO Is Full Or Not                       */
      __IOM uint32_t STPMSTACTIVE : 1;          /*!< [10..10] How I2c Controller Issues The Stop Detection Interrupt           */
      __IOM uint32_t BUSCLRCTRL : 1;            /*!< [11..11] Enables the Bus Clear Feature                                    */
            uint32_t            : 4;
      __IOM uint32_t OPSARCTRL  : 1;            /*!< [16..16] Enables the Usage of IC_OPTIONAL_SAR                             */
      __IOM uint32_t SMBSLVQUICKEN : 1;         /*!< [17..17] Receive Quick Command Or Not                                     */
      __IOM uint32_t SMBARPEN   : 1;            /*!< [18..18] Enabled ARP Control Or Not                                       */
      __IOM uint32_t SMBSLVADDREN : 1;          /*!< [19..19] SMBus Persistent Slave Address Control Is Enabled Or
                                                     Not                                                                       */
      __IOM uint32_t SMBSLVADDR2EN : 1;         /*!< [20..20] SMBus Persistent Slave Address(SAR2) Control Is Enabled
                                                     Or Not                                                                    */
      __IOM uint32_t SMBSLVADDR3EN : 1;         /*!< [21..21] SMBus Persistent Slave Address(SAR3) Control Is Enabled
                                                     Or Not                                                                    */
      __IOM uint32_t SMBSLVADDR4EN : 1;         /*!< [22..22] SMBus Persistent Slave address(SAR4) Control Is Enabled
                                                     Or Not                                                                    */
      __IOM uint32_t SMBSAR2ARPEN : 1;          /*!< [23..23] Enabled ARP Control Or Not                                       */
      __IOM uint32_t SMBSAR3ARPEN : 1;          /*!< [24..24] Enabled ARP Control Or Not                                       */
      __IOM uint32_t SMBSAR4ARPEN : 1;          /*!< [25..25] Enabled ARP Control Or Not                                       */
            uint32_t            : 6;
    } CON_b;
  } ;
  
  union {
    __IOM uint32_t TAR;                         /*!< (@ 0x00000004) TARGET ADDRESS REGISTER                                    */
    
    struct {
      __IOM uint32_t TAR        : 10;           /*!< [9..0] Target Address For Any Master Transaction                          */
      __IOM uint32_t GCORSTA    : 1;            /*!< [10..10] Indicates Whether A General Call Or Start Byte Command           */
      __IOM uint32_t SPECIAL    : 1;            /*!< [11..11] Indicates Whether Software Performs A Device-id Or
                                                     General Call Or Start Byte Command                                        */
      __IOM uint32_t MST10ADDR  : 1;            /*!< [12..12] Control Starts Transfers In 7-bit Or 10-bit Addressing
                                                     Mode                                                                      */
      __IOM uint32_t DEVICEID   : 1;            /*!< [13..13] Programming of DEVICE-ID Transmission                            */
            uint32_t            : 2;
      __IOM uint32_t SMBQUICKCMD : 1;           /*!< [16..16] Indicates Whether A Quick Command Is To Be Performed             */
            uint32_t            : 15;
    } TAR_b;
  } ;
  
  union {
    __IOM uint32_t SAR;                         /*!< (@ 0x00000008) SLAVE ADDRESS REGISTER                                     */
    
    struct {
      __IOM uint32_t SAR        : 10;           /*!< [9..0] Holds The Slave Address When The I2c Is Operating As
                                                     A Slave                                                                   */
            uint32_t            : 22;
    } SAR_b;
  } ;
  
  union {
    __IOM uint32_t HSMADDR;                     /*!< (@ 0x0000000C) HIGH SPEED MASTER MODE CODE ADDRESS REGISTER               */
    
    struct {
      __IOM uint32_t HSMAR      : 3;            /*!< [2..0] Holds The Value Of The I2C HS Mode Master Code                     */
            uint32_t            : 29;
    } HSMADDR_b;
  } ;
  
  union {
    __IOM uint32_t DATACMD;                     /*!< (@ 0x00000010) DATA BUFFER AND COMMAND REGISTER                           */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] The Data To Be Transmitted Or Received On The I2C Bus              */
      __OM  uint32_t CMD        : 1;            /*!< [8..8] Controls Whether A Read Or A Write Is Performed                    */
      __OM  uint32_t STOP       : 1;            /*!< [9..9] Controls Whether A Stop Is Issued After The Byte Is Sent
                                                     Or Received                                                               */
      __OM  uint32_t RESTART    : 1;            /*!< [10..10] Controls Whether a RESTART Is Issued Before The Byte
                                                     Is Sent Or Received                                                       */
      __IM  uint32_t FIRSTDATA  : 1;            /*!< [11..11] Indicates The First Data Byte Received After The Address
                                                     Phase                                                                     */
            uint32_t            : 20;
    } DATACMD_b;
  } ;
  
  union {
    union {
      __IOM uint32_t SCLHCNT;                   /*!< (@ 0x00000014) STANDARD SPEED I2C CLOCK SCL HIGH COUNT REGISTER           */
      
      struct {
        __IOM uint32_t HCNT     : 16;           /*!< [15..0] Sets the SCL Clock High-period Count For Standard Speed           */
              uint32_t          : 16;
      } SCLHCNT_b;
    } ;
    
    union {
      __IOM uint32_t UFMSCLHCNT;                /*!< (@ 0x00000014) ULTRA-FAST SPEED I2C CLOCK SCL HIGH COUNT REGISTER         */
      
      struct {
        __IOM uint32_t UFMHCNT  : 16;           /*!< [15..0] Sets the SCL Clock High-period Count For Ultra-Fast
                                                     Speed                                                                     */
              uint32_t          : 16;
      } UFMSCLHCNT_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t SCLLCNT;                   /*!< (@ 0x00000018) STANDARD SPEED I2C CLOCK SCL LOW COUNT REGISTER            */
      
      struct {
        __IOM uint32_t LCNT     : 16;           /*!< [15..0] Sets the SCL Clock Low-period Count For Standard Speed            */
              uint32_t          : 16;
      } SCLLCNT_b;
    } ;
    
    union {
      __IOM uint32_t UFMSCLLCNT;                /*!< (@ 0x00000018) ULTRA-FAST I2C CLOCK SCL LOW COUNT REGISTER                */
      
      struct {
        __IOM uint32_t UFMLCNT  : 16;           /*!< [15..0] Sets the SCL Clock Low-period Count For Ultra-Fast Speed          */
              uint32_t          : 16;
      } UFMSCLLCNT_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t FSSCLHCNT;                 /*!< (@ 0x0000001C) FAST MODE SCL HIGH COUNT REGISTER                          */
      
      struct {
        __IOM uint32_t HCNT     : 16;           /*!< [15..0] Sets the SCL Clock High-period Count For Fast Speed               */
              uint32_t          : 16;
      } FSSCLHCNT_b;
    } ;
    
    union {
      __IOM uint32_t UFMTBUFCNT;                /*!< (@ 0x0000001C) ULTRA-FAST SPEED MODE TBUF IDLE COUNT REGISTER             */
      
      struct {
        __IOM uint32_t TBUFCNT  : 16;           /*!< [15..0] Sets the Bus-Free time between a STOP and STOP condition
                                                     count for Ultra-Fast speed                                                */
              uint32_t          : 16;
      } UFMTBUFCNT_b;
    } ;
  };
  
  union {
    __IOM uint32_t FSSCLLCNT;                   /*!< (@ 0x00000020) FAST MODE SCL LOW COUNT REGISTER                           */
    
    struct {
      __IOM uint32_t LCNT       : 16;           /*!< [15..0] Sets the SCL Clock Low-period Count For Fast Speed                */
            uint32_t            : 16;
    } FSSCLLCNT_b;
  } ;
  
  union {
    __IOM uint32_t HSSCLHCNT;                   /*!< (@ 0x00000024) HIGH SPEED SCL HIGH COUNT REGISTER                         */
    
    struct {
      __IOM uint32_t HCNT       : 16;           /*!< [15..0] Sets the SCL Clock High-period Count For High Speed               */
            uint32_t            : 16;
    } HSSCLHCNT_b;
  } ;
  
  union {
    __IOM uint32_t HSSCLLCNT;                   /*!< (@ 0x00000028) HIGH SPEED SCL LOW COUNT REGISTER                          */
    
    struct {
      __IOM uint32_t LCNT       : 16;           /*!< [15..0] Sets the SCL clock low-period count for high speed                */
            uint32_t            : 16;
    } HSSCLLCNT_b;
  } ;
  
  union {
    __IM  uint32_t INTSTAT;                     /*!< (@ 0x0000002C) I2C INTERRUPT STATUS REGISTER                              */
    
    struct {
      __IM  uint32_t RXUNDER    : 1;            /*!< [0..0] RX_UNDER Interrupt                                                 */
      __IM  uint32_t RXOVER     : 1;            /*!< [1..1] RX_OVER Interrupt                                                  */
      __IM  uint32_t RXFULL     : 1;            /*!< [2..2] RX_FULL Interrupt                                                  */
      __IM  uint32_t TXOVER     : 1;            /*!< [3..3] TX_OVER Interrupt                                                  */
      __IM  uint32_t TXEMPTY    : 1;            /*!< [4..4] TX_EMPTY Interrupt                                                 */
      __IM  uint32_t RDREQ      : 1;            /*!< [5..5] RD_REQ interrupt                                                   */
      __IM  uint32_t TXABRT     : 1;            /*!< [6..6] TX_ABRT Interrupt                                                  */
      __IM  uint32_t RXDONE     : 1;            /*!< [7..7] RX_DONE Interrupt                                                  */
      __IM  uint32_t ACTIVITY   : 1;            /*!< [8..8] ACTIVITY Interrupt                                                 */
      __IM  uint32_t STOPDET    : 1;            /*!< [9..9] STOP_DET Interrupt                                                 */
      __IM  uint32_t STARTDET   : 1;            /*!< [10..10] START_DET Interrupt                                              */
      __IM  uint32_t GENCALL    : 1;            /*!< [11..11] GEN_CALL Interrupt                                               */
      __IM  uint32_t RESTARTDET : 1;            /*!< [12..12] RESTART_DET Interrupt                                            */
      __IM  uint32_t MSTONHOLD  : 1;            /*!< [13..13] MASTER_ON_HOLD Interrupt                                         */
      __IM  uint32_t SCLSTUCKLOW : 1;           /*!< [14..14] SCL_STUCK_AT_LOW Interrupt                                       */
      __IM  uint32_t WRREQ      : 1;            /*!< [15..15] WR_REQ Interrupt                                                 */
      __IM  uint32_t SLVADDR1TAG : 1;           /*!< [16..16] SLV_ADDR1_TAG Interrupt                                          */
      __IM  uint32_t SLVADDR2TAG : 1;           /*!< [17..17] SLV_ADDR2_TAG Interrupt                                          */
      __IM  uint32_t SLVADDR3TAG : 1;           /*!< [18..18] SLV_ADDR3_TAG Interrupt                                          */
      __IM  uint32_t SLVADDR4TAG : 1;           /*!< [19..19] SLV_ADDR4_TAG Interrupt                                          */
            uint32_t            : 12;
    } INTSTAT_b;
  } ;
  
  union {
    __IOM uint32_t INTMASK;                     /*!< (@ 0x00000030) INTERRUPT MASK REGISTER                                    */
    
    struct {
      __IOM uint32_t RXUNDER    : 1;            /*!< [0..0] RX_UNDER Interrupt Mask                                            */
      __IOM uint32_t RXOVER     : 1;            /*!< [1..1] RX_OVER Interrupt Mask                                             */
      __IOM uint32_t RXFULL     : 1;            /*!< [2..2] RX_FULL Interrupt Mask                                             */
      __IOM uint32_t TXOVER     : 1;            /*!< [3..3] TX_OVER Interrupt Mask                                             */
      __IOM uint32_t TXEMPTY    : 1;            /*!< [4..4] TX_EMPTY Interrupt Mask                                            */
      __IOM uint32_t RDREQ      : 1;            /*!< [5..5] RD_REQ Interrupt Mask                                              */
      __IOM uint32_t TXABRT     : 1;            /*!< [6..6] TX_ABRT Interrupt Mask                                             */
      __IOM uint32_t RXDONE     : 1;            /*!< [7..7] RX_DONE Interrupt Mask                                             */
      __IOM uint32_t ACTIVITY   : 1;            /*!< [8..8] ACTIVITY Interrupt Mask                                            */
      __IOM uint32_t STOPDET    : 1;            /*!< [9..9] STOP_DET Interrupt Mask                                            */
      __IOM uint32_t STARTDET   : 1;            /*!< [10..10] START_DET Interrupt Mask                                         */
      __IOM uint32_t GENCALL    : 1;            /*!< [11..11] GEN_CALL Interrupt Mask                                          */
      __IOM uint32_t RESTARTDET : 1;            /*!< [12..12] RESTART_DET Interrupt Mask                                       */
      __IOM uint32_t MSTONHOLD  : 1;            /*!< [13..13] MASTER_ON_HOLD Interrupt Mask                                    */
      __IOM uint32_t SCLSTUCKLOW : 1;           /*!< [14..14] SCL_STUCK_AT_LOW Interrupt Mask                                  */
      __IOM uint32_t WRREQ      : 1;            /*!< [15..15] WR_REQ Interrupt Mask                                            */
      __IOM uint32_t SLVADDR1TAG : 1;           /*!< [16..16] SLV_ADDR1_TAG Interrupt Mask                                     */
      __IOM uint32_t SLVADDR2TAG : 1;           /*!< [17..17] SLV_ADDR2_TAG Interrupt Mask                                     */
      __IOM uint32_t SLVADDR3TAG : 1;           /*!< [18..18] SLV_ADDR3_TAG Interrupt Mask                                     */
      __IOM uint32_t SLVADDR4TAG : 1;           /*!< [19..19] SLV_ADDR4_TAG Interrupt Mask                                     */
            uint32_t            : 12;
    } INTMASK_b;
  } ;
  
  union {
    __IOM uint32_t RAWINTSTAT;                  /*!< (@ 0x00000034) INTERRUPT STATUS REGISTER                                  */
    
    struct {
      __IM  uint32_t RXUNDER    : 1;            /*!< [0..0] RX_UNDER Interrupt Status                                          */
      __IM  uint32_t RXOVER     : 1;            /*!< [1..1] RX_UNDER Interrupt Status                                          */
      __IM  uint32_t RXFULL     : 1;            /*!< [2..2] RX_UNDER Interrupt Status                                          */
      __IM  uint32_t TXOVER     : 1;            /*!< [3..3] TX_OVER Interrupt Status                                           */
      __IM  uint32_t TXEMPTY    : 1;            /*!< [4..4] TX_EMPTY Interrupt Status                                          */
      __IM  uint32_t RDREQ      : 1;            /*!< [5..5] RD_REQ Interrupt Status                                            */
      __IM  uint32_t TXABRT     : 1;            /*!< [6..6] TX_ABRT Interrupt Status                                           */
      __IM  uint32_t RXDONE     : 1;            /*!< [7..7] RX_DONE Interrupt Status                                           */
      __IM  uint32_t ACTIVITY   : 1;            /*!< [8..8] I2C Controller Activity                                            */
      __IM  uint32_t STOPDET    : 1;            /*!< [9..9] STOP_DET Interrupt Status                                          */
      __IM  uint32_t STARTDET   : 1;            /*!< [10..10] START_DET Interrupt Status                                       */
      __IM  uint32_t GENCALL    : 1;            /*!< [11..11] GEN_CALL Interrupt Status                                        */
      __IM  uint32_t RESTARTDET : 1;            /*!< [12..12] RESTART_DET Interrupt Status                                     */
      __IM  uint32_t MSTONHOLD  : 1;            /*!< [13..13] MASTER_ON_HOLD Interrupt Status                                  */
      __IM  uint32_t SCLSTUCKLOW : 1;           /*!< [14..14] SCL_STUCK_AT_LOW Interrupt Status                                */
      __IM  uint32_t WRREQ      : 1;            /*!< [15..15] WR_REQ Interrupt Status                                          */
      __IM  uint32_t SLVADDR1TAG : 1;           /*!< [16..16] SLV_ADDR1_TAG Interrupt Status                                   */
      __IM  uint32_t SLVADDR2TAG : 1;           /*!< [17..17] SLV_ADDR2_TAG Interrupt Status                                   */
      __IM  uint32_t SLVADDR3TAG : 1;           /*!< [18..18] SLV_ADDR3_TAG Interrupt Status                                   */
      __IM  uint32_t SLVADDR4TAG : 1;           /*!< [19..19] SLV_ADDR4_TAG Interrupt Status                                   */
            uint32_t            : 12;
    } RAWINTSTAT_b;
  } ;
  
  union {
    __IOM uint32_t RXTL;                        /*!< (@ 0x00000038) I2C RECEIVE FIFO THRESHOLD REGISTER                        */
    
    struct {
      __IOM uint32_t THRES      : 8;            /*!< [7..0] Receive FIFO Threshold Level                                       */
            uint32_t            : 24;
    } RXTL_b;
  } ;
  
  union {
    __IOM uint32_t TXTL;                        /*!< (@ 0x0000003C) I2C TRANSMIT FIFO THRESHOLD REGISTER                       */
    
    struct {
      __IOM uint32_t THRES      : 8;            /*!< [7..0] Transmit FIFO Threshold Level                                      */
            uint32_t            : 24;
    } TXTL_b;
  } ;
  __IM  uint32_t  CLRINT;                       /*!< (@ 0x00000040) CLEAR COMBINED AND INDIVIDUAL INTERRUPT REGISTER           */
  __IM  uint32_t  CLRRXUNDER;                   /*!< (@ 0x00000044) Clear RX_UNDER Interrupt                                   */
  __IM  uint32_t  CLRRXOVER;                    /*!< (@ 0x00000048) Clear RX_OVER Interrupt Register                           */
  __IM  uint32_t  CLRTXOVER;                    /*!< (@ 0x0000004C) Clear TX_OVER Interrupt Register                           */
  __IM  uint32_t  CLRRDREQ;                     /*!< (@ 0x00000050) Clear RD_REQ Interrupt Register                            */
  __IM  uint32_t  CLRTXABRT;                    /*!< (@ 0x00000054) Clear TX_ABRT Interrupt Register                           */
  __IM  uint32_t  CLRRXDONE;                    /*!< (@ 0x00000058) Clear RX_DONE Interrupt Register                           */
  __IM  uint32_t  CLRACTIVITY;                  /*!< (@ 0x0000005C) Clear ACTIVITY Interrupt Register                          */
  __IM  uint32_t  CLRSTOPDET;                   /*!< (@ 0x00000060) Clear STOP_DET Interrupt Register                          */
  __IM  uint32_t  CLRSTARTDET;                  /*!< (@ 0x00000064) Clear START_DET Interrupt Register                         */
  __IM  uint32_t  CLRGENCALL;                   /*!< (@ 0x00000068) Clear GEN_CALL Interrupt Register                          */
  
  union {
    __IOM uint32_t ENABLE;                      /*!< (@ 0x0000006C) ENABLE REGISTER                                            */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Controls Whether The I2C Controller Is Enabled                     */
      __IOM uint32_t ABORT      : 1;            /*!< [1..1] Initiates The Transfer Abort                                       */
      __IOM uint32_t TXCMDBLOCK : 1;            /*!< [2..2] Blocks The Transmission Of Data On I2c Bus Or Not                  */
      __IOM uint32_t SDARECOVEN : 1;            /*!< [3..3] Control Knob To Initiate The SDA Recovery Mechanism                */
            uint32_t            : 12;
      __IOM uint32_t SMBCLKRST  : 1;            /*!< [16..16] SMBus Master Clock Reset                                         */
      __IOM uint32_t SMBSUSPENDEN : 1;          /*!< [17..17] SMBSUS Suspend Mode                                              */
      __IOM uint32_t SMBALERTEN : 1;            /*!< [18..18] Control Assertion of SMBALERT Signal                             */
      __IOM uint32_t SAREN      : 1;            /*!< [19..19] Controls Whether the SAR is Enabled                              */
      __IOM uint32_t SAR2EN     : 1;            /*!< [20..20] Controls Whether the SAR2 is Enabled                             */
      __IOM uint32_t SAR3EN     : 1;            /*!< [21..21] Controls Whether the SAR3 is Enabled                             */
      __IOM uint32_t SAR4EN     : 1;            /*!< [22..22] Controls Whether the SAR4 is Enabled                             */
            uint32_t            : 9;
    } ENABLE_b;
  } ;
  
  union {
    __IM  uint32_t STATUS;                      /*!< (@ 0x00000070) I2C STATUS Register                                        */
    
    struct {
      __IM  uint32_t ACTIVITY   : 1;            /*!< [0..0] I2C Activity Status                                                */
      __IM  uint32_t TFNF       : 1;            /*!< [1..1] Transmit FIFO Not Full                                             */
      __IM  uint32_t TFE        : 1;            /*!< [2..2] Transmit FIFO Completely Empty                                     */
      __IM  uint32_t RFNE       : 1;            /*!< [3..3] Receive FIFO Not Empty                                             */
      __IM  uint32_t RFF        : 1;            /*!< [4..4] Receive FIFO Completely Full                                       */
      __IM  uint32_t MSTACTIVITY : 1;           /*!< [5..5] Master FSM Activity Status                                         */
      __IM  uint32_t SLVACTIVITY : 1;           /*!< [6..6] Slave FSM Activity Status                                          */
      __IM  uint32_t MSTHOLDTXEMPTY : 1;        /*!< [7..7] Indicates The Bus Hold When The Master Holds The Bus
                                                     Because Of The Tx FIFO Being Empty                                        */
      __IM  uint32_t MSTHOLDRXFULL : 1;         /*!< [8..8] INdicates The Bus Hold In Master Mode Due To Rx FIFO
                                                     Is Full And Additional Byte Has Been Received                             */
      __IM  uint32_t SLVHOLDTXEMPTY : 1;        /*!< [9..9] Indicates The Bus Hold In Slave Mode Due To Rx FIFO Is
                                                     Full And Additional Byte Has Been Received                                */
      __IM  uint32_t SLVHOLDRXFULL : 1;         /*!< [10..10] Indicates The Bus Hold In Slave Mode Due To Rx FIFO
                                                     Is Full And Additional Byte Has Been Received                             */
      __IM  uint32_t SDANOTRECOV : 1;           /*!< [11..11] Indicates That SDA Stuck At Low Is Not Recovered After
                                                     The Recovery Mechanism                                                    */
      __IM  uint32_t SLVSARDATACLKSTRETCH : 1;  /*!< [12..12] Indicates The Bus Hold (clock Stretching) In Slave
                                                     Mode With Multiple SAR Feature                                            */
            uint32_t            : 19;
    } STATUS_b;
  } ;
  __IOM uint32_t  TXFLR;                        /*!< (@ 0x00000074) I2C TRANSMIT FIFO LEVEL REGISTER                           */
  __IOM uint32_t  RXFLR;                        /*!< (@ 0x00000078) I2C RECEIVE FIFO LEVEL REGISTER                            */
  
  union {
    __IOM uint32_t SDAHOLD;                     /*!< (@ 0x0000007C) I2C SDA HOLD TIME LENGTH REGISTER                          */
    
    struct {
      __IOM uint32_t SDATXHOLD  : 16;           /*!< [15..0] Sets The Required SDA Hold Time In Units Of clk Period            */
      __IOM uint32_t SDARXHOLD  : 8;            /*!< [23..16] Sets the required SDA hold time in units of I2C clk
                                                     period                                                                    */
            uint32_t            : 8;
    } SDAHOLD_b;
  } ;
  
  union {
    __IOM uint32_t TXABRTSRC;                   /*!< (@ 0x00000080) I2C TRANSMIT ABORT SOURCE REGISTER                         */
    
    struct {
      __IM  uint32_t ADDR7BNACK : 1;            /*!< [0..0] Indicates That The Master Is In 7-bit Addressing Mode
                                                     And The Address Sent Was Not Acknowledged By Any Slave                    */
      __IM  uint32_t ADDR10BNACK1 : 1;          /*!< [1..1] Indicates That The Master Is In 10-bit Address Mode And
                                                     The First 10-bit Address Byte Was Not Acknowledged By Any
                                                     Slave                                                                     */
      __IM  uint32_t ADDR10BNACK2 : 1;          /*!< [2..2] Indicates That The Master Is In 10-bit Address Mode And
                                                     The Second 10-bit Address Byte Was Not Acknowledged By
                                                     Any Slave                                                                 */
      __IM  uint32_t TXDATANACK : 1;            /*!< [3..3] Indicates The Master-mode Only Bit. When Themaster Receives
                                                     An Acknowledgement For The Address                                        */
      __IM  uint32_t GCALLNACK  : 1;            /*!< [4..4] Indicates That I2C Controller In Master Mode Has Sent
                                                     A General Call And No Slave On The Bus Acknowledged The
                                                     General Call                                                              */
      __IM  uint32_t GCALLREAD  : 1;            /*!< [5..5] Indicates That Dw_apb_i2c In The Master Mode Has Sent
                                                     A General Call But The User Programmed The Byte Following
                                                     The General Call To Be A Read From The Bus                                */
      __IM  uint32_t HSACKDET   : 1;            /*!< [6..6] Indicates That The Master Is In High Speed Mode And The
                                                     High Speed Master Code Was Acknowledged                                   */
      __IM  uint32_t SBYTEACKET : 1;            /*!< [7..7] Indicates That The Master Has Sent A START Byte And The
                                                     START Byte Was Acknowledged                                               */
      __IM  uint32_t HSNORSTRT  : 1;            /*!< [8..8] Indicates That The Restart Is Disabled                             */
      __IM  uint32_t SBYTENORSTRT : 1;          /*!< [9..9] Indicates That The Restart Is Disabled                             */
      __IM  uint32_t ADDR10BRDNORSTRT : 1;      /*!< [10..10] Indicates That The Restart Is Disabled                           */
      __IM  uint32_t MASTERIDS  : 1;            /*!< [11..11] Indicates That The User Tries To Initiate A Master
                                                     Operation With The Master Mode Disabled                                   */
      __IM  uint32_t ARBLOST    : 1;            /*!< [12..12] This Field Specifies That The Master Has Lost Arbitration        */
      __IM  uint32_t SLVFLUSHTXFIFO : 1;        /*!< [13..13] This Field Specifies That The Slave Has Received A
                                                     Read Command And Some Data Exists In The TX FIFO                          */
      __IM  uint32_t SLVARBLOST : 1;            /*!< [14..14] This Field Indicates That A Slave Has Lost The Bus
                                                     While Transmitting Data To A Remote Master                                */
      __IM  uint32_t SLVRDINTX  : 1;            /*!< [15..15] When The Processor Side Responds To A Slave Mode Request
                                                     For Data To Be Transmitted To A Remote Master And User
                                                     Writes A 1 In Cmd (bit 8) Of Ic_data_cmd Register                         */
      __IM  uint32_t USRABRT    : 1;            /*!< [16..16] This Is A Master-mode-only Bit. Master Has Detected
                                                     The Transfer Abort                                                        */
      __IM  uint32_t SDASTUCKLOW : 1;           /*!< [17..17] This Is A Master-mode-only Bit. Master Detects The
                                                     SDA Stuck At Low                                                          */
      __IM  uint32_t DEVNACK    : 1;            /*!< [18..18] Master Is Initiating The DEVICE_ID Transfer And The
                                                     Device Id Sent Was Not Acknowledged By Any Slave                          */
      __IM  uint32_t DEVSLVADDRNACK : 1;        /*!< [19..19] Master Is Initiating The DEVICE_ID Transfer And The
                                                     Slave Address Sent Was Not Acknowledged By Any Slave                      */
      __IM  uint32_t DEVWRITE   : 1;            /*!< [20..20] Master Is Initiating The DEVICE_ID Transfer And The
                                                     Tx-FIFO Consists Of Write Commands                                        */
            uint32_t            : 2;
      __IM  uint32_t TXFLUSHCNT : 9;            /*!< [31..23] Indicates The Number Of Tx FIFO Data Commands Which
                                                     Are Flushed Due To TX_ABRT Interrupt                                      */
    } TXABRTSRC_b;
  } ;
  
  union {
    __IOM uint32_t SLVDATANACKONLY;             /*!< (@ 0x00000084) GENERATE SLAVE DATA NACK REGISTER                          */
    
    struct {
      __IOM uint32_t NACK       : 1;            /*!< [0..0] Generate Nack. This Nack Generation Only Occurs When
                                                     I2C Controller Is A Slave-receiver                                        */
            uint32_t            : 31;
    } SLVDATANACKONLY_b;
  } ;
  
  union {
    __IOM uint32_t DMACR;                       /*!< (@ 0x00000088) DMA CONTROL REGISTER                                       */
    
    struct {
      __IOM uint32_t RDMAE      : 1;            /*!< [0..0] Receive DMA Enable                                                 */
      __IOM uint32_t TDMAE      : 1;            /*!< [1..1] Transmit DMA Enable                                                */
            uint32_t            : 30;
    } DMACR_b;
  } ;
  __IOM uint32_t  DMATDLR;                      /*!< (@ 0x0000008C) DMA Transmit Data Level Register                           */
  __IOM uint32_t  DMARDLR;                      /*!< (@ 0x00000090) DMA RECEIVE DATA LEVEL REGISTER                            */
  
  union {
    __IOM uint32_t SDASETUP;                    /*!< (@ 0x00000094) I2C SDA SETUP REGISTER                                     */
    
    struct {
      __IOM uint32_t SETUP      : 8;            /*!< [7..0] SDA Setup (tSU:DAT)                                                */
            uint32_t            : 24;
    } SDASETUP_b;
  } ;
  
  union {
    __IOM uint32_t ACKGENCALL;                  /*!< (@ 0x00000098) I2C ACK GENERAL CALL REGISTER                              */
    
    struct {
      __IOM uint32_t ACK        : 1;            /*!< [0..0] ACK General Call                                                   */
            uint32_t            : 31;
    } ACKGENCALL_b;
  } ;
  
  union {
    __IM  uint32_t ENSTS;                       /*!< (@ 0x0000009C) I2C ENABLE STATUS REGISTER                                 */
    
    struct {
      __IM  uint32_t ENABLE     : 1;            /*!< [0..0] IC Enable Status                                                   */
      __IM  uint32_t SLVDISBUSY : 1;            /*!< [1..1] Slave Disabled While Busy (Transmit, Receive)                      */
      __IM  uint32_t SLVRXDATALOST : 1;         /*!< [2..2] Slave Received Data Lost                                           */
            uint32_t            : 29;
    } ENSTS_b;
  } ;
  
  union {
    __IOM uint32_t SPKLEN;                      /*!< (@ 0x000000A0) I2C SS, FS OR FM+ RO UFM SPIKE SUPPRESSION LIMIT           */
    
    struct {
      __IOM uint32_t LEN        : 8;            /*!< [7..0] Sets the Duration, Measured In Clk Cycle                           */
            uint32_t            : 24;
    } SPKLEN_b;
  } ;
  
  union {
    __IOM uint32_t HSSPKLEN;                    /*!< (@ 0x000000A4) I2C HS SPIKE SUPPRESSION LIMIT REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 8;            /*!< [7..0] Sets the duration, measured in clk cycle                           */
            uint32_t            : 24;
    } HSSPKLEN_b;
  } ;
  __IOM uint32_t  CLRRESTARTDET;                /*!< (@ 0x000000A8) CLEAR RESTART_DET INTERRUPT REGISTER                       */
  __IOM uint32_t  SCLLOWTO;                     /*!< (@ 0x000000AC) I2C SCL STUCK AT LOW TIMEOUT REGISTER                      */
  __IOM uint32_t  SDALOWTO;                     /*!< (@ 0x000000B0) I2C SDA STUCK AT LOW TIMEOUT REGISTER                      */
  __IOM uint32_t  CLRSCLSTUCKDET;               /*!< (@ 0x000000B4) CLEAR SCL STUCK AT LOW DETECT INTERRUPT REGISTER           */
  
  union {
    __IM  uint32_t DEVICEID;                    /*!< (@ 0x000000B8) I2C DEVICE-ID REGISTERS                                    */
    
    struct {
      __IM  uint32_t ID         : 24;           /*!< [23..0] Contains the Device-ID of the component                           */
            uint32_t            : 8;
    } DEVICEID_b;
  } ;
  __IOM uint32_t  SMBCLKLOWSEXT;                /*!< (@ 0x000000BC) SMBUS SLAVE CLOCK EXTEND TIMEOUT REGISTER                  */
  __IOM uint32_t  SMBCLKLOWMEXT;                /*!< (@ 0x000000C0) SMBUS MASTER CLOCK EXTEND TIMEOUT REGISTER                 */
  
  union {
    __IOM uint32_t SMBTHIGHMAXIDLECNT;          /*!< (@ 0x000000C4) SMBUS MASTER THIGH MAX BUS-IDLE COUNT REGISTER             */
    
    struct {
      __IOM uint32_t CNT        : 16;           /*!< [15..0] Set The Required Bus-idle Time Period                             */
            uint32_t            : 16;
    } SMBTHIGHMAXIDLECNT_b;
  } ;
  
  union {
    __IOM uint32_t SMBINTSTAT;                  /*!< (@ 0x000000C8) SMBUS INTERRUPT STATUS REGISTER                            */
    
    struct {
      __IM  uint32_t SLVCLKEXTTO : 1;           /*!< [0..0] See SMRAWINTSTAT For Detail                                        */
      __IM  uint32_t MSTCLKEXTTO : 1;           /*!< [1..1] See SMRAWINTSTAT For Detail                                        */
      __IM  uint32_t QUICKCMDDET : 1;           /*!< [2..2] See SMRAWINTSTAT for detail                                        */
      __IM  uint32_t HOSTNTFYMSTDET : 1;        /*!< [3..3] See SMRAWINTSTAT for detail                                        */
      __IM  uint32_t ARPPREPARECMDDET : 1;      /*!< [4..4] See SMRAWINTSTAT for detail                                        */
      __IM  uint32_t ARPRSTCMDDET : 1;          /*!< [5..5] See SMRAWINTSTAT for detail                                        */
      __IM  uint32_t ARPGETUDIDCMDDET : 1;      /*!< [6..6] See SMRAWINTSTAT for detail                                        */
      __IM  uint32_t ARPASSGNADDRCMDDET : 1;    /*!< [7..7] See SMRAWINTSTAT for detail                                        */
      __IM  uint32_t SLVRXPECNACK : 1;          /*!< [8..8] See SMRAWINTSTAT for detail                                        */
      __IM  uint32_t SMBSUSPENDDET : 1;         /*!< [9..9] See SMRAWINTSTAT for detail                                        */
      __IM  uint32_t SMBALERTDET : 1;           /*!< [10..10] See SMRAWINTSTAT for detail                                      */
            uint32_t            : 21;
    } SMBINTSTAT_b;
  } ;
  
  union {
    __IOM uint32_t SMBINTMASK;                  /*!< (@ 0x000000CC) SMBUS INTERRUPT MASK REGISTER                              */
    
    struct {
      __IOM uint32_t SLVCLKEXTTO : 1;           /*!< [0..0] See SMRAWINTSTAT for detail                                        */
      __IOM uint32_t MSTCLKEXTTO : 1;           /*!< [1..1] See SMRAWINTSTAT for detail                                        */
      __IOM uint32_t QUICKCMDDET : 1;           /*!< [2..2] See SMRAWINTSTAT for detail                                        */
      __IOM uint32_t HOSTNTFYMSTDET : 1;        /*!< [3..3] See SMRAWINTSTAT for detail                                        */
      __IOM uint32_t ARPPREPARECMDDET : 1;      /*!< [4..4] See SMRAWINTSTAT for detail                                        */
      __IOM uint32_t ARPRSTCMDDET : 1;          /*!< [5..5] See SMRAWINTSTAT for detail                                        */
      __IOM uint32_t ARPGETUDIDCMDDET : 1;      /*!< [6..6] See SMRAWINTSTAT for detail                                        */
      __IOM uint32_t ARPASSGNADDRCMDDET : 1;    /*!< [7..7] See SMRAWINTSTAT for detail                                        */
      __IOM uint32_t SLVRXPECNACK : 1;          /*!< [8..8] See SMRAWINTSTAT for detail                                        */
      __IOM uint32_t SMBSUSPENDDET : 1;         /*!< [9..9] See SMRAWINTSTAT for detail                                        */
      __IOM uint32_t SMBALERTDET : 1;           /*!< [10..10] See SMRAWINTSTAT for detail                                      */
            uint32_t            : 21;
    } SMBINTMASK_b;
  } ;
  
  union {
    __IM  uint32_t SMBRAWINTSTAT;               /*!< (@ 0x000000D0) SMBUS RAW INTERRUPT STATUS REGISTER                        */
    
    struct {
      __IM  uint32_t SLVCLKEXTTO : 1;           /*!< [0..0] Activeindicates Whether The Transaction From Slave                 */
      __IM  uint32_t MSTCLKEXTTO : 1;           /*!< [1..1] Indicates Whether The Transaction From Mater                       */
      __IM  uint32_t QUICKCMDDET : 1;           /*!< [2..2] Indicates Whether A Quick Command Has Been Received On
                                                     The SMBus Interface                                                       */
      __IM  uint32_t HOSTNTFYMSTDET : 1;        /*!< [3..3] Indicates Whether A Notify ARP Master ARP Command Has
                                                     Been Received                                                             */
      __IM  uint32_t ARPPREPARECMDDET : 1;      /*!< [4..4] Indicates Whether A Prepare To ARP Command Has Been Received       */
      __IM  uint32_t ARPRSTCMDDET : 1;          /*!< [5..5] Indicates Whether A General or Directed Reset ARP Command
                                                     Has Been Received                                                         */
      __IM  uint32_t ARPGETUDIDCMDDET : 1;      /*!< [6..6] Indicates Whether a Get UDID ARP Command Has Been Received         */
      __IM  uint32_t ARPASSGNADDRCMDDET : 1;    /*!< [7..7] Indicates Whether An Assign Address ARP Command Has Been
                                                     Received                                                                  */
      __IM  uint32_t SLVRXPECNACK : 1;          /*!< [8..8] Indicates whether a NACK has been sent due to PEC mismatch
                                                     while working as ARP slave                                                */
      __IM  uint32_t SMBSUSPENDDET : 1;         /*!< [9..9] Indicates whether a SMBSUS signal is driven low by the
                                                     Host                                                                      */
      __IM  uint32_t SMBALERTDET : 1;           /*!< [10..10] Indicates whether a SMBALERT signal is driven low by
                                                     the slave                                                                 */
            uint32_t            : 21;
    } SMBRAWINTSTAT_b;
  } ;
  __IOM uint32_t  CLRSMBINT;                    /*!< (@ 0x000000D4) CLEAR SMBUS INTERRUPT REGISTER                             */
  
  union {
    __IOM uint32_t OPSAR;                       /*!< (@ 0x000000D8) I2C OPTIONAL SLAVE ADDRESS REGISTER                        */
    
    struct {
      __IOM uint32_t SAR        : 7;            /*!< [6..0] Optional Slave Address For I2C Controller When Operating
                                                     As A Slave In SMBus Mode                                                  */
            uint32_t            : 25;
    } OPSAR_b;
  } ;
  __IOM uint32_t  SMBUDIDW0;                    /*!< (@ 0x000000DC) SMBUS ARP UDID WORD0 REGISTER                              */
  __IOM uint32_t  SMBUDIDW1;                    /*!< (@ 0x000000E0) SMBUS ARP UDID WORD1 REGISTER                              */
  __IOM uint32_t  SMBUDIDW2;                    /*!< (@ 0x000000E4) SMBUS ARP UDID WORD2 REGISTER                              */
  __IOM uint32_t  SMBUDIDW3;                    /*!< (@ 0x000000E8) SMBUS ARP UDID WORD3 REGISTER                              */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  REGTORST;                     /*!< (@ 0x000000F0) REGISTER TIMEOUT COUNTER RESET VALUE                       */
  __IOM uint32_t  COMPPARAM1;                   /*!< (@ 0x000000F4) COMPONENT PARAMETER REGISTER 1                             */
  __IOM uint32_t  COMPVER;                      /*!< (@ 0x000000F8) I2C COMPONENT VERSION REGISTER                             */
  __IOM uint32_t  COMPTYPE;                     /*!< (@ 0x000000FC) I2C COMPONENT TYPE REGISTER                                */
  
  union {
    __IOM uint32_t SAR2;                        /*!< (@ 0x00000100) I2C SLAVE ADDRESS REGISTER 2                               */
    
    struct {
      __IOM uint32_t SAR        : 10;           /*!< [9..0] Slave Address For I2C Controller When Operating As A
                                                     Slave In SMBus Mode                                                       */
            uint32_t            : 22;
    } SAR2_b;
  } ;
  
  union {
    __IOM uint32_t SAR3;                        /*!< (@ 0x00000104) I2C SLAVE ADDRESS REGISTER 3                               */
    
    struct {
      __IOM uint32_t SAR        : 10;           /*!< [9..0] Slave Address For I2C Controller When Operating As A
                                                     Slave In SMBus Mode                                                       */
            uint32_t            : 22;
    } SAR3_b;
  } ;
  
  union {
    __IOM uint32_t SAR4;                        /*!< (@ 0x00000108) I2C SLAVE ADDRESS REGISTER 4                               */
    
    struct {
      __IOM uint32_t SAR        : 10;           /*!< [9..0] Slave Address For I2C Controller When Operating As A
                                                     Slave In SMBus Mode                                                       */
            uint32_t            : 22;
    } SAR4_b;
  } ;
  __IM  uint32_t  RESERVED1[4];
  __IM  uint32_t  CLRWRREQ;                     /*!< (@ 0x0000011C) CLEAR WR_REQ INTERRUPT REGISTER                            */
  __IM  uint32_t  CLRSLVADDRTAG;                /*!< (@ 0x00000120) CLEAR CLR_SLV_ADDR_TAG INTERRUPT REGISTER                  */
  __IOM uint32_t  SAR2SMBUDIDW0;                /*!< (@ 0x00000124) SAR2 SMBUS ARP UDID WORD0 REGISTER                         */
  __IOM uint32_t  SAR2SMBUDIDW1;                /*!< (@ 0x00000128) SAR2 SMBUS ARP UDID WORD1 REGISTER                         */
  __IOM uint32_t  SAR2SMBUDIDW2;                /*!< (@ 0x0000012C) SAR2 SMBUS ARP UDID WORD2 REGISTER                         */
  __IOM uint32_t  SAR2SMBUDIDW3;                /*!< (@ 0x00000130) SAR2 SMBUS ARP UDID WORD3 REGISTER                         */
  __IOM uint32_t  SAR3SMBUDIDW0;                /*!< (@ 0x00000134) SAR3 SMBUS ARP UDID WORD0 REGISTER                         */
  __IOM uint32_t  SAR3SMBUDIDW1;                /*!< (@ 0x00000138) SAR3 SMBUS ARP UDID WORD1 REGISTER                         */
  __IOM uint32_t  SAR3SMBUDIDW2;                /*!< (@ 0x0000013C) SAR3 SMBUS ARP UDID WORD2 REGISTER                         */
  __IOM uint32_t  SAR3SMBUDIDW3;                /*!< (@ 0x00000140) SAR3 SMBUS ARP UDID WORD3 REGISTER                         */
  __IOM uint32_t  SAR4SMBUDIDW0;                /*!< (@ 0x00000144) SAR4 SMBUS ARP UDID WORD0 REGISTER                         */
  __IOM uint32_t  SAR4SMBUDIDW1;                /*!< (@ 0x00000148) SAR4 SMBUS ARP UDID WORD1 REGISTER                         */
  __IOM uint32_t  SAR4SMBUDIDW2;                /*!< (@ 0x0000014C) SAR4 SMBUS ARP UDID WORD2 REGISTER                         */
  __IOM uint32_t  SAR4SMBUDIDW3;                /*!< (@ 0x00000150) SAR4 SMBUS ARP UDID WORD3 REGISTER                         */
} I2C_Type;                                     /*!< Size = 340 (0x154)                                                        */



/* =========================================================================================================================== */
/* ================                                           I3C0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief I3C Controller (I3C0)
  */

typedef struct {                                /*!< (@ 0x4000E000) I3C0 Structure                                             */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000000) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable                                                             */
      __IOM uint32_t MSTSLVSEL  : 1;            /*!< [1..1] Master Slave Select                                                */
            uint32_t            : 4;
      __IOM uint32_t INTEN      : 1;            /*!< [6..6] Interrupt Enable                                                   */
      __IOM uint32_t ACKIBIEN   : 1;            /*!< [7..7] Ack IBI Enable                                                     */
      __IOM uint32_t ADDRMSEL   : 1;            /*!< [8..8] Address Mode Select                                                */
            uint32_t            : 3;
      __IOM uint32_t DRCMDEN    : 1;            /*!< [12..12] Direct Command Enable                                            */
            uint32_t            : 3;
      __IOM uint32_t PTCSEL     : 2;            /*!< [17..16] Protocol Select                                                  */
      __IOM uint32_t SCLSPKSUPEN : 1;           /*!< [18..18] SCL Spike Suppression Enable                                     */
      __IOM uint32_t SDASPKSUPEN : 1;           /*!< [19..19] SDA Spike Suppression Enable                                     */
            uint32_t            : 1;
      __IOM uint32_t STLSCL     : 1;            /*!< [21..21] Stall SCL                                                        */
            uint32_t            : 1;
      __IOM uint32_t DYADDREN   : 1;            /*!< [23..23] Dynamic Address Assign Enable                                    */
      __IOM uint32_t DMAWSEL    : 1;            /*!< [24..24] DMA Write Size Select                                            */
      __IOM uint32_t DMARSEL    : 1;            /*!< [25..25] DMA Read Size Select                                             */
      __IOM uint32_t TFIFORST   : 1;            /*!< [26..26] Tx FIFO Reset                                                    */
      __IOM uint32_t RFIFORST   : 1;            /*!< [27..27] Rx FIFO Reset                                                    */
      __IOM uint32_t MSTMONTEN  : 1;            /*!< [28..28] Master Monitor Enable                                            */
            uint32_t            : 1;
      __IOM uint32_t DMAEN      : 1;            /*!< [30..30] DMA Enable                                                       */
      __IOM uint32_t RST        : 1;            /*!< [31..31] Soft Reset                                                       */
    } CTRL_b;
  } ;
  
  union {
    __IOM uint32_t CLKDIV;                      /*!< (@ 0x00000004) CLOCK DIVIDER REGISTER                                     */
    
    struct {
      __IOM uint32_t SDADIV     : 8;            /*!< [7..0] SDA Divider                                                        */
      __IOM uint32_t SCLDIV     : 8;            /*!< [15..8] SCL Divider                                                       */
            uint32_t            : 16;
    } CLKDIV_b;
  } ;
  
  union {
    __IOM uint32_t MSTSTA;                      /*!< (@ 0x00000008) MASTER STATUS REGISTER                                     */
    
    struct {
      __IOM uint32_t INTPENG    : 1;            /*!< [0..0] Interrupt Pending                                                  */
      __IOM uint32_t TOINTPENG  : 1;            /*!< [1..1] Timeout Interrupt Pending                                          */
      __IOM uint32_t SDAARBLOST : 1;            /*!< [2..2] SDA Arbitration Lost                                               */
      __IOM uint32_t SCLARBLOST : 1;            /*!< [3..3] SCL Arbitration Lost                                               */
      __IOM uint32_t TXEMPTY    : 1;            /*!< [4..4] Tx FIFO Empty                                                      */
      __IOM uint32_t TXFULL     : 1;            /*!< [5..5] Tx FIFO Full                                                       */
      __IOM uint32_t RXNOTEMPTY : 1;            /*!< [6..6] Rx FIFO Not Empty                                                  */
      __IOM uint32_t RXFULL     : 1;            /*!< [7..7] Rx FIFO Full                                                       */
      __IOM uint32_t DADDRNUMOV : 1;            /*!< [8..8] Dynamic Address Number Overflow                                    */
      __IOM uint32_t I2CNACK    : 1;            /*!< [9..9] I2C NACK                                                           */
      __IOM uint32_t CCCNACK    : 1;            /*!< [10..10] Common Command Code NACK                                         */
      __IOM uint32_t DADDRNACK  : 1;            /*!< [11..11] Dynamic Address Assigned NACK                                    */
            uint32_t            : 1;
      __IOM uint32_t STARTDET   : 1;            /*!< [13..13] Start Condition Detected                                         */
      __IOM uint32_t STOPDET    : 1;            /*!< [14..14] Stop Condition Detected                                          */
      __IOM uint32_t HJINT      : 1;            /*!< [15..15] Hot Join Interrupt                                               */
            uint32_t            : 1;
      __IOM uint32_t GETIBI     : 1;            /*!< [17..17] Get In Band Interrupt                                            */
            uint32_t            : 1;
      __IOM uint32_t SCLINVAL   : 1;            /*!< [19..19] Scl Input Value                                                  */
      __IOM uint32_t SDAINVAL   : 1;            /*!< [20..20] Sda Input Value                                                  */
            uint32_t            : 10;
      __IOM uint32_t BUSY       : 1;            /*!< [31..31] Bus Busy                                                         */
    } MSTSTA_b;
  } ;
  
  union {
    __IOM uint32_t TO;                          /*!< (@ 0x0000000C) TIME OUT REGISTER                                          */
    
    struct {
      __IOM uint32_t TOCNT      : 24;           /*!< [23..0] Timeout Counter                                                   */
            uint32_t            : 8;
    } TO_b;
  } ;
  __IOM uint32_t  DBUF;                         /*!< (@ 0x00000010) DATA BUFFER REGISTER                                       */
  
  union {
    __IOM uint32_t SLVADDR;                     /*!< (@ 0x00000014) SLAVE ADDRESS REGISTER                                     */
    
    struct {
      __IOM uint32_t ADDR       : 16;           /*!< [15..0] Slave Address                                                     */
            uint32_t            : 16;
    } SLVADDR_b;
  } ;
  
  union {
    __IOM uint32_t DNUM;                        /*!< (@ 0x00000018) DATA NUMBER REGISTER                                       */
    
    struct {
      __IOM uint32_t WRNUM      : 16;           /*!< [15..0] Data Number to Write                                              */
      __IOM uint32_t RDNUM      : 16;           /*!< [31..16] Data Number to Read                                              */
    } DNUM_b;
  } ;
  __IOM uint32_t  DIRCMD;                       /*!< (@ 0x0000001C) DIRECT COMMAND REGISTER                                    */
  
  union {
    __IOM uint32_t INTMASK;                     /*!< (@ 0x00000020) INTERRUPT MASK REGISTER                                    */
    
    struct {
      __IOM uint32_t INTPENGENMSK : 1;          /*!< [0..0] Interrupt Pending Mask Bit                                         */
      __IOM uint32_t TOINTPENGMSK : 1;          /*!< [1..1] Timeout Interrupt Pending Interrupt Mask Bit                       */
      __IOM uint32_t SDAARBLOSTINTMSK : 1;      /*!< [2..2] SDA Arbitration Lost Interrupt Mask Bit                            */
      __IOM uint32_t SCLARBLOSTINTMSK : 1;      /*!< [3..3] SCL Arbitration Lost Interrupt Mask Bit                            */
      __IOM uint32_t TXEMPTYINTMSK : 1;         /*!< [4..4] Tx FIFO Empty Interrupt Mask Bit                                   */
      __IOM uint32_t TXFULLINTMSK : 1;          /*!< [5..5] Tx FIFO Full Interrupt Mask Bit                                    */
      __IOM uint32_t RXNOTEMPTYINTMSK : 1;      /*!< [6..6] Rx FIFO Not Empty Interrupt Mask Bit                               */
      __IOM uint32_t RXFULLINTMSK : 1;          /*!< [7..7] Rx FIFO Full Interrupt Mask Bit                                    */
      __IOM uint32_t DADDRNUMOVINTMSK : 1;      /*!< [8..8] Dynamic Address Number Overflow Interrupt Mask Bit                 */
      __IOM uint32_t I2CNACKINTMSK : 1;         /*!< [9..9] I2C NACK Interrupt Mask Bit                                        */
      __IOM uint32_t CCCNACKINTMSK : 1;         /*!< [10..10] Common Command Code NACK Interrupt Mask Bit                      */
      __IOM uint32_t DADDRNACKINTMSK : 1;       /*!< [11..11] Dynamic Address Assigned NACK Interrupt Mask Bit                 */
            uint32_t            : 1;
      __IOM uint32_t STARTDEINTMSK : 1;         /*!< [13..13] Start Condition Detected Interrupt Mask Bit                      */
      __IOM uint32_t STOPDETINTMSK : 1;         /*!< [14..14] Stop Condition Detected Interrupt Mask Bit                       */
      __IOM uint32_t HJINTMSK   : 1;            /*!< [15..15] Hot Join Interrupt Mask Bit                                      */
            uint32_t            : 1;
      __IOM uint32_t GETIBIMSK  : 1;            /*!< [17..17] In Band Interrupt Mask Bit                                       */
            uint32_t            : 14;
    } INTMASK_b;
  } ;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t DMAFTHR;                     /*!< (@ 0x00000030) DMA FIFO THRESHOLD                                         */
    
    struct {
      __IOM uint32_t TXFIFOTHR  : 8;            /*!< [7..0] TX FIFO Threshold                                                  */
      __IOM uint32_t RXFIFOTHR  : 8;            /*!< [15..8] RX FIFO Threshold                                                 */
            uint32_t            : 16;
    } DMAFTHR_b;
  } ;
  
  union {
    __IOM uint32_t SPKCNT;                      /*!< (@ 0x00000034) SPIKE COUNTER REGISTER                                     */
    
    struct {
      __IOM uint32_t CNT        : 8;            /*!< [7..0] Spike Count                                                        */
            uint32_t            : 24;
    } SPKCNT_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  TXFRMLEN;                     /*!< (@ 0x00000040) TX FIFO REMAIN LENGTH REGISTER                             */
  __IOM uint32_t  TXFLEN;                       /*!< (@ 0x00000044) TX FIFO LENGTH REGISTER                                    */
  __IOM uint32_t  RXFRMLEN;                     /*!< (@ 0x00000048) RX FIFO REMAIN LENGTH REGISTER                             */
  __IOM uint32_t  RXFLEN;                       /*!< (@ 0x0000004C) RX FIFO LENGTH REGISTER                                    */
  
  union {
    __IOM uint32_t DYNADDR;                     /*!< (@ 0x00000050) DYNAMIC ADDRESS REGISTER                                   */
    
    struct {
      __IOM uint32_t ADDR       : 7;            /*!< [6..0] Dynamci Address                                                    */
            uint32_t            : 25;
    } DYNADDR_b;
  } ;
  __IM  uint32_t  RESERVED2[107];
  
  union {
    __IOM uint32_t SLVCTRL;                     /*!< (@ 0x00000200) SLAVE CONTROL REGISTER                                     */
    
    struct {
      __IOM uint32_t REQHJ      : 1;            /*!< [0..0] Slave Request Hot-Join                                             */
      __IOM uint32_t ISSUEIBI   : 1;            /*!< [1..1] Slave Issues IBI                                                   */
            uint32_t            : 6;
      __IOM uint32_t HJTAR      : 1;            /*!< [8..8] Hot-Hoined Target, Can Issue A Hot-Join                            */
      __IOM uint32_t PASHJEN    : 1;            /*!< [9..9] Enable Slave To Issue Passive Hot-Join Or Not                      */
      __IOM uint32_t TRYIBIAGAIN : 1;           /*!< [10..10] Slave Choose To Try IBI Again When Receive NACK or
                                                     Arbtion Lost                                                              */
            uint32_t            : 21;
    } SLVCTRL_b;
  } ;
  
  union {
    __IOM uint32_t SLVSTA;                      /*!< (@ 0x00000204) SLAVE STATUS REGISTER                                      */
    
    struct {
      __IOM uint32_t ENINT      : 1;            /*!< [0..0] Enable Interrupt                                                   */
      __IOM uint32_t ENCR       : 1;            /*!< [1..1] Enable CRC                                                         */
            uint32_t            : 1;
      __IOM uint32_t ENHJ       : 1;            /*!< [3..3] Enable Hot-Join                                                    */
      __IM  uint32_t HJED       : 1;            /*!< [4..4] HOT-JOINED                                                         */
      __IM  uint32_t IBIACCPED  : 1;            /*!< [5..5] In Band Interrupt Accepted                                         */
      __IM  uint32_t IBINACK    : 1;            /*!< [6..6] In Band Interrupt NACK                                             */
      __IM  uint32_t CCCERR     : 1;            /*!< [7..7] Slave CCC Error                                                    */
      __IM  uint32_t WRERR      : 1;            /*!< [8..8] Slave Write Length More Than MWL Error Interrupt                   */
      __IM  uint32_t TERR       : 1;            /*!< [9..9] Slave Tbit Error Interrupt                                         */
      __IOM uint32_t SETMRL     : 1;            /*!< [10..10] Slave Set Maximum Read Length                                    */
      __IOM uint32_t SETMWL     : 1;            /*!< [11..11] Slave Set Maximum Write Length                                   */
      __IOM uint32_t SETXTIME   : 1;            /*!< [12..12] Slave Set Exchange Timing Information                            */
      __IM  uint32_t RSTACT     : 1;            /*!< [13..13] Slave Target Reset Action                                        */
      __IM  uint32_t GETACCCR   : 1;            /*!< [14..14] Slave Get Accept Controller Role                                 */
            uint32_t            : 14;
      __IM  uint32_t STAADDR    : 1;            /*!< [29..29] Slave Static Address Assigned                                    */
      __IM  uint32_t DYADDR     : 1;            /*!< [30..30] Slave Dynamic Address Assigned                                   */
      __IOM uint32_t RNW        : 1;            /*!< [31..31] Slave Read Write Status                                          */
    } SLVSTA_b;
  } ;
  __IM  uint32_t  RESERVED3[6];
  __IOM uint32_t  SLVUIDL;                      /*!< (@ 0x00000220) SLAVE UNIQUE ID LOW REGISTER                               */
  __IOM uint32_t  SLVUIDH;                      /*!< (@ 0x00000224) SLAVE UNIQUE ID HIGH REGISTER                              */
  
  union {
    __IOM uint32_t SLVBCR;                      /*!< (@ 0x00000228) SLAVE BUS CHARACTERISTIC REGISTER                          */
    
    struct {
      __IOM uint32_t BCR        : 8;            /*!< [7..0] Bus Characteristic                                                 */
            uint32_t            : 24;
    } SLVBCR_b;
  } ;
  
  union {
    __IOM uint32_t SLVDCR;                      /*!< (@ 0x0000022C) SLAVE DEVICE CHARACTERISTIC REGISTER                       */
    
    struct {
      __IOM uint32_t DCR        : 8;            /*!< [7..0] Device Characteristic                                              */
            uint32_t            : 24;
    } SLVDCR_b;
  } ;
  
  union {
    __IOM uint32_t SLVMDB;                      /*!< (@ 0x00000230) SLAVE MANDATORY DATA BYTE REGISTER                         */
    
    struct {
      __IOM uint32_t MDB        : 8;            /*!< [7..0] Mandatory Data Byte                                                */
            uint32_t            : 24;
    } SLVMDB_b;
  } ;
  
  union {
    __IOM uint32_t SLVSETXTIME;                 /*!< (@ 0x00000234) SLAVE SETXTIME BYTE REGISTER                               */
    
    struct {
      __IOM uint32_t SETXTIME   : 8;            /*!< [7..0] SETXTIME                                                           */
            uint32_t            : 24;
    } SLVSETXTIME_b;
  } ;
  
  union {
    __IOM uint32_t SLVGETXTIME;                 /*!< (@ 0x00000238) SLAVE GETXTIME BYTE REGISTER                               */
    
    struct {
      __IOM uint32_t INAB       : 8;            /*!< [7..0] Inaccuracy Byte                                                    */
      __IOM uint32_t FREQB      : 8;            /*!< [15..8] Frequency Byte                                                    */
      __IOM uint32_t STAB       : 8;            /*!< [23..16] State Byte                                                       */
      __IOM uint32_t SUPMB      : 8;            /*!< [31..24] Supported Mode Byte                                              */
    } SLVGETXTIME_b;
  } ;
  
  union {
    __IOM uint32_t SLVRSTACT;                   /*!< (@ 0x0000023C) SLAVE RSTACT REGISTER                                      */
    
    struct {
      __IOM uint32_t RSTACT     : 8;            /*!< [7..0] The Data Follows The RSTACT CCC                                    */
            uint32_t            : 24;
    } SLVRSTACT_b;
  } ;
  
  union {
    __IOM uint32_t SLVMWL;                      /*!< (@ 0x00000240) SLAVE MWL REGISTER                                         */
    
    struct {
      __IOM uint32_t MWL        : 16;           /*!< [15..0] Max Write Length                                                  */
            uint32_t            : 16;
    } SLVMWL_b;
  } ;
  
  union {
    __IOM uint32_t SLVMRL;                      /*!< (@ 0x00000244) SLAVE MRL REGISTER                                         */
    
    struct {
      __IOM uint32_t MRL        : 16;           /*!< [15..0] Max Read Length                                                   */
            uint32_t            : 16;
    } SLVMRL_b;
  } ;
  
  union {
    __IOM uint32_t SLVGETSTATUS;                /*!< (@ 0x00000248) SLAVE GETSTATUS REGISTER                                   */
    
    struct {
      __IOM uint32_t STSDATA    : 16;           /*!< [15..0] STSDATA                                                           */
            uint32_t            : 16;
    } SLVGETSTATUS_b;
  } ;
  
  union {
    __IOM uint32_t SLVINTMASK;                  /*!< (@ 0x0000024C) SLAVE INTERRUPT MASK REGISTER                              */
    
    struct {
      __IOM uint32_t ENINT      : 1;            /*!< [0..0] ENINT Interrupt Mask                                               */
      __IOM uint32_t ENCRINT    : 1;            /*!< [1..1] ENCR Interrupt Mask                                                */
            uint32_t            : 1;
      __IOM uint32_t ENHJINT    : 1;            /*!< [3..3] ENHJ Interrupt Mask                                                */
      __IOM uint32_t HJEDINT    : 1;            /*!< [4..4] HOT-JOINED Interrupt Mask                                          */
      __IOM uint32_t IBIACCPEDINT : 1;          /*!< [5..5] In Band Interrupt Accepted Interrupt Mask                          */
      __IOM uint32_t IBINACKINT : 1;            /*!< [6..6] In Band Interrupt NACK Interrupt Mask                              */
      __IOM uint32_t CCCERRINT  : 1;            /*!< [7..7] CCC Error Interrupt Mask                                           */
      __IOM uint32_t WRERRINT   : 1;            /*!< [8..8] Slave Write Length More Than MWL Error Interrupt Mask              */
      __IOM uint32_t TERRINT    : 1;            /*!< [9..9] Slave Tbit Error Interrupt Mask                                    */
      __IOM uint32_t SETMRLINT  : 1;            /*!< [10..10] Set Maximum Read Length Interrupt Mask                           */
      __IOM uint32_t SETMWLINT  : 1;            /*!< [11..11] Set Maximum Write Length Interrupt Mask                          */
      __IOM uint32_t SETXTIMEINT : 1;           /*!< [12..12] Set Exchange Timing Information Interrupt Mask                   */
      __IOM uint32_t RSTACTINT  : 1;            /*!< [13..13] Target Reset Action Interrupt Mask                               */
      __IOM uint32_t GETACCCRINT : 1;           /*!< [14..14] Get Accept Controller Role Interrupt Mask                        */
            uint32_t            : 14;
      __IOM uint32_t STAADDRINT : 1;            /*!< [29..29] Static Address Assigned Interrupt Mask                           */
      __IOM uint32_t DYADDRINT  : 1;            /*!< [30..30] Dynamic Address Assigned Interrupt Mask                          */
            uint32_t            : 1;
    } SLVINTMASK_b;
  } ;
} I3C0_Type;                                    /*!< Size = 592 (0x250)                                                        */



/* =========================================================================================================================== */
/* ================                                           PWM0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief PWM Controller (PWM0)
  */

typedef struct {                                /*!< (@ 0x4000F000) PWM0 Structure                                             */
  __IOM uint32_t  DUTY;                         /*!< (@ 0x00000000) PWM DUTY REGISTER                                          */
  __IOM uint32_t  DIV;                          /*!< (@ 0x00000004) PWM DIVIDER REGISTER                                       */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000008) PWM CONTROL REGISTER                                       */
    
    struct {
            uint32_t            : 28;
      __IOM uint32_t CLKSRC     : 1;            /*!< [28..28] Clock Source Selection                                           */
      __IOM uint32_t INVT       : 1;            /*!< [29..29] Output Inverter Control                                          */
      __IOM uint32_t RST        : 1;            /*!< [30..30] Reset PWM Controller                                             */
      __IOM uint32_t EN         : 1;            /*!< [31..31] Enable PWM Controller                                            */
    } CTRL_b;
  } ;
} PWM_Type;                                     /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                          PWMLED0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief PWMLED Controller (PWMLED0)
  */

typedef struct {                                /*!< (@ 0x4000F800) PWMLED0 Structure                                          */
  
  union {
    __IOM uint32_t MODE;                        /*!< (@ 0x00000000) MODE REGISTER                                              */
    
    struct {
      __IOM uint32_t SEL        : 2;            /*!< [1..0] Mode Selection                                                     */
            uint32_t            : 30;
    } MODE_b;
  } ;
  
  union {
    __IOM uint32_t DL;                          /*!< (@ 0x00000004) DUTY LIMIT REGISTER                                        */
    
    struct {
      __IOM uint32_t MINV       : 8;            /*!< [7..0] Minimum Duty Cycle                                                 */
      __IOM uint32_t MAXV       : 8;            /*!< [15..8] Maximum Duty Cycle                                                */
            uint32_t            : 16;
    } DL_b;
  } ;
  
  union {
    __IOM uint32_t WT;                          /*!< (@ 0x00000008) WAIT TIME REGISTER                                         */
    
    struct {
      __IOM uint32_t LKV        : 12;           /*!< [11..0] Low wait-time                                                     */
            uint32_t            : 4;
      __IOM uint32_t HKV        : 12;           /*!< [27..16] High wait-time                                                   */
            uint32_t            : 4;
    } WT_b;
  } ;
  
  union {
    __IOM uint32_t SD;                          /*!< (@ 0x0000000C) STEP DUTY REGISTER                                         */
    
    struct {
      __IOM uint32_t STEP0DV    : 4;            /*!< [3..0] Step0 Duty Value                                                   */
      __IOM uint32_t STEP1DV    : 4;            /*!< [7..4] Step1 Duty Value                                                   */
      __IOM uint32_t STEP2DV    : 4;            /*!< [11..8] Step2 Duty Value                                                  */
      __IOM uint32_t STEP3DV    : 4;            /*!< [15..12] Step3 Duty Value                                                 */
      __IOM uint32_t STEP4DV    : 4;            /*!< [19..16] Step4 Duty Value                                                 */
      __IOM uint32_t STEP5DV    : 4;            /*!< [23..20] Step5 Duty Value                                                 */
      __IOM uint32_t STEP6DV    : 4;            /*!< [27..24] Step6 Duty Value                                                 */
      __IOM uint32_t STEP7DV    : 4;            /*!< [31..28] Step7 Duty Value                                                 */
    } SD_b;
  } ;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x00000010) STEP TIME REGISTER                                         */
    
    struct {
      __IOM uint32_t STEP0TV    : 4;            /*!< [3..0] Step0 Time Value                                                   */
      __IOM uint32_t STEP1TV    : 4;            /*!< [7..4] Step1 Time Value                                                   */
      __IOM uint32_t STEP2TV    : 4;            /*!< [11..8] Step2 Time Value                                                  */
      __IOM uint32_t STEP3TV    : 4;            /*!< [15..12] Step3 Time Value                                                 */
      __IOM uint32_t STEP4TV    : 4;            /*!< [19..16] Step4 Time Value                                                 */
      __IOM uint32_t STEP5TV    : 4;            /*!< [23..20] Step5 Time Value                                                 */
      __IOM uint32_t STEP6TV    : 4;            /*!< [27..24] Step6 Time Value                                                 */
      __IOM uint32_t STEP7TV    : 4;            /*!< [31..28] Step7 Time Value                                                 */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000014) CONTROL REGISTER                                           */
    
    struct {
            uint32_t            : 16;
      __IOM uint32_t CYCLE      : 8;            /*!< [23..16] The number of output cycle                                       */
            uint32_t            : 4;
      __IOM uint32_t OUTPUT     : 1;            /*!< [28..28] Control the output method                                        */
      __IOM uint32_t INV        : 1;            /*!< [29..29] Output Inverter Control                                          */
      __IOM uint32_t RST        : 1;            /*!< [30..30] Reset PWM LED Controller                                         */
      __IOM uint32_t EN         : 1;            /*!< [31..31] Enable PWMLED Controller                                         */
    } CTRL_b;
  } ;
} PWMLED_Type;                                  /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          TACHO0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Tachometer Controller (TACHO0)
  */

typedef struct {                                /*!< (@ 0x4000FD00) TACHO0 Structure                                           */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000000) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable Tachometer Controller                                       */
      __IOM uint32_t FILTEREN   : 1;            /*!< [1..1] Enable Filter of Tachometer                                        */
      __IOM uint32_t SELEDGE    : 2;            /*!< [3..2] Select Edges of Tachometer                                         */
      __IOM uint32_t READMODE   : 1;            /*!< [4..4] Select Reading Mode of Tachometer                                  */
            uint32_t            : 11;
      __IM  uint32_t CNT        : 16;           /*!< [31..16] Counter of Tachometer                                            */
    } CTRL_b;
  } ;
  
  union {
    __IOM uint32_t STS;                         /*!< (@ 0x00000004) STATUS REGISTER                                            */
    
    struct {
      __IOM uint32_t LIMIT      : 1;            /*!< [0..0] Limit status of Tachometer                                         */
      __IM  uint32_t PIN        : 1;            /*!< [1..1] Pin Status of Tachometer                                           */
      __IOM uint32_t CHG        : 1;            /*!< [2..2] Tachometer Input Changes Its Status                                */
      __IOM uint32_t CNTRDY     : 1;            /*!< [3..3] Status of Count Ready                                              */
            uint32_t            : 28;
    } STS_b;
  } ;
  
  union {
    __IOM uint32_t LIMITH;                      /*!< (@ 0x00000008) HIGH-LIMIT REGISTER                                        */
    
    struct {
      __IOM uint32_t VAL        : 16;           /*!< [15..0] High limit value                                                  */
            uint32_t            : 16;
    } LIMITH_b;
  } ;
  
  union {
    __IOM uint32_t LIMITL;                      /*!< (@ 0x0000000C) LOW-LIMIT REGISTER                                         */
    
    struct {
      __IOM uint32_t VAL        : 16;           /*!< [15..0] Low limit value                                                   */
            uint32_t            : 16;
    } LIMITL_b;
  } ;
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000010) INTERRUPT ENABLE REGISTER                                  */
    
    struct {
      __IOM uint32_t LIMITEN    : 1;            /*!< [0..0] Limit Interrupt Enable                                             */
      __IOM uint32_t CNTRDYEN   : 1;            /*!< [1..1] Ready to count Interrupt Enable                                    */
      __IOM uint32_t CHGEN      : 1;            /*!< [2..2] Input Change Interrupt Enable                                      */
            uint32_t            : 29;
    } INTEN_b;
  } ;
} TACHO_Type;                                   /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief 12-bit ADC Controller (ADC)
  */

typedef struct {                                /*!< (@ 0x4000FE00) ADC Structure                                              */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000000) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable ADC controller                                              */
      __IOM uint32_t START      : 1;            /*!< [1..1] Start ADC conversion                                               */
      __IOM uint32_t RST        : 1;            /*!< [2..2] Reset ADC Controller                                               */
      __IOM uint32_t MDSEL      : 1;            /*!< [3..3] Conversion Mode Selection                                          */
      __IOM uint32_t SINGLEINTEN : 1;           /*!< [4..4] Enable Single Done Interrupt                                       */
      __IOM uint32_t REPEATINTEN : 1;           /*!< [5..5] Enable Repeat Done Interrupt                                       */
            uint32_t            : 26;
    } CTRL_b;
  } ;
  
  union {
    __IOM uint32_t CHCTRL;                      /*!< (@ 0x00000004) CHANNEL CONTROL REGISTER                                   */
    
    struct {
      __IOM uint32_t CH0EN      : 1;            /*!< [0..0] Enable ADC Channel                                                 */
      __IOM uint32_t CH1EN      : 1;            /*!< [1..1] Enable ADC Channel                                                 */
      __IOM uint32_t CH2EN      : 1;            /*!< [2..2] Enable ADC Channel                                                 */
      __IOM uint32_t CH3EN      : 1;            /*!< [3..3] Enable ADC Channel                                                 */
      __IOM uint32_t CH4EN      : 1;            /*!< [4..4] Enable ADC Channel                                                 */
      __IOM uint32_t CH5EN      : 1;            /*!< [5..5] Enable ADC Channel                                                 */
      __IOM uint32_t CH6EN      : 1;            /*!< [6..6] Enable ADC Channel                                                 */
      __IOM uint32_t CH7EN      : 1;            /*!< [7..7] Enable ADC Channel                                                 */
      __IOM uint32_t CH8EN      : 1;            /*!< [8..8] Enable ADC Channel                                                 */
      __IOM uint32_t CH9EN      : 1;            /*!< [9..9] Enable ADC Channel                                                 */
      __IOM uint32_t CH10EN     : 1;            /*!< [10..10] Enable ADC Channel                                               */
      __IOM uint32_t CH11EN     : 1;            /*!< [11..11] Enable ADC Channel                                               */
      __IOM uint32_t CH0LPFBYPASS : 1;          /*!< [12..12] Bypass ADC Channel Low-Pass Filter                               */
      __IOM uint32_t CH1LPFBYPASS : 1;          /*!< [13..13] Bypass ADC Channel Low-Pass Filter                               */
      __IOM uint32_t CH2LPFBYPASS : 1;          /*!< [14..14] Bypass ADC Channel Low-Pass Filter                               */
      __IOM uint32_t CH3LPFBYPASS : 1;          /*!< [15..15] Bypass ADC Channel Low-Pass Filter                               */
      __IOM uint32_t CH4LPFBYPASS : 1;          /*!< [16..16] Bypass ADC Channel Low-Pass Filter                               */
      __IOM uint32_t CH5LPFBYPASS : 1;          /*!< [17..17] Bypass ADC Channel Low-Pass Filter                               */
      __IOM uint32_t CH6LPFBYPASS : 1;          /*!< [18..18] Bypass ADC Channel Low-Pass Filter                               */
      __IOM uint32_t CH7LPFBYPASS : 1;          /*!< [19..19] Bypass ADC Channel Low-Pass Filter                               */
      __IOM uint32_t CH8LPFBYPASS : 1;          /*!< [20..20] Bypass ADC Channel Low-Pass Filter                               */
      __IOM uint32_t CH9LPFBYPASS : 1;          /*!< [21..21] Bypass ADC Channel Low-Pass Filter                               */
      __IOM uint32_t CH10LPFBYPASS : 1;         /*!< [22..22] Bypass ADC Channel Low-Pass Filter                               */
      __IOM uint32_t CH11LPFBYPASS : 1;         /*!< [23..23] Bypass ADC Channel Low-Pass Filter                               */
      __IOM uint32_t CALBYPASS  : 1;            /*!< [24..24] Bypass ADC Channel Linear Calibration                            */
            uint32_t            : 7;
    } CHCTRL_b;
  } ;
  
  union {
    __IOM uint32_t STS;                         /*!< (@ 0x00000008) STATUS REGISTER                                            */
    
    struct {
      __IOM uint32_t CH0DONE    : 1;            /*!< [0..0] Conversion of ADC Channel Complete                                 */
      __IOM uint32_t CH1DONE    : 1;            /*!< [1..1] Conversion of ADC Channel Complete                                 */
      __IOM uint32_t CH2DONE    : 1;            /*!< [2..2] Conversion of ADC Channel Complete                                 */
      __IOM uint32_t CH3DONE    : 1;            /*!< [3..3] Conversion of ADC Channel Complete                                 */
      __IOM uint32_t CH4DONE    : 1;            /*!< [4..4] Conversion of ADC Channel Complete                                 */
      __IOM uint32_t CH5DONE    : 1;            /*!< [5..5] Conversion of ADC Channel Complete                                 */
      __IOM uint32_t CH6DONE    : 1;            /*!< [6..6] Conversion of ADC Channel Complete                                 */
      __IOM uint32_t CH7DONE    : 1;            /*!< [7..7] Conversion of ADC Channel Complete                                 */
      __IOM uint32_t CH8DONE    : 1;            /*!< [8..8] Conversion of ADC Channel Complete                                 */
      __IOM uint32_t CH9DONE    : 1;            /*!< [9..9] Conversion of ADC Channel Complete                                 */
      __IOM uint32_t CH10DONE   : 1;            /*!< [10..10] Conversion of ADC Channel Complete                               */
      __IOM uint32_t CH11DONE   : 1;            /*!< [11..11] Conversion of ADC Channel Complete                               */
      __IOM uint32_t SINGLEDONE : 1;            /*!< [12..12] Single Conversion Complete                                       */
      __IOM uint32_t REPEATDONE : 1;            /*!< [13..13] Repeat Conversion Complete                                       */
            uint32_t            : 2;
      __IM  uint32_t READY      : 1;            /*!< [16..16] Ready After Power-On                                             */
      __IM  uint32_t LPFSTABLE  : 1;            /*!< [17..17] Low-Pass Filter Stable                                           */
            uint32_t            : 14;
    } STS_b;
  } ;
  
  union {
    __IOM uint32_t CHDATA[11];                  /*!< (@ 0x0000000C) ADC channel Data                                           */
    
    struct {
      __IOM uint32_t DATA       : 12;           /*!< [11..0] Conversion data, measured by the A/D converter                    */
            uint32_t            : 20;
    } CHDATA_b[11];
  } ;
} ADC_Type;                                     /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                            PS2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief PS2 Controller (PS2)
  */

typedef struct {                                /*!< (@ 0x4000FF00) PS2 Structure                                              */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000000) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable PS/2 Controller                                             */
      __IOM uint32_t MDSEL      : 1;            /*!< [1..1] Accessing Mode Selection                                           */
      __IOM uint32_t TXSTR      : 1;            /*!< [2..2] Kick PS/2 Controller Start to Transmit                             */
      __IM  uint32_t READY      : 1;            /*!< [3..3] PS/2 Controller is Ready to Transmit                               */
      __IOM uint32_t RST        : 1;            /*!< [4..4] Reset PS/2 Controller                                              */
            uint32_t            : 27;
    } CTRL_b;
  } ;
  
  union {
    __IOM uint32_t TXDAT;                       /*!< (@ 0x00000004) TRANSMIT DATA REGISTER                                     */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] PS/2 Transmit Data                                                 */
            uint32_t            : 24;
    } TXDAT_b;
  } ;
  
  union {
    __IOM uint32_t RXDAT;                       /*!< (@ 0x00000008) RECEIVE DATA REGISTER                                      */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] PS/2 Receive Data Buffer                                           */
            uint32_t            : 24;
    } RXDAT_b;
  } ;
  
  union {
    __IOM uint32_t STS;                         /*!< (@ 0x0000000C) STATUS REGISTER                                            */
    
    struct {
      __IOM uint32_t STRSTS     : 1;            /*!< [0..0] Strat-bit Detection Status                                         */
      __IOM uint32_t TDS        : 1;            /*!< [1..1] Transcation Done Status                                            */
      __IOM uint32_t PRTERR     : 1;            /*!< [2..2] Parity-bit Error Status                                            */
      __IOM uint32_t STPERR     : 1;            /*!< [3..3] Stop-bit Error Status                                              */
      __IM  uint32_t BUSY       : 1;            /*!< [4..4] Busy Status                                                        */
      __IOM uint32_t TXSTRTO    : 1;            /*!< [5..5] Transmit Start Timeout Status                                      */
      __IOM uint32_t TXTO       : 1;            /*!< [6..6] Transmit Timeout Status                                            */
      __IOM uint32_t RXTO       : 1;            /*!< [7..7] Receive Timeout Status                                             */
            uint32_t            : 24;
    } STS_b;
  } ;
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000010) INTERRUPT ENABLE REGISTER                                  */
    
    struct {
      __IOM uint32_t STRINTEN   : 1;            /*!< [0..0] Enable Start-bit Detection Interrupt                               */
      __IOM uint32_t TDSINTEN   : 1;            /*!< [1..1] Enable Transmit Done Interrupt                                     */
      __IOM uint32_t STSINTEN   : 1;            /*!< [2..2] Enable Status Interrupt                                            */
            uint32_t            : 29;
    } INTEN_b;
  } ;
} PS2_Type;                                     /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                            KBM                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Keyboard Matrix Controller (KBM)
  */

typedef struct {                                /*!< (@ 0x40010000) KBM Structure                                              */
  
  union {
    __IOM uint32_t SCANOUT;                     /*!< (@ 0x00000000) SCAN OUT CONTROL REGISTER                                  */
    
    struct {
      __IOM uint32_t KSO0       : 1;            /*!< [0..0] KSO Output Level                                                   */
      __IOM uint32_t KSO1       : 1;            /*!< [1..1] KSO Output Level                                                   */
      __IOM uint32_t KSO2       : 1;            /*!< [2..2] KSO Output Level                                                   */
      __IOM uint32_t KSO3       : 1;            /*!< [3..3] KSO Output Level                                                   */
      __IOM uint32_t KSO4       : 1;            /*!< [4..4] KSO Output Level                                                   */
      __IOM uint32_t KSO5       : 1;            /*!< [5..5] KSO Output Level                                                   */
      __IOM uint32_t KSO6       : 1;            /*!< [6..6] KSO Output Level                                                   */
      __IOM uint32_t KSO7       : 1;            /*!< [7..7] KSO Output Level                                                   */
      __IOM uint32_t KSO8       : 1;            /*!< [8..8] KSO Output Level                                                   */
      __IOM uint32_t KSO9       : 1;            /*!< [9..9] KSO Output Level                                                   */
      __IOM uint32_t KSO10      : 1;            /*!< [10..10] KSO Output Level                                                 */
      __IOM uint32_t KSO11      : 1;            /*!< [11..11] KSO Output Level                                                 */
      __IOM uint32_t KSO12      : 1;            /*!< [12..12] KSO Output Level                                                 */
      __IOM uint32_t KSO13      : 1;            /*!< [13..13] KSO Output Level                                                 */
      __IOM uint32_t KSO14      : 1;            /*!< [14..14] KSO Output Level                                                 */
      __IOM uint32_t KSO15      : 1;            /*!< [15..15] KSO Output Level                                                 */
      __IOM uint32_t KSO16      : 1;            /*!< [16..16] KSO Output Level                                                 */
      __IOM uint32_t KSO17      : 1;            /*!< [17..17] KSO Output Level                                                 */
      __IOM uint32_t KSO18      : 1;            /*!< [18..18] KSO Output Level                                                 */
      __IOM uint32_t KSO19      : 1;            /*!< [19..19] KSO Output Level                                                 */
            uint32_t            : 12;
    } SCANOUT_b;
  } ;
  
  union {
    __IM  uint32_t SCANIN;                      /*!< (@ 0x00000004) SACN INPUT STATUS REGISTER                                 */
    
    struct {
      __IM  uint32_t KSI0       : 1;            /*!< [0..0] KSI Input Level                                                    */
      __IM  uint32_t KSI1       : 1;            /*!< [1..1] KSI Input Level                                                    */
      __IM  uint32_t KSI2       : 1;            /*!< [2..2] KSI Input Level                                                    */
      __IM  uint32_t KSI3       : 1;            /*!< [3..3] KSI Input Level                                                    */
      __IM  uint32_t KSI4       : 1;            /*!< [4..4] KSI Input Level                                                    */
      __IM  uint32_t KSI5       : 1;            /*!< [5..5] KSI Input Level                                                    */
      __IM  uint32_t KSI6       : 1;            /*!< [6..6] KSI Input Level                                                    */
      __IM  uint32_t KSI7       : 1;            /*!< [7..7] KSI Input Level                                                    */
      __IM  uint32_t KSI8       : 1;            /*!< [8..8] KSI Input Level                                                    */
      __IM  uint32_t KSI9       : 1;            /*!< [9..9] KSI Input Level                                                    */
            uint32_t            : 22;
    } SCANIN_b;
  } ;
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000008) INTERRUPT ENABLE REGISTER                                  */
    
    struct {
      __IOM uint32_t KSI0       : 1;            /*!< [0..0] KSI Interrupt Enable                                               */
      __IOM uint32_t KSI1       : 1;            /*!< [1..1] KSI Interrupt Enable                                               */
      __IOM uint32_t KSI2       : 1;            /*!< [2..2] KSI Interrupt Enable                                               */
      __IOM uint32_t KSI3       : 1;            /*!< [3..3] KSI Interrupt Enable                                               */
      __IOM uint32_t KSI4       : 1;            /*!< [4..4] KSI Interrupt Enable                                               */
      __IOM uint32_t KSI5       : 1;            /*!< [5..5] KSI Interrupt Enable                                               */
      __IOM uint32_t KSI6       : 1;            /*!< [6..6] KSI Interrupt Enable                                               */
      __IOM uint32_t KSI7       : 1;            /*!< [7..7] KSI Interrupt Enable                                               */
      __IOM uint32_t KSI8       : 1;            /*!< [8..8] KSI Interrupt Enable                                               */
      __IOM uint32_t KSI9       : 1;            /*!< [9..9] KSI Interrupt Enable                                               */
            uint32_t            : 22;
    } INTEN_b;
  } ;
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x0000000C) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable KBM Controller                                              */
      __IOM uint32_t KSI8EN     : 1;            /*!< [1..1] Enable KSI8                                                        */
      __IOM uint32_t KSI9EN     : 1;            /*!< [2..2] Enable KSI9                                                        */
            uint32_t            : 13;
      __IOM uint32_t KSO18EN    : 1;            /*!< [16..16] Enable KSO18                                                     */
      __IOM uint32_t KSO19EN    : 1;            /*!< [17..17] Enable KSO19                                                     */
      __IOM uint32_t INTSTS     : 1;            /*!< [18..18] Interrupt Status                                                 */
            uint32_t            : 12;
      __IOM uint32_t DBGEN      : 1;            /*!< [31..31] Enable Debug Function                                            */
    } CTRL_b;
  } ;
  
  union {
    __IM  uint32_t DBG;                         /*!< (@ 0x00000010) DEBUG REGISTER                                             */
    
    struct {
      __IM  uint32_t EXIT       : 1;            /*!< [0..0] Exit Mode Status                                                   */
            uint32_t            : 1;
      __IM  uint32_t STEP       : 4;            /*!< [5..2] Step Status                                                        */
            uint32_t            : 2;
      __IM  uint32_t KSI        : 8;            /*!< [15..8] KSI Stage                                                         */
      __IM  uint32_t INTRFLASHSEL : 1;          /*!< [16..16] Internal Flash Select                                            */
      __IM  uint32_t EXTFLASH0SEL : 1;          /*!< [17..17] External Flash #0 Select                                         */
      __IM  uint32_t EXTFLASH1SEL : 1;          /*!< [18..18] External Flash #1 Select                                         */
      __IM  uint32_t JTAGSEL    : 1;            /*!< [19..19] JTAG Select                                                      */
      __IM  uint32_t ESPISEL    : 1;            /*!< [20..20] eSPI Select                                                      */
            uint32_t            : 11;
    } DBG_b;
  } ;
} KBM_Type;                                     /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                           UART                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief UART Controller (UART)
  */

typedef struct {                                /*!< (@ 0x40010100) UART Structure                                             */
  
  union {
    union {
      __IM  uint32_t RBR;                       /*!< (@ 0x00000000) RECEIVE BUFFER REGISTER                                    */
      
      struct {
        __IM  uint32_t DATA     : 8;            /*!< [7..0] Receive Buffer                                                     */
              uint32_t          : 24;
      } RBR_b;
    } ;
    
    union {
      __IOM uint32_t THR;                       /*!< (@ 0x00000000) TRANSMIT HOLDING REGISTER                                  */
      
      struct {
        __IOM uint32_t DATA     : 8;            /*!< [7..0] Transmit Holding                                                   */
              uint32_t          : 24;
      } THR_b;
    } ;
    
    union {
      __IOM uint32_t DLL;                       /*!< (@ 0x00000000) DIVISOR LATCH LOW REGISTER                                 */
      
      struct {
        __IOM uint32_t DIVL     : 8;            /*!< [7..0] Divisor Latch Low Byte                                             */
              uint32_t          : 24;
      } DLL_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t DLH;                       /*!< (@ 0x00000004) DIVISOR LATCH HIGH REGISTER                                */
      
      struct {
        __IOM uint32_t DIVH     : 8;            /*!< [7..0] Divisor Latch High Byte                                            */
              uint32_t          : 24;
      } DLH_b;
    } ;
    
    union {
      __IOM uint32_t IER;                       /*!< (@ 0x00000004) INTRRRUPT ENABLE REGISTER                                  */
      
      struct {
        __IOM uint32_t ERBFI    : 1;            /*!< [0..0] Enable Received Data Available Interrupt                           */
        __IOM uint32_t ETBEI    : 1;            /*!< [1..1] Enable Transmit Holding Register Empty Interrupt                   */
        __IOM uint32_t ELSI     : 1;            /*!< [2..2] Enable Receiver Line Status Interrupt                              */
        __IOM uint32_t EDSSI    : 1;            /*!< [3..3] Enable Modem Status Interrupt                                      */
              uint32_t          : 3;
        __IOM uint32_t PTIME    : 1;            /*!< [7..7] Programmable THRE Interrupt Mode Enable                            */
              uint32_t          : 24;
      } IER_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t IIR;                       /*!< (@ 0x00000008) INTERRUPT IDENTIFICATION                                   */
      
      struct {
        __IM  uint32_t IID      : 4;            /*!< [3..0] Interrupt ID                                                       */
              uint32_t          : 2;
        __IM  uint32_t FIFOSE   : 2;            /*!< [7..6] FIFOs Enabled                                                      */
              uint32_t          : 24;
      } IIR_b;
    } ;
    
    union {
      __IOM uint32_t FCR;                       /*!< (@ 0x00000008) FIFO CONTROL REGISTER                                      */
      
      struct {
        __IOM uint32_t FIFOE    : 1;            /*!< [0..0] FIFO Enabled                                                       */
        __IOM uint32_t RFIFOR   : 1;            /*!< [1..1] RCVR FIFO Reset                                                    */
        __IOM uint32_t XFIFOR   : 1;            /*!< [2..2] XMIT FIFO Reset                                                    */
        __IOM uint32_t DMAM     : 1;            /*!< [3..3] DMA Mode                                                           */
        __IOM uint32_t TET      : 2;            /*!< [5..4] TX Empty Trigger                                                   */
        __IOM uint32_t RCVR     : 2;            /*!< [7..6] RCVR Trigger                                                       */
              uint32_t          : 24;
      } FCR_b;
    } ;
  };
  
  union {
    __IOM uint32_t LCR;                         /*!< (@ 0x0000000C) LINE CONTROL REGISTER                                      */
    
    struct {
      __IOM uint32_t DLS        : 2;            /*!< [1..0] Data Length Select                                                 */
      __IOM uint32_t STOP       : 1;            /*!< [2..2] Number of Stop Bits                                                */
      __IOM uint32_t PEN        : 1;            /*!< [3..3] Parity Enable                                                      */
      __IOM uint32_t EPS        : 1;            /*!< [4..4] Even Parity Select                                                 */
      __IOM uint32_t STP        : 1;            /*!< [5..5] Stick Parity                                                       */
      __IOM uint32_t BC         : 1;            /*!< [6..6] Break Control Bit                                                  */
      __IOM uint32_t DLAB       : 1;            /*!< [7..7] Divisor Latch Access Bit                                           */
            uint32_t            : 24;
    } LCR_b;
  } ;
  
  union {
    __IOM uint32_t MCR;                         /*!< (@ 0x00000010) MODEM CONTROL REGISTER                                     */
    
    struct {
      __IOM uint32_t DTR        : 1;            /*!< [0..0] Data Terminal Ready                                                */
      __IOM uint32_t RTS        : 1;            /*!< [1..1] Request to Send                                                    */
            uint32_t            : 3;
      __IOM uint32_t AFCE       : 1;            /*!< [5..5] Auto Flow Control Enable                                           */
      __IOM uint32_t SIRE       : 1;            /*!< [6..6] IrDA SIR Mode Enable                                               */
            uint32_t            : 25;
    } MCR_b;
  } ;
  
  union {
    __IM  uint32_t LSR;                         /*!< (@ 0x00000014) LINE STATUS REGISTER                                       */
    
    struct {
      __IM  uint32_t DR         : 1;            /*!< [0..0] Data Ready Bit                                                     */
      __IM  uint32_t OE         : 1;            /*!< [1..1] Overrun Error bit                                                  */
      __IM  uint32_t PE         : 1;            /*!< [2..2] Parity Error bit                                                   */
      __IM  uint32_t FE         : 1;            /*!< [3..3] Framing Error bit                                                  */
      __IM  uint32_t BI         : 1;            /*!< [4..4] Break Interrupt bit                                                */
      __IM  uint32_t THRE       : 1;            /*!< [5..5] Transmit Holding Register Empty bit                                */
      __IM  uint32_t TEMT       : 1;            /*!< [6..6] Transmitter Empty Bit                                              */
      __IM  uint32_t RFE        : 1;            /*!< [7..7] Receiver FIFO Error                                                */
            uint32_t            : 24;
    } LSR_b;
  } ;
  
  union {
    __IM  uint32_t MSR;                         /*!< (@ 0x00000018) MODEM STATUS REGISTER                                      */
    
    struct {
      __IM  uint32_t DCTS       : 1;            /*!< [0..0] Delta Clear to Send                                                */
      __IM  uint32_t DDSR       : 1;            /*!< [1..1] Delta Data Set Ready                                               */
      __IM  uint32_t TERI       : 1;            /*!< [2..2] Trailing Edge of Ring Indicator                                    */
      __IM  uint32_t DDCD       : 1;            /*!< [3..3] Delta Data Carrier Detect                                          */
      __IM  uint32_t CTS        : 1;            /*!< [4..4] Clear to Send                                                      */
      __IM  uint32_t DSR        : 1;            /*!< [5..5] Data Set Ready                                                     */
      __IM  uint32_t RI         : 1;            /*!< [6..6] Ring Indicator                                                     */
      __IM  uint32_t DCD        : 1;            /*!< [7..7] Data Carrier Detect                                                */
            uint32_t            : 24;
    } MSR_b;
  } ;
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  LPDLL;                        /*!< (@ 0x00000020) LOW POWER DIVISOR LATCH LOW REGISTER                       */
  __IOM uint32_t  LPDLH;                        /*!< (@ 0x00000024) LOW POWER DIVISOR LATCH HIGH REGISTER                      */
  __IM  uint32_t  RESERVED1[2];
  
  union {
    union {
      __IOM uint32_t SRBR[16];                  /*!< (@ 0x00000030) SHADOW RECEIVE BUFFER                                      */
      
      struct {
        __IOM uint32_t DATA     : 8;            /*!< [7..0] Shadow Receive Buffer                                              */
              uint32_t          : 24;
      } SRBR_b[16];
    } ;
    
    union {
      __IOM uint32_t STHR[16];                  /*!< (@ 0x00000030) SHADOW TRANSMIT HOLDING REGISTER                           */
      
      struct {
        __IOM uint32_t DATA     : 8;            /*!< [7..0] Shadow Transmit Holding Data                                       */
              uint32_t          : 24;
      } STHR_b[16];
    } ;
  };
  
  union {
    __IOM uint32_t FAR;                         /*!< (@ 0x00000070) UART FIFO ACCESS REGISTER                                  */
    
    struct {
      __IOM uint32_t FAREN      : 1;            /*!< [0..0] Enable FIFO Access Mode                                            */
            uint32_t            : 31;
    } FAR_b;
  } ;
  
  union {
    __IM  uint32_t TFR;                         /*!< (@ 0x00000074) UART TRANSMIT FIFO READ                                    */
    
    struct {
      __IM  uint32_t DATA       : 8;            /*!< [7..0] Top Data of Transmit FIFO Data                                     */
            uint32_t            : 24;
    } TFR_b;
  } ;
  
  union {
    __OM  uint32_t RFW;                         /*!< (@ 0x00000078) UART RECEIVE FIFO WRITE                                    */
    
    struct {
      __OM  uint32_t RFWD       : 8;            /*!< [7..0] Receive FIFO Write Data                                            */
      __OM  uint32_t RFPE       : 1;            /*!< [8..8] Receive FIFO Parity Error                                          */
      __OM  uint32_t RFFE       : 1;            /*!< [9..9] Receive FIFO Framing Error                                         */
            uint32_t            : 22;
    } RFW_b;
  } ;
  
  union {
    __IM  uint32_t USR;                         /*!< (@ 0x0000007C) UART Status Register                                       */
    
    struct {
      __IM  uint32_t BUSY       : 1;            /*!< [0..0] UART Busy                                                          */
      __IM  uint32_t TFNF       : 1;            /*!< [1..1] Transmit FIFO Not Full                                             */
      __IM  uint32_t TFE        : 1;            /*!< [2..2] Transmit FIFO Empty                                                */
      __IM  uint32_t RFNE       : 1;            /*!< [3..3] Receive FIFO Not Empty                                             */
      __IM  uint32_t RFF        : 1;            /*!< [4..4] Receive FIFO Full                                                  */
            uint32_t            : 27;
    } USR_b;
  } ;
  __IM  uint32_t  TFL;                          /*!< (@ 0x00000080) UART TRANSMIT FIFO LEVEL                                   */
  __IM  uint32_t  RFL;                          /*!< (@ 0x00000084) UART RECEIVE FIFO LEVEL                                    */
  
  union {
    __OM  uint32_t SRR;                         /*!< (@ 0x00000088) UART SOFTWARE RESET REGISTER                               */
    
    struct {
      __OM  uint32_t UR         : 1;            /*!< [0..0] UART Reset                                                         */
      __OM  uint32_t RFR        : 1;            /*!< [1..1] RCVR FIFO Reset                                                    */
      __OM  uint32_t XFR        : 1;            /*!< [2..2] XMIT FIFO Reset                                                    */
            uint32_t            : 29;
    } SRR_b;
  } ;
  
  union {
    __IOM uint32_t SRTS;                        /*!< (@ 0x0000008C) UART SHADOW REQUEST TO SEND                                */
    
    struct {
      __IOM uint32_t SRTS       : 1;            /*!< [0..0] Shadow Request To Send                                             */
            uint32_t            : 31;
    } SRTS_b;
  } ;
  
  union {
    __IOM uint32_t SBCR;                        /*!< (@ 0x00000090) UART SHADOW BREAK CONTROL REGISTER                         */
    
    struct {
      __IOM uint32_t SBCR       : 1;            /*!< [0..0] Shadow Break Control Bit                                           */
            uint32_t            : 31;
    } SBCR_b;
  } ;
  
  union {
    __IOM uint32_t SDMAM;                       /*!< (@ 0x00000094) UART SHADOW DMA MODE                                       */
    
    struct {
      __IOM uint32_t SDMAM      : 1;            /*!< [0..0] Shadow Break Control Bit                                           */
            uint32_t            : 31;
    } SDMAM_b;
  } ;
  
  union {
    __IOM uint32_t SFE;                         /*!< (@ 0x00000098) UART SHADOW FIFO ENABLE                                    */
    
    struct {
      __IOM uint32_t SFE        : 1;            /*!< [0..0] Shadow FIFO Enable                                                 */
            uint32_t            : 31;
    } SFE_b;
  } ;
  
  union {
    __IOM uint32_t SRT;                         /*!< (@ 0x0000009C) UART Shadow RCVR Trigger                                   */
    
    struct {
      __IOM uint32_t SRT        : 2;            /*!< [1..0] Shadow Register For RCVR Trigger Bits                              */
            uint32_t            : 30;
    } SRT_b;
  } ;
  
  union {
    __IOM uint32_t STET;                        /*!< (@ 0x000000A0) UART SHADOW TX EMPTY TRIGGER                               */
    
    struct {
      __IOM uint32_t SRT        : 2;            /*!< [1..0] shadow register for the RCVR trigger bits                          */
            uint32_t            : 30;
    } STET_b;
  } ;
  
  union {
    __IOM uint32_t HTX;                         /*!< (@ 0x000000A4) UART HALT TX                                               */
    
    struct {
      __IOM uint32_t HALTTX     : 1;            /*!< [0..0] Halt TX                                                            */
            uint32_t            : 31;
    } HTX_b;
  } ;
  
  union {
    __OM  uint32_t DMASA;                       /*!< (@ 0x000000A8) UART DMA SOFTWARE ACKNOWLEDGE                              */
    
    struct {
      __OM  uint32_t ACK        : 1;            /*!< [0..0] Software Acknowledge                                               */
            uint32_t            : 31;
    } DMASA_b;
  } ;
} UART_Type;                                    /*!< Size = 172 (0xac)                                                         */



/* =========================================================================================================================== */
/* ================                                           SPIC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SPIC Controller (SPIC)
  */

typedef struct {                                /*!< (@ 0x40010200) SPIC Structure                                             */
  
  union {
    __IOM uint32_t CTRL0;                       /*!< (@ 0x00000000) CONTROL #0 REGISTER0                                       */
    
    struct {
      __IOM uint32_t SIPOL      : 5;            /*!< [4..0] SIPOL Mode                                                         */
      __IOM uint32_t SIPOLEN    : 1;            /*!< [5..5] SIPOL Enable                                                       */
      __IOM uint32_t SCPH       : 1;            /*!< [6..6] Serial Clock Phase                                                 */
      __IOM uint32_t SCPOL      : 1;            /*!< [7..7] Serial Clock Polarity                                              */
      __IOM uint32_t TMOD       : 2;            /*!< [9..8] Transfer Mode                                                      */
      __IOM uint32_t GCLKDIS    : 1;            /*!< [10..10] Gate Clock of ICG Cell Disable                                   */
            uint32_t            : 2;
      __IOM uint32_t DDREN      : 3;            /*!< [15..13] DDR Mode Enable in CMD_CH/DATA_CH/ADDR_CH                        */
      __IOM uint32_t ADDRCH     : 2;            /*!< [17..16] Channel Number of Address Phase After Command Phase              */
      __IOM uint32_t DATACH     : 2;            /*!< [19..18] Channel Number of Data in Transmitting or Receiving
                                                     Data                                                                      */
      __IOM uint32_t CMDCH      : 2;            /*!< [21..20] Channel Number of Command Phase in Transmitting or
                                                     Receiving Data                                                            */
      __IOM uint32_t FASTRD     : 1;            /*!< [22..22] Use Fast Read Command in User Mode                               */
      __IOM uint32_t CKMTIMES   : 5;            /*!< [27..23] Check Times                                                      */
            uint32_t            : 2;
      __IOM uint32_t UAR        : 1;            /*!< [30..30] User Mode Bit Auto Reset After Current User Mode Transaction
                                                     is Over                                                                   */
      __IOM uint32_t USERMODE   : 1;            /*!< [31..31] User Mode Bit                                                    */
    } CTRL0_b;
  } ;
  
  union {
    __IOM uint32_t RXNDF;                       /*!< (@ 0x00000004) NUMBER OF DATA FRAME                                       */
    
    struct {
      __IOM uint32_t RXNDF      : 24;           /*!< [23..0] Number of Data Frames                                             */
            uint32_t            : 8;
    } RXNDF_b;
  } ;
  
  union {
    __IOM uint32_t SSIENR;                      /*!< (@ 0x00000008) ENABLE REGISTER                                            */
    
    struct {
      __IOM uint32_t SPICEN     : 1;            /*!< [0..0] Set to Enable SPIC and Start User Mode Transaction                 */
      __IOM uint32_t ATCKCMD    : 1;            /*!< [1..1] Set to enable ATCK_CMD implementation                              */
      __IOM uint32_t FRQC       : 1;            /*!< [2..2] Set to Enable Frequency Change Function                            */
            uint32_t            : 1;
      __IOM uint32_t PGMRSTTESTEN : 1;          /*!< [4..4] For PGM RST Test oOnly                                             */
            uint32_t            : 3;
      __IOM uint32_t GPNUM      : 2;            /*!< [9..8] Determine Which Group Register User Want to Read or Write          */
      __IOM uint32_t CURGP      : 2;            /*!< [11..10] Identify Which Group Register Data is Internal Used              */
            uint32_t            : 20;
    } SSIENR_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t SER;                         /*!< (@ 0x00000010) SELECT TARGET FLASH REGISTER                               */
    
    struct {
      __IOM uint32_t SLVNUM     : 1;            /*!< [0..0] Each Bit In The Register Corresponds to One SPI Flash              */
            uint32_t            : 31;
    } SER_b;
  } ;
  
  union {
    __IOM uint32_t BAUDR;                       /*!< (@ 0x00000014) BAUD RATE SELECT REGISTER                                  */
    
    struct {
      __IOM uint32_t SCKDV      : 12;           /*!< [11..0] Define SPI Clock Divider Value                                    */
            uint32_t            : 20;
    } BAUDR_b;
  } ;
  __IOM uint32_t  TXFTLR;                       /*!< (@ 0x00000018) TX FIFO THRESHOLD REGISTER                                 */
  __IOM uint32_t  RXFTLR;                       /*!< (@ 0x0000001C) RECEIVE FIFO THRESHOLD LEVEL                               */
  __IOM uint32_t  TXFLR;                        /*!< (@ 0x00000020) TRANSMIT FIFO LEVEL REGISTER                               */
  __IOM uint32_t  RXFLR;                        /*!< (@ 0x00000024) RECEIVE FIFO LEVEL REGISTER                                */
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000028) STATUS REGISTER                                            */
    
    struct {
      __IM  uint32_t BUSY       : 1;            /*!< [0..0] SPIC busy flag                                                     */
      __IM  uint32_t TFNF       : 1;            /*!< [1..1] Transmit FIFO is not full                                          */
      __IM  uint32_t TFE        : 1;            /*!< [2..2] Transmit FIFO is empty                                             */
      __IM  uint32_t RFNE       : 1;            /*!< [3..3] Receive FIFO is not empty                                          */
      __IM  uint32_t RFF        : 1;            /*!< [4..4] Receive FIFO full                                                  */
      __IM  uint32_t TXE        : 1;            /*!< [5..5] Transmission error                                                 */
      __IOM uint32_t DCOL       : 1;            /*!< [6..6] Data Collision                                                     */
      __IM  uint32_t BOOTFIN    : 1;            /*!< [7..7] Boot Finish                                                        */
            uint32_t            : 24;
    } SR_b;
  } ;
  
  union {
    __IOM uint32_t IMR;                         /*!< (@ 0x0000002C) Interrupt Mask Register                                    */
    
    struct {
      __IOM uint32_t TXEIM      : 1;            /*!< [0..0] Transmit FIFO empty interrupt masked                               */
      __IOM uint32_t TXOIM      : 1;            /*!< [1..1] Transmit FIFO overflow interrupt mask                              */
      __IOM uint32_t RXUIM      : 1;            /*!< [2..2] Receive FIFO underflow interrupt masked                            */
      __IOM uint32_t RXOIM      : 1;            /*!< [3..3] Receive FIFO overflow interrupt masked                             */
      __IOM uint32_t RXFIM      : 1;            /*!< [4..4] Receive FIFO full interrupt masked                                 */
      __IOM uint32_t FSEIM      : 1;            /*!< [5..5] FIFO size error interrupt mask                                     */
      __IOM uint32_t WBEIM      : 1;            /*!< [6..6] Write burst error interrupt mask                                   */
      __IOM uint32_t BYEIM      : 1;            /*!< [7..7] The Byte-Enable error interrupt mask                               */
      __IOM uint32_t ACEIM      : 1;            /*!< [8..8] Auto-check timeout error interrupt mask                            */
      __IOM uint32_t USSIM      : 1;            /*!< [9..9] User-mode error interrupt mask                                     */
      __IOM uint32_t TFSIM      : 1;            /*!< [10..10] Transmit finish interrupt mask                                   */
      __IOM uint32_t ACSIM      : 1;            /*!< [11..11] Auto-check Flash Status raw interrupt mask                       */
      __IOM uint32_t DREIM      : 1;            /*!< [12..12] DR timeout error interrupt mask                                  */
            uint32_t            : 19;
    } IMR_b;
  } ;
  
  union {
    __IOM uint32_t ISR;                         /*!< (@ 0x00000030) INTERRUPT STATUS REGISTER                                  */
    
    struct {
      __IM  uint32_t TXEIS      : 1;            /*!< [0..0] Transmit FIFO empty interrupt status after masking                 */
      __IM  uint32_t TXOIS      : 1;            /*!< [1..1] Transmit FIFO overflow interrupt status after masking              */
      __IM  uint32_t RXUIS      : 1;            /*!< [2..2] Receive FIFO underflow interrupt status after masking              */
      __IM  uint32_t RXOIS      : 1;            /*!< [3..3] Receive FIFO overflow interrupt status after masking               */
      __IM  uint32_t RXFIS      : 1;            /*!< [4..4] Receive FIFO full interrupt status after masking                   */
      __IM  uint32_t FSEIS      : 1;            /*!< [5..5] FIFO size error interrupt status after masking                     */
      __IM  uint32_t WBEIS      : 1;            /*!< [6..6] Write burst error interrupt status after masking                   */
      __IM  uint32_t BYEIS      : 1;            /*!< [7..7] The Byte-Enable error interrupt status after masking               */
      __IM  uint32_t ACEIS      : 1;            /*!< [8..8] Auto-check timeout error interrupt status after masking            */
      __IM  uint32_t USEIS      : 1;            /*!< [9..9] User mode error status after masking                               */
      __IM  uint32_t TFSIS      : 1;            /*!< [10..10] Transmit finish status after masking                             */
      __IM  uint32_t ACSIS      : 1;            /*!< [11..11] Auto-check Flash Status raw interrupt status after
                                                     masking                                                                   */
      __IM  uint32_t DREIS      : 1;            /*!< [12..12] DR timeout error interrupt status after masking                  */
            uint32_t            : 19;
    } ISR_b;
  } ;
  
  union {
    __IOM uint32_t RISR;                        /*!< (@ 0x00000034) RAW INTERRUPT STATUS REGISTER                              */
    
    struct {
      __IM  uint32_t TXEIR      : 1;            /*!< [0..0] Transmit Fifo Empty Interrupt Status Before Masking                */
      __IM  uint32_t TXOIR      : 1;            /*!< [1..1] Transmit Fifo Overflow Interrupt Status Before Masking             */
      __IM  uint32_t RXUIR      : 1;            /*!< [2..2] Receive Fifo Underflow Interrupt Status Before Masking             */
      __IM  uint32_t RXOIR      : 1;            /*!< [3..3] Receive Fifo Overflow Interrupt Status Before Masking              */
      __IM  uint32_t RXFIR      : 1;            /*!< [4..4] Receive Fifo Full Interrupt Status Before Masking                  */
      __IM  uint32_t FSEIR      : 1;            /*!< [5..5] FIFO Size Error Interrupt Status Before Masking                    */
      __IM  uint32_t WBEIR      : 1;            /*!< [6..6] Write Burst Error Interrupt Status Before Masking                  */
      __IM  uint32_t BYEIR      : 1;            /*!< [7..7] The Byte-enable Error Interrupt Status Before Masking              */
      __IM  uint32_t ACEIR      : 1;            /*!< [8..8] Auto-check Timeout Error Interrupt Status Before Masking           */
      __IM  uint32_t USEIR      : 1;            /*!< [9..9] User_mode Error Status Interrupt Status Before Masking             */
      __IM  uint32_t TFSIR      : 1;            /*!< [10..10] Transmit Finish Status Interrupt Status Before Masking           */
      __IM  uint32_t ACSIR      : 1;            /*!< [11..11] Auto-check Flash Status Raw Interrupt Status Before
                                                     Masking                                                                   */
      __IM  uint32_t DREIR      : 1;            /*!< [12..12] Dr Timeout Error Interrupt Status Before Masking                 */
            uint32_t            : 19;
    } RISR_b;
  } ;
  __IOM uint32_t  TXOICR;                       /*!< (@ 0x00000038) TRANSMIT FIFO OVERFLOW INTERRUPT CLEAR REGISTER            */
  __IOM uint32_t  RXOICR;                       /*!< (@ 0x0000003C) RECEIVE FIFO OVERFLOW INTERRUPT CLEAR REGISTER             */
  __IOM uint32_t  RXUICR;                       /*!< (@ 0x00000040) RECEIVE FIFO UNDERFLOW INTERRUPT CLEAR REGISTER            */
  __IOM uint32_t  MSTICR;                       /*!< (@ 0x00000044) MASTER ERROR INTERRUPT CLEAR REGISTER                      */
  __IOM uint32_t  ICR;                          /*!< (@ 0x00000048) INTERRUPT CLEAR REGISTER                                   */
  
  union {
    __IOM uint32_t DMACR;                       /*!< (@ 0x0000004C) DMA CONTROL REGISTER                                       */
    
    struct {
      __IOM uint32_t RXDMACEN   : 1;            /*!< [0..0] Receive DMA Enable                                                 */
      __IOM uint32_t TXDMACEN   : 1;            /*!< [1..1] Transmit DMA Enable                                                */
            uint32_t            : 30;
    } DMACR_b;
  } ;
  __IOM uint32_t  DMATDLR;                      /*!< (@ 0x00000050) DMA TRANSMIT DATA LEVEL REGISTER                           */
  __IOM uint32_t  DMARDLR;                      /*!< (@ 0x00000054) DMA RECEIVE DATA LEVEL REGISTER                            */
  __IOM uint32_t  IDR;                          /*!< (@ 0x00000058) IDENTIFICATION REGISTER                                    */
  __IOM uint32_t  VERSION;                      /*!< (@ 0x0000005C) SPIC VERSION ID REGISTER                                   */
  
  union {
    __IOM uint8_t BYTE_DR[15];                  /*!< (@ 0x00000060) DATA REGISTER                                              */
    __IOM uint16_t HALF_DR[15];                 /*!< (@ 0x00000060) DATA REGISTER                                              */
    __IOM uint32_t WORD_DR[15];                 /*!< (@ 0x00000060) DATA REGISTER                                              */
  };
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  DMDR[15];                     /*!< (@ 0x000000A0) Data MASK Register                                         */
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t READFASTSINGLE;              /*!< (@ 0x000000E0) FAST READ DATA COMMAND OF SPI FLASH IN AUTO MODE           */
    
    struct {
      __IOM uint32_t FIRBYTE    : 8;            /*!< [7..0] For RD_OCTA_IO_CMD_1st_BYTE                                        */
      __IOM uint32_t SECBYTE    : 8;            /*!< [15..8] For RD_OCTA_IO_CMD_2nd_BYTE                                       */
            uint32_t            : 16;
    } READFASTSINGLE_b;
  } ;
  
  union {
    __IOM uint32_t READDUALDATA;                /*!< (@ 0x000000E4) DUAL OUTPUT READ COMMAND OF SPI FLASH IN AUTO
                                                                    MODE                                                       */
    
    struct {
      __IOM uint32_t CMD        : 8;            /*!< [7..0] Indicate SPI Flash Command Value Of Dual Data Read Command         */
            uint32_t            : 24;
    } READDUALDATA_b;
  } ;
  
  union {
    __IOM uint32_t READDUALADDRDATA;            /*!< (@ 0x000000E8) DUAL I/O READ COMMAND OF SPI FLASH IN AUTO MODE            */
    
    struct {
      __IOM uint32_t CMD        : 8;            /*!< [7..0] Indicate SPI Flash command value of dual address and
                                                     data read command                                                         */
            uint32_t            : 24;
    } READDUALADDRDATA_b;
  } ;
  
  union {
    __IOM uint32_t READQUADDATA;                /*!< (@ 0x000000EC) QAUD OUTPUT READ COMMAND OF SPI FLASH IN AUTO
                                                                    MODE                                                       */
    
    struct {
      __IOM uint32_t CMD        : 8;            /*!< [7..0] Indicate SPI Flash Command Value Of Quad Data Read Command         */
            uint32_t            : 24;
    } READQUADDATA_b;
  } ;
  
  union {
    __IOM uint32_t READQUADADDRDATA;            /*!< (@ 0x000000F0) QUAD I/O READ COMMAND OF SPI FLASH IN AUTO MODE            */
    
    struct {
      __IOM uint32_t CMD        : 8;            /*!< [7..0] Indicate SPI Flash Command Value Of Quad Address And
                                                     Data Read Command                                                         */
            uint32_t            : 8;
      __IOM uint32_t PRM        : 8;            /*!< [23..16] High Performance Read Mode Value                                 */
            uint32_t            : 8;
    } READQUADADDRDATA_b;
  } ;
  
  union {
    __IOM uint32_t WRITESIGNLE;                 /*!< (@ 0x000000F4) PAGE PROGRAM COMMAND OF SPI FLASH IN AUTO MODE             */
    
    struct {
      __IOM uint32_t FIRBYTE    : 8;            /*!< [7..0] For WR_OCTA_IO_CMD_1st_BYTE                                        */
      __IOM uint32_t SECBYTE    : 8;            /*!< [15..8] For WR_OCTA_IO_CMD_2nd_BYTE                                       */
            uint32_t            : 16;
    } WRITESIGNLE_b;
  } ;
  
  union {
    __IOM uint32_t WRITEDUALDATA;               /*!< (@ 0x000000F8) DUAL DATA INPUT PROGRAM COMMAND OF SPI FLASH
                                                                    IN AUTO MODE                                               */
    
    struct {
      __IOM uint32_t CMD        : 8;            /*!< [7..0] Indicate SPI Flash Command Value Of Dual Data Write Command        */
            uint32_t            : 24;
    } WRITEDUALDATA_b;
  } ;
  
  union {
    __IOM uint32_t WRITEDUALADDRDATA;           /*!< (@ 0x000000FC) DUAL ADDRESS AND DATA OUTPUT READ COMMAND OF
                                                                    SPI FLASH IN AUTO MODE                                     */
    
    struct {
      __IOM uint32_t CMD        : 8;            /*!< [7..0] Indicate SPI Flash Command Value Of Dual Address And
                                                     Data Write Command                                                        */
            uint32_t            : 24;
    } WRITEDUALADDRDATA_b;
  } ;
  
  union {
    __IOM uint32_t WRITEQUADDATA;               /*!< (@ 0x00000100) QUAD DATA INPUT PROGRAM COMMAND OF SPI FLASH
                                                                    IN AUTO MODE                                               */
    
    struct {
      __IOM uint32_t CMD        : 8;            /*!< [7..0] Indicate SPI Flash Command Value Of Quad Data Write Command        */
            uint32_t            : 24;
    } WRITEQUADDATA_b;
  } ;
  
  union {
    __IOM uint32_t WRITEQUADADDRDATA;           /*!< (@ 0x00000104) QUAD ADDRESS AND DATA OUTPUT WRITE COMMAND OF
                                                                    SPI FLASH IN AUTO MODE                                     */
    
    struct {
      __IOM uint32_t CMD        : 8;            /*!< [7..0] Indicate SPI Flash Command Value Of Quad Address And
                                                     Data Write Command                                                        */
            uint32_t            : 24;
    } WRITEQUADADDRDATA_b;
  } ;
  
  union {
    __IOM uint32_t WRITEENABLE;                 /*!< (@ 0x00000108) WRITE ENABLE COMMAND OF SPI FLASH IN AUTO MODE             */
    
    struct {
      __IOM uint32_t FIRBYTE    : 8;            /*!< [7..0] Indicate SPI Flash Command Value Of 1st Byte Of Write
                                                     Enable                                                                    */
      __IOM uint32_t SECBYTE    : 8;            /*!< [15..8] Indicate SPI Flash Command Value Of 2nd Byte Of Write
                                                     Enable                                                                    */
            uint32_t            : 16;
    } WRITEENABLE_b;
  } ;
  
  union {
    __IOM uint32_t READSTATUS;                  /*!< (@ 0x0000010C) READ STATUS COMMAND OF SPI FLASH IN AUTO MODE              */
    
    struct {
      __IOM uint32_t FIRBYTE    : 8;            /*!< [7..0] Indicate SPI Flash Command Value Of 1st Byte Of Read
                                                     Status                                                                    */
      __IOM uint32_t SECBYTE    : 8;            /*!< [15..8] Indicate SPI Flash Command Value Of 2nd Byte Of Read
                                                     Status                                                                    */
            uint32_t            : 11;
      __IOM uint32_t INTERVALEN : 1;            /*!< [27..27] Indicate SPI Flash Read Status With 2-byte Status But
                                                     Checking Only Odd Byte Or Even Byte                                       */
      __IOM uint32_t ADDRSEL    : 1;            /*!< [28..28] Indicate SPI Flash Read Status With Address And Address
                                                     Value                                                                     */
      __IOM uint32_t ADDRLEN    : 2;            /*!< [30..29] Indicate SPI Flash Read Status With Address And Address
                                                     Length                                                                    */
      __IOM uint32_t ADDREN     : 1;            /*!< [31..31] Indicate SPI Flash Read Status With The Address                  */
    } READSTATUS_b;
  } ;
  
  union {
    __IOM uint32_t CTRL1;                       /*!< (@ 0x00000110) CONTROL #1 REGISTER                                        */
    
    struct {
      __IOM uint32_t SODNUM     : 1;            /*!< [0..0] Indicate So Input Pin Is Connected To Sout[0] Or [1]               */
      __IOM uint32_t WPNSET     : 1;            /*!< [1..1] To Implement Write Protect Function                                */
      __IOM uint32_t WPNDNUM    : 1;            /*!< [2..2] Indicate The Wpn Input Pin Is Connected To Out[2]or [3]            */
      __IOM uint32_t DRFIXED    : 1;            /*!< [3..3] Indicate the AXI FIXED Read Mode on DR                             */
      __IOM uint32_t TXFIFOENTRY : 4;           /*!< [7..4] Indicates The Valid Entry Of TX FIFO                               */
      __IOM uint32_t RXFIFOENTRY : 4;           /*!< [11..8] Indicates The Valid Entry Of RX FIFO                              */
      __IOM uint32_t DMACT      : 1;            /*!< [12..12] DM (Data Mask) is Active High Or Low                             */
      __IOM uint32_t FULLWR     : 1;            /*!< [13..13] Set To Enable Full Write In Both User Mode And Auto
                                                     Mode                                                                      */
      __IOM uint32_t DISDMCA    : 1;            /*!< [14..14] Set To Disable Spi_dm_oe_n (Let The Device To Drive
                                                     Dm) When Spic Pushing Cmd And Addr For Both User Mode And
                                                     Auto Mode                                                                 */
      __IOM uint32_t DISWRAPALIGN : 1;          /*!< [15..15] Set To Disable Wrap_align Function In Auto Mode                  */
      __IOM uint32_t RDVALIDEN  : 1;            /*!< [16..16] Set To Enable Variable Read Latency                              */
      __IOM uint32_t WRVLEN     : 1;            /*!< [17..17] Set To Enable Variable Write Latency                             */
            uint32_t            : 1;
      __IOM uint32_t RDWEIGHT   : 5;            /*!< [23..19] Set To Determine The Read And Write Priority                     */
            uint32_t            : 8;
    } CTRL1_b;
  } ;
  
  union {
    __IOM uint32_t FBAUDR;                      /*!< (@ 0x00000114) FAST BAUD RATE SELECT                                      */
    
    struct {
      __IOM uint32_t FSCKDV     : 12;           /*!< [11..0] Indicate The Divider Of Fast Read Command When Fast_rd
                                                     Is Setting In User Mode Or Using Fast Read Command In Auto
                                                     Mode                                                                      */
            uint32_t            : 20;
    } FBAUDR_b;
  } ;
  
  union {
    __IOM uint32_t USERLENGTH;                  /*!< (@ 0x00000118) DECIDES BYTE NUMBERS OF COMMAND, ADDRESS AND
                                                                    DATA PHASE TO TRANSMIT                                     */
    
    struct {
      __IOM uint32_t RDDUMMYLEN : 12;           /*!< [11..0] Indicate Delay Cycles For Receiving Data In User Mode             */
      __IOM uint32_t CMDLEN     : 2;            /*!< [13..12] Indicate Number Of Bytes In Command Phase In User Mode           */
            uint32_t            : 2;
      __IOM uint32_t ADDRLEN    : 4;            /*!< [19..16] Indicate Number Of Bytes In Address Phase In User Mode           */
            uint32_t            : 12;
    } USERLENGTH_b;
  } ;
  
  union {
    __IOM uint32_t AUTOLENGTH;                  /*!< (@ 0x0000011C) AUTO ADDRESS LENGTH REGISTER                               */
    
    struct {
      __IOM uint32_t RDDUMMYLEN : 12;           /*!< [11..0] Indicate Delay Cycles For Receiving Data. It Is Referenced
                                                     By bus_clk                                                                */
      __IOM uint32_t INPHYSICALCYC : 4;         /*!< [15..12] Indicate Number Of Bytes Address In Read/write Command
                                                     In Auto Mode                                                              */
      __IOM uint32_t AUTOADDRLEN : 4;           /*!< [19..16] Indicate Number Of Bytes Address In Read/write Command
                                                     In Auto Mode                                                              */
      __IOM uint32_t RDSRDUMMYLEN : 8;          /*!< [27..20] Indicate Delay Cycles For Receiving Data After Read
                                                     Status Register (RDSR) Command                                            */
            uint32_t            : 4;
    } AUTOLENGTH_b;
  } ;
  
  union {
    __IOM uint32_t VALIDCMD;                    /*!< (@ 0x00000120) VALID COMMAND REGISTER                                     */
    
    struct {
      __IOM uint32_t FRDSINGLE  : 1;            /*!< [0..0] Indicate Fast Read Command Is a Valid Command To Execute           */
      __IOM uint32_t RDDUALI    : 1;            /*!< [1..1] Indicate Dual Data Read Is a Valid Command To Execute              */
      __IOM uint32_t RDDUALIO   : 1;            /*!< [2..2] Indicate Dual Address/data Read Is a Valid Command To
                                                     Execute                                                                   */
      __IOM uint32_t RDQUADO    : 1;            /*!< [3..3] Indicate Quad Data Read Is a Valid Command To Execute              */
      __IOM uint32_t RDQUADIO   : 1;            /*!< [4..4] Indicate Quad Address/data Read Is a Valid Command To
                                                     Execute                                                                   */
      __IOM uint32_t WRDUALI    : 1;            /*!< [5..5] Indicate Dual Data Write Is A Valid Command To Execute             */
      __IOM uint32_t WRDUALIO   : 1;            /*!< [6..6] Indicate Dual Address/data Write Is A Valid Command To
                                                     Execute                                                                   */
      __IOM uint32_t WRQUADO    : 1;            /*!< [7..7] Indicate Quad Data Write Is a Valid Command To Execute             */
      __IOM uint32_t WRQUADIO   : 1;            /*!< [8..8] Indicate Quad Address/data Write Is A Valid Command To
                                                     Execute                                                                   */
      __IOM uint32_t WRBLOCK    : 1;            /*!< [9..9] Write Blocking                                                     */
            uint32_t            : 1;
      __IOM uint32_t PRMEN      : 1;            /*!< [11..11] Set to Enable SPIC Performance Read Mode In Auto Mode            */
      __IOM uint32_t CTRLR0CH   : 1;            /*!< [12..12] Use CTRLR0 CMD_CH/DATA_CH/ADDR_CH and DDR_EN Field
                                                     In Auto Mode                                                              */
      __IOM uint32_t DUMEN      : 1;            /*!< [13..13] Enable To Push One Dummy Byte After Pushing Address
                                                     To Flash In Auto Read                                                     */
            uint32_t            : 2;
      __IOM uint32_t SEQTRANSDIS : 1;           /*!< [16..16] Set 1 to Disable Sequential Read And Sequential Write
                                                     Function In Auto Mode                                                     */
            uint32_t            : 15;
    } VALIDCMD_b;
  } ;
  
  union {
    __IOM uint32_t FLASESIZE;                   /*!< (@ 0x00000124) FLASH SIZE REGISTER                                        */
    
    struct {
      __IOM uint32_t SIZE       : 5;            /*!< [4..0] Indicate The Size Of Flash Size To Select The Target
                                                     SPI Flash In Auto Mode                                                    */
            uint32_t            : 27;
    } FLASESIZE_b;
  } ;
  
  union {
    __IOM uint32_t FLUSH;                       /*!< (@ 0x00000128) FLUSH FIFO REGISTER                                        */
    
    struct {
      __IOM uint32_t ALL        : 1;            /*!< [0..0] Clear All Data In All FIFO (Include TX_FIFO, RX_FIFO
                                                     and ST_FIFO)                                                              */
      __IOM uint32_t DRFIFO     : 1;            /*!< [1..1] Clear All Data in the TX_FIFO and RX_FIFO                          */
      __IOM uint32_t STFIFO     : 1;            /*!< [2..2] Clear All Data in the ST_FIFO                                      */
            uint32_t            : 29;
    } FLUSH_b;
  } ;
  
  union {
    __IOM uint32_t DUMBYTE;                     /*!< (@ 0x0000012C) CONFIGURE DUMMY BYTE                                       */
    
    struct {
      __IOM uint32_t VAL        : 8;            /*!< [7..0] Push Dummy Byte Value                                              */
            uint32_t            : 24;
    } DUMBYTE_b;
  } ;
  __IOM uint32_t  TXNDF;                        /*!< (@ 0x00000130) COUNT A NUMBER OF DATA FRAMES OF TX DATA IN USER
                                                                    MODE                                                       */
  __IOM uint32_t  DEVINFO;                      /*!< (@ 0x00000134) CONFIGURE THE SPI DEVICE INFORMATION                       */
  __IOM uint32_t  TPR0;                         /*!< (@ 0x00000138) TIMING PARAMETERS OF SPI DEVICES                           */
  __IOM uint32_t  AUTOLEN2;                     /*!< (@ 0x0000013C) THE DELAY CYCLES TO TRANSMIT DATA IN AUTO MODE             */
  __IOM uint32_t  TPR1;                         /*!< (@ 0x00000140) TIMING PARMETERS OF SPI DEVICE                             */
  __IM  uint32_t  RESERVED3[31];
  __IOM uint32_t  STFLR;                        /*!< (@ 0x000001C0) NUMBER OF VALID DATA ENTRIES IN STATUS DATA                */
  __IM  uint32_t  RESERVED4[3];
  __IOM uint32_t  PAGEREAD;                     /*!< (@ 0x000001D0) CONFIGURE THE PAGE READ COMMAND IN AUTO MODE               */
} SPIC_Type;                                    /*!< Size = 468 (0x1d4)                                                        */



/* =========================================================================================================================== */
/* ================                                           MSPI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI Master Controller (MSPI)
  */

typedef struct {                                /*!< (@ 0x40010400) MSPI Structure                                             */
  
  union {
    __IOM uint32_t CMDL;                        /*!< (@ 0x00000000) COMMAND REGISTER LOW                                       */
    
    struct {
      __IOM uint32_t CMD0       : 8;            /*!< [7..0] Commmnd0                                                           */
      __IOM uint32_t CMD1       : 8;            /*!< [15..8] Commmnd1                                                          */
      __IOM uint32_t CMD2       : 8;            /*!< [23..16] Commmnd2                                                         */
      __IOM uint32_t CMD3       : 8;            /*!< [31..24] Commmnd3                                                         */
    } CMDL_b;
  } ;
  
  union {
    __IOM uint32_t CMDH;                        /*!< (@ 0x00000004) COMMAND REGISTER LOW                                       */
    
    struct {
      __IOM uint32_t CMD4       : 8;            /*!< [7..0] Commmnd4                                                           */
            uint32_t            : 24;
    } CMDH_b;
  } ;
  
  union {
    __IOM uint32_t CMDNUM;                      /*!< (@ 0x00000008) COMMAND NUMBER REGISTER                                    */
    
    struct {
      __IOM uint32_t NUM        : 6;            /*!< [5..0] The Bit Number Of Command To Be Transferred To SPI Device          */
            uint32_t            : 26;
    } CMDNUM_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t ADDR;                        /*!< (@ 0x00000010) ADDRESS REGISTER                                           */
    
    struct {
      __IOM uint32_t ADDR0      : 8;            /*!< [7..0] Address0                                                           */
      __IOM uint32_t ADDR1      : 8;            /*!< [15..8] Address1                                                          */
      __IOM uint32_t ADDR2      : 8;            /*!< [23..16] Address2                                                         */
            uint32_t            : 8;
    } ADDR_b;
  } ;
  
  union {
    __IOM uint32_t ADDRNUM;                     /*!< (@ 0x00000014) ADDRESS NUMBER REGISTER                                    */
    
    struct {
      __IOM uint32_t NUM        : 5;            /*!< [4..0] The Bit Number Of Address To Be Transferred To SPI Device          */
            uint32_t            : 27;
    } ADDRNUM_b;
  } ;
  
  union {
    __IOM uint32_t TRLEN;                       /*!< (@ 0x00000018) TRANSFER LENGTH REGISTER                                   */
    
    struct {
      __IOM uint32_t LEN        : 9;            /*!< [8..0] The Length Of Data To Be Transferred                               */
            uint32_t            : 23;
    } TRLEN_b;
  } ;
  
  union {
    __IOM uint32_t TRCTRL;                      /*!< (@ 0x0000001C) TRANSFER CONTROL REGISTER                                  */
    
    struct {
      __IOM uint32_t MODE       : 4;            /*!< [3..0] Transfer Mode For Auto-mode                                        */
      __IM  uint32_t TXOVF      : 1;            /*!< [4..4] SPI Mater Write Overflow Flag                                      */
      __IM  uint32_t RXOVF      : 1;            /*!< [5..5] SPI Mater Read Overflow Flag                                       */
      __IM  uint32_t END        : 1;            /*!< [6..6] If Transfer Starts This Bit Will Be Clear Automatically
                                                     By Hardware                                                               */
      __IOM uint32_t START      : 1;            /*!< [7..7] The Transfer Is Launch If Set This Bit                             */
            uint32_t            : 24;
    } TRCTRL_b;
  } ;
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000020) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t RST        : 1;            /*!< [0..0] Reset SPI Matser Controller                                        */
      __IOM uint32_t TRANSEL    : 1;            /*!< [1..1] Transfer Mode Selection                                            */
      __IOM uint32_t MODE       : 2;            /*!< [3..2] SPI Mode Selection                                                 */
            uint32_t            : 1;
      __IOM uint32_t LSBFST     : 1;            /*!< [5..5] Data Transmission Order At Si And So Line                          */
      __IOM uint32_t CSPOR      : 1;            /*!< [6..6] This Field Indicates The Polarity Of CSLine In Idle State          */
      __IOM uint32_t SEL        : 1;            /*!< [7..7] This Bit Is Used To Switch SPI And Gpio Signal                     */
            uint32_t            : 24;
    } CTRL_b;
  } ;
  
  union {
    __IOM uint32_t CFG;                         /*!< (@ 0x00000024) TIMING CONTROL REGISTER                                    */
    
    struct {
      __IOM uint32_t EDO        : 2;            /*!< [1..0] EDO timing                                                         */
      __IOM uint32_t TCS        : 2;            /*!< [3..2] Timing for CS setup and hold requirement                           */
            uint32_t            : 1;
      __IOM uint32_t DUMMYBIT   : 3;            /*!< [7..5] Number of dummy bit                                                */
            uint32_t            : 24;
    } CFG_b;
  } ;
  
  union {
    __IOM uint32_t CLKDIV;                      /*!< (@ 0x00000028) CLOCK DIVIDER REGISTER                                     */
    
    struct {
      __IOM uint32_t DIV0       : 8;            /*!< [7..0] SPI Master Clock Divider 0                                         */
      __IOM uint32_t DIV1       : 8;            /*!< [15..8] SPI Master Clock Divider 1                                        */
            uint32_t            : 16;
    } CLKDIV_b;
  } ;
  
  union {
    __IM  uint32_t FIFOSTS;                     /*!< (@ 0x0000002C) FIFO STATUS REGISTER                                       */
    
    struct {
      __IM  uint32_t RXFULL     : 1;            /*!< [0..0] SPI Master RX FIFO is Full                                         */
      __IM  uint32_t TXFULL     : 1;            /*!< [1..1] SPI Master TX FIFO is full                                         */
            uint32_t            : 30;
    } FIFOSTS_b;
  } ;
  
  union {
    __IOM uint32_t SIGNAL;                      /*!< (@ 0x00000030) SIGNAL REGISTER                                            */
    
    struct {
      __IM  uint32_t MISO       : 1;            /*!< [0..0] MISO                                                               */
      __IOM uint32_t MOSI       : 1;            /*!< [1..1] MOSI                                                               */
      __IOM uint32_t CLK        : 1;            /*!< [2..2] Clock                                                              */
      __IOM uint32_t CS         : 1;            /*!< [3..3] CS                                                                 */
            uint32_t            : 28;
    } SIGNAL_b;
  } ;
  
  union {
    __IOM uint32_t TX;                          /*!< (@ 0x00000034) TX FIFO REGISTER                                           */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] Tx data                                                            */
            uint32_t            : 24;
    } TX_b;
  } ;
  
  union {
    __IM  uint32_t RX;                          /*!< (@ 0x00000038) RX FIFO REGISTER                                           */
    
    struct {
      __IM  uint32_t DATA       : 8;            /*!< [7..0] Rx data                                                            */
            uint32_t            : 24;
    } RX_b;
  } ;
} MSPI_Type;                                    /*!< Size = 60 (0x3c)                                                          */



/* =========================================================================================================================== */
/* ================                                          SPISLV                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief SPI Slave Controller (SPISLV)
  */

typedef struct {                                /*!< (@ 0x40010500) SPISLV Structure                                           */
  __IOM uint32_t  RXSTRADDR;                    /*!< (@ 0x00000000) RX START ADDRESS REGISTER                                  */
  __IOM uint32_t  RXENDADDR;                    /*!< (@ 0x00000004) RX END ADDRESS REGISTER                                    */
  
  union {
    __IOM uint32_t RXCFG;                       /*!< (@ 0x00000008) RX CONTROL REGISTER                                        */
    
    struct {
      __IOM uint32_t RSTRXADDR  : 1;            /*!< [0..0] Set Start Address Into Raw-mode Next Address                       */
      __IOM uint32_t BPSCACH    : 2;            /*!< [2..1] Debug Use Only                                                     */
      __IOM uint32_t AUTOPAUSE  : 1;            /*!< [3..3] Disable Auto-pause Function                                        */
      __IOM uint32_t CLRFIFOABNINT : 1;         /*!< [4..4] Clear FIFO Abnormal Interrupt Flag                                 */
      __IOM uint32_t CLRRXOGINT : 1;            /*!< [5..5] Clear data ongoing interrupt flag                                  */
      __IOM uint32_t CLRRXDONE  : 1;            /*!< [6..6] Clear data transfer done interrupt flag                            */
      __IOM uint32_t CLRHSABNINT : 1;           /*!< [7..7] Clear buffer handshake abnormal interrupt flag                     */
      __IOM uint32_t DISFIFOABNINT : 1;         /*!< [8..8] Enable/disable FIFO abnormal interrupt                             */
      __IOM uint32_t DISRXOGINT : 1;            /*!< [9..9] Enable/disable Data Ongoing Interrupt                              */
      __IOM uint32_t DISRXDONE  : 1;            /*!< [10..10] Enable/disable Data Transfer Done Interrupt                      */
      __IOM uint32_t DISHSABNINT : 1;           /*!< [11..11] Enable/disable Buffer Handshake Abnormal Interrupt               */
      __IOM uint32_t DATCNT     : 4;            /*!< [15..12] Every DATTHS^2 byte will trigger data goinh interrupt            */
      __IOM uint32_t RXTO       : 16;           /*!< [31..16] Time-out Of Rx Cache                                             */
    } RXCFG_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IM  uint32_t RXSTS;                       /*!< (@ 0x00000010) RX INTERRUPT STATUS REGISTER                               */
    
    struct {
            uint32_t            : 4;
      __IM  uint32_t FIFOABNINT : 1;            /*!< [4..4] FIFO abnormal interrupt flag                                       */
      __IM  uint32_t RXOGINT    : 1;            /*!< [5..5] Data Ongoing Interrupt Flag                                        */
      __IM  uint32_t RXDONE     : 1;            /*!< [6..6] Data Transfer Done Interrupt Flag                                  */
      __IM  uint32_t ABNINT     : 1;            /*!< [7..7] Buffer Handshake Abnormal Interrupt Flag                           */
            uint32_t            : 24;
    } RXSTS_b;
  } ;
  __IM  uint32_t  RXCURRADDR;                   /*!< (@ 0x00000014) CURRENT RX ADDRESS REGISTER                                */
  __IM  uint32_t  RESERVED1[2];
  __IOM uint32_t  TXSTRADDR;                    /*!< (@ 0x00000020) TX START ADDRESS REGISTER                                  */
  __IOM uint32_t  TXENDADDR;                    /*!< (@ 0x00000024) TX END ADDRESS REGISTER                                    */
  
  union {
    __IOM uint32_t TXCFG;                       /*!< (@ 0x00000028) TX CONTROL REGISTER                                        */
    
    struct {
      __IOM uint32_t RSTTXADDR  : 1;            /*!< [0..0] Set Start Address Into Raw-mode Next Address                       */
            uint32_t            : 2;
      __IOM uint32_t DISATPS    : 1;            /*!< [3..3] Disable Auto-pause Function                                        */
      __IOM uint32_t CLRFIFOABNINT : 1;         /*!< [4..4] Clear Fifo Abnormal Interrupt Flag                                 */
      __IOM uint32_t CLRTXGOINT : 1;            /*!< [5..5] Clear Data Ongoing Interrupt Flag                                  */
      __IOM uint32_t CLRTXDONE  : 1;            /*!< [6..6] Clear Data Transfer Done Interrupt Flag                            */
      __IOM uint32_t CLRHSABNINT : 1;           /*!< [7..7] Clear buffer handshake abnormal interrupt flag                     */
      __IOM uint32_t DISFIFOABNINT : 1;         /*!< [8..8] Enable/disable FIFO Abnormal Interrupt                             */
      __IOM uint32_t DISTXOGINT : 1;            /*!< [9..9] Enable/disable Data Ongoing Interrupt                              */
      __IOM uint32_t DISTXDONE  : 1;            /*!< [10..10] Enable/disable Data Transfer Done Interrupt                      */
      __IOM uint32_t DISHSABNINT : 1;           /*!< [11..11] Enable/disable Buffer Handshake Abnormal Interrupt               */
      __IOM uint32_t DATCNT     : 4;            /*!< [15..12] Every DATTHS^2 byte will trigger data goinh interrupt            */
      __IOM uint32_t TXTO       : 16;           /*!< [31..16] Time-out of TX Cache                                             */
    } TXCFG_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IM  uint32_t TXSTS;                       /*!< (@ 0x00000030) TX INTERRUPT STATUS REGISTER                               */
    
    struct {
            uint32_t            : 4;
      __IM  uint32_t FIFOABNINT : 1;            /*!< [4..4] FIFO Abnormal Interrupt Flag                                       */
      __IM  uint32_t TXOGINT    : 1;            /*!< [5..5] Data Ongoing Interrupt Flag                                        */
      __IM  uint32_t TXDONE     : 1;            /*!< [6..6] Data Transfer Done Interrupt Flag                                  */
      __IM  uint32_t HSABNINT   : 1;            /*!< [7..7] Buffer Handshake Abnormal Interrupt Flag                           */
            uint32_t            : 24;
    } TXSTS_b;
  } ;
  __IM  uint32_t  TXCURRADDR;                   /*!< (@ 0x00000034) CURRENT TX ADDRESS REGISTER                                */
  __IM  uint32_t  RESERVED3[10];
  
  union {
    __IOM uint32_t DUPLEXCTRL;                  /*!< (@ 0x00000060) DUPLEX SETTING CONTROL REGISTER                            */
    
    struct {
      __IOM uint32_t RXEN       : 1;            /*!< [0..0] Enable/disable RX Function                                         */
      __IOM uint32_t TXEN       : 1;            /*!< [1..1] Enable/disable TX function                                         */
            uint32_t            : 2;
      __IOM uint32_t ENRXFIFOABNINT : 1;        /*!< [4..4] Enable/disable RX FIFO Abnormal Interrupt                          */
      __IOM uint32_t ENRXOGINT  : 1;            /*!< [5..5] Enable/disable RX Data Ongoing Interrupt                           */
      __IOM uint32_t ENRXDONE   : 1;            /*!< [6..6] Enable/disable Rx Data Transfer Done Interrupt                     */
      __IOM uint32_t ENHSABNRXINT : 1;          /*!< [7..7] Enable/disable Rx Buffer Handshake Abnormal Interrupt              */
      __IOM uint32_t ENTXFIFOABNINT : 1;        /*!< [8..8] Enable/disable TX FIFO Abnormal Interrupt                          */
      __IOM uint32_t ENTXOGINT  : 1;            /*!< [9..9] Enable/disable TX Data Ongoing Interrupt                           */
      __IOM uint32_t ENTXDONE   : 1;            /*!< [10..10] Enable/disable TX Data Transfer Done Interrupt                   */
      __IOM uint32_t ENHSABNTXINT : 1;          /*!< [11..11] Enable/disable Tx Buffer Handshake Abnormal Interrupt            */
      __IOM uint32_t MDSEL      : 2;            /*!< [13..12] Firmware-controlled Switch Of Command Mode Raw-data
                                                     Amode                                                                     */
      __IOM uint32_t RXDUMLEN   : 3;            /*!< [16..14] Control RX Dummy Byte Count                                      */
      __IOM uint32_t TXDUMLEN   : 3;            /*!< [19..17] Control TX Dummy Byte Count                                      */
      __IOM uint32_t DISSPDURX  : 1;            /*!< [20..20] Control RX 4-phase Handshake                                     */
      __IOM uint32_t DISSPDUTX  : 1;            /*!< [21..21] Control TX 4-phase Handshake                                     */
            uint32_t            : 10;
    } DUPLEXCTRL_b;
  } ;
} SPISLV_Type;                                  /*!< Size = 100 (0x64)                                                         */



/* =========================================================================================================================== */
/* ================                                            PUF                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief PUF Controller (PUF)
  */

typedef struct {                                /*!< (@ 0x40010800) PUF Structure                                              */
  __IOM uint32_t  OTP[256];                     /*!< (@ 0x00000000) OTP BLOCK                                                  */
  __IOM uint32_t  PUF[64];                      /*!< (@ 0x00000400) PUF BLOCK                                                  */
  __IM  uint32_t  RESERVED[12];
  __IOM uint32_t  PUFZEROIZED;                  /*!< (@ 0x00000530) PUF ZEROIZATION REGISTER                                   */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  OTPZEROIZED0;                 /*!< (@ 0x00000538) OTP ZEROIZATION REGISTER                                   */
  __IOM uint32_t  OTPZEROIZED1;                 /*!< (@ 0x0000053C) OTP ZEROIZATION REGISTER                                   */
  __IM  uint32_t  RESERVED2[12];
  __IOM uint32_t  PUFLOCK0;                     /*!< (@ 0x00000570) PUF LOCK REGISTER                                          */
  __IOM uint32_t  PUFLOCK1;                     /*!< (@ 0x00000574) PUF LOCK REGISTER                                          */
  __IOM uint32_t  PUFLOCK2;                     /*!< (@ 0x00000578) PUF LOCK REGISTER                                          */
  __IOM uint32_t  PUFLOCK3;                     /*!< (@ 0x0000057C) PUF LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK0;                     /*!< (@ 0x00000580) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK1;                     /*!< (@ 0x00000584) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK2;                     /*!< (@ 0x00000588) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK3;                     /*!< (@ 0x0000058C) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK4;                     /*!< (@ 0x00000590) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK5;                     /*!< (@ 0x00000594) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK6;                     /*!< (@ 0x00000598) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK7;                     /*!< (@ 0x0000059C) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK8;                     /*!< (@ 0x000005A0) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK9;                     /*!< (@ 0x000005A4) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK10;                    /*!< (@ 0x000005A8) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK11;                    /*!< (@ 0x000005AC) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK12;                    /*!< (@ 0x000005B0) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK13;                    /*!< (@ 0x000005B4) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK14;                    /*!< (@ 0x000005B8) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK15;                    /*!< (@ 0x000005BC) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK16;                    /*!< (@ 0x000005C0) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK17;                    /*!< (@ 0x000005C4) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK18;                    /*!< (@ 0x000005C8) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK19;                    /*!< (@ 0x000005CC) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK20;                    /*!< (@ 0x000005D0) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK21;                    /*!< (@ 0x000005D4) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK22;                    /*!< (@ 0x000005D8) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK23;                    /*!< (@ 0x000005DC) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK24;                    /*!< (@ 0x000005E0) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK25;                    /*!< (@ 0x000005E4) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK26;                    /*!< (@ 0x000005E8) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK27;                    /*!< (@ 0x000005EC) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK28;                    /*!< (@ 0x000005F0) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK29;                    /*!< (@ 0x000005F4) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK30;                    /*!< (@ 0x000005F8) OTP LOCK REGISTER                                          */
  __IOM uint32_t  OTPLOCK31;                    /*!< (@ 0x000005FC) OTP LOCK REGISTER                                          */
  __IM  uint32_t  RESERVED3[8];
  
  union {
    __IOM uint32_t TRNGOP;                      /*!< (@ 0x00000620) TRNG OPERATION REGISTER                                    */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable TRNG Function                                               */
            uint32_t            : 31;
    } TRNGOP_b;
  } ;
  __IM  uint32_t  RESERVED4[19];
  __IOM uint32_t  TRNGDATA;                     /*!< (@ 0x00000670) TRNG DATA OUTPUT REGISTER                                  */
  __IM  uint32_t  RESERVED5[11];
  
  union {
    __IOM uint32_t STS;                         /*!< (@ 0x000006A0) PUF STATUS REGISTER                                        */
    
    struct {
      __IOM uint32_t BUSY       : 1;            /*!< [0..0] PUF is Busy                                                        */
            uint32_t            : 31;
    } STS_b;
  } ;
  __IM  uint32_t  RESERVED6[17];
  __IOM uint32_t  OTPPOSTMSK0;                  /*!< (@ 0x000006E8) OTP POST MASK REGISTER                                     */
  __IOM uint32_t  OTPPOSTMSK1;                  /*!< (@ 0x000006EC) OTP POST MASK REGISTER                                     */
  __IOM uint32_t  PUFPOSTMSK;                   /*!< (@ 0x000006F0) PUF POST MASK REGISTER                                     */
} PUF_Type;                                     /*!< Size = 1780 (0x6f4)                                                       */



/* =========================================================================================================================== */
/* ================                                          SYSTEM                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief System Controller (SYSTEM)
  */

typedef struct {                                /*!< (@ 0x40020000) SYSTEM Structure                                           */
  
  union {
    union {
      __IOM uint32_t I3CCLKDIV;                 /*!< (@ 0x00000000) I3C CLOCK DIVIDER REGISTER                                 */
      
      struct {
        __IOM uint32_t I3C0DIV  : 2;            /*!< [1..0] I3C0 Clock Divider                                                 */
        __IOM uint32_t I3C1DIV  : 2;            /*!< [3..2] I3C1 Clock Divider                                                 */
              uint32_t          : 28;
      } I3CCLKDIV_b;
    } ;
    
    union {
      __IOM uint32_t TMRRST;                    /*!< (@ 0x00000000) TIMER RESET REGISTER                                       */
      
      struct {
              uint32_t          : 4;
        __IOM uint32_t TMR0RST  : 1;            /*!< [4..4] Reset Timer0, low-active                                           */
        __IOM uint32_t TMR1RST  : 1;            /*!< [5..5] Reset Timer1, low-active                                           */
        __IOM uint32_t TMR2RST  : 1;            /*!< [6..6] Reset Timer2, low-active                                           */
        __IOM uint32_t TMR3RST  : 1;            /*!< [7..7] Reset Timer3, low-active                                           */
        __IOM uint32_t TMR4RST  : 1;            /*!< [8..8] Reset Timer4, low-active                                           */
        __IOM uint32_t TMR5RST  : 1;            /*!< [9..9] Reset Timer5, low-active                                           */
              uint32_t          : 22;
      } TMRRST_b;
    } ;
  };
  
  union {
    __IOM uint32_t I2CCLKPWR;                   /*!< (@ 0x00000004) I2C CLOCK POWER REGISTER                                   */
    
    struct {
      __IOM uint32_t I2C0CLKPWR : 1;            /*!< [0..0] I2C0 Clock Power                                                   */
      __IOM uint32_t I2C0CLKSRC : 1;            /*!< [1..1] I2C0 Clock Source                                                  */
      __IOM uint32_t I2C0CLKDIV : 2;            /*!< [3..2] I2C0 Clock Divider                                                 */
      __IOM uint32_t I2C1CLKPWR : 1;            /*!< [4..4] I2C1 Clock Power                                                   */
      __IOM uint32_t I2C1CLKSRC : 1;            /*!< [5..5] I2C1 Clock Source                                                  */
      __IOM uint32_t I2C1CLKDIV : 2;            /*!< [7..6] I2C1 Clock Divider                                                 */
      __IOM uint32_t I2C2CLKPWR : 1;            /*!< [8..8] I2C2 Clock Power                                                   */
      __IOM uint32_t I2C2CLKSRC : 1;            /*!< [9..9] I2C2 Clock Source                                                  */
      __IOM uint32_t I2C2CLKDIV : 2;            /*!< [11..10] I2C2 Clock Divider                                               */
      __IOM uint32_t I2C3CLKPWR : 1;            /*!< [12..12] I2C3 Clock Power                                                 */
      __IOM uint32_t I2C3CLKSRC : 1;            /*!< [13..13] I2C3 Clock Source                                                */
      __IOM uint32_t I2C3CLKDIV : 2;            /*!< [15..14] I2C3 Clock Divider                                               */
      __IOM uint32_t I2C4CLKPWR : 1;            /*!< [16..16] I2C4 Clock Power                                                 */
      __IOM uint32_t I2C4CLKSRC : 1;            /*!< [17..17] I2C4 Clock Source                                                */
      __IOM uint32_t I2C4CLKDIV : 2;            /*!< [19..18] I2C4 Clock Divider                                               */
      __IOM uint32_t I2C5CLKPWR : 1;            /*!< [20..20] I2C5 Clock Power                                                 */
      __IOM uint32_t I2C5CLKSRC : 1;            /*!< [21..21] I2C5 Clock Source                                                */
      __IOM uint32_t I2C5CLKDIV : 2;            /*!< [23..22] I2C5 Clock Divider                                               */
      __IOM uint32_t I2C6CLKPWR : 1;            /*!< [24..24] I2C6 Clock Power                                                 */
      __IOM uint32_t I2C6CLKSRC : 1;            /*!< [25..25] I2C6 Clock Source                                                */
      __IOM uint32_t I2C6CLKDIV : 2;            /*!< [27..26] I2C6 Clock Divider                                               */
      __IOM uint32_t I2C7CLKPWR : 1;            /*!< [28..28] I2C7 Clock Power                                                 */
      __IOM uint32_t I2C7CLKSRC : 1;            /*!< [29..29] I2C7 Clock Source                                                */
      __IOM uint32_t I2C7CLKDIV : 2;            /*!< [31..30] I2C7 Clock Divider                                               */
    } I2CCLKPWR_b;
  } ;
  
  union {
    __IOM uint32_t TMRDIV;                      /*!< (@ 0x00000008) TIMER DIVIDER REGISTER                                     */
    
    struct {
      __IOM uint32_t TMR0DIV    : 4;            /*!< [3..0] Timer0 Clock Divider                                               */
      __IOM uint32_t TMR1DIV    : 4;            /*!< [7..4] Timer1 Clock Divider                                               */
      __IOM uint32_t TMR2DIV    : 4;            /*!< [11..8] Timer2 Clock Divider                                              */
      __IOM uint32_t TMR3DIV    : 4;            /*!< [15..12] Timer3 Clock Divider                                             */
      __IOM uint32_t TMR4DIV    : 4;            /*!< [19..16] Timer4 Clock Divider                                             */
      __IOM uint32_t TMR5DIV    : 4;            /*!< [23..20] Timer5 Clock Divider                                             */
      __IOM uint32_t TMR0PAUSE  : 1;            /*!< [24..24] Timer0 Clock Pause                                               */
      __IOM uint32_t TMR1PAUSE  : 1;            /*!< [25..25] Timer1 Clock Pause                                               */
      __IOM uint32_t TMR2PAUSE  : 1;            /*!< [26..26] Timer2 Clock Pause                                               */
      __IOM uint32_t TMR3PAUSE  : 1;            /*!< [27..27] Timer3 Clock Pause                                               */
      __IOM uint32_t TMR4PAUSE  : 1;            /*!< [28..28] Timer4 Clock Pause                                               */
      __IOM uint32_t TMR5PAUSE  : 1;            /*!< [29..29] Timer5 Clock Pause                                               */
            uint32_t            : 2;
    } TMRDIV_b;
  } ;
  
  union {
    __IOM uint32_t PERICLKPWR0;                 /*!< (@ 0x0000000C) PERIPHERAL CLOCK POWER REGISTER #0                         */
    
    struct {
      __IOM uint32_t GPIOCLKPWR : 1;            /*!< [0..0] GPIO Clock Power                                                   */
      __IOM uint32_t TACHO0CLKPWR : 1;          /*!< [1..1] Tachometer0 Clock Power                                            */
      __IOM uint32_t TACHO1CLKPWR : 1;          /*!< [2..2] Tachometer1 Clock Power                                            */
      __IOM uint32_t TACHO2CLKPWR : 1;          /*!< [3..3] Tachometer2 Clock Power                                            */
      __IOM uint32_t TACHO3CLKPWR : 1;          /*!< [4..4] Tachometer3 Clock Power                                            */
      __IOM uint32_t PS2CLKPWR  : 1;            /*!< [5..5] PS2 Clock Power                                                    */
      __IOM uint32_t KBMCLKPWR  : 1;            /*!< [6..6] KBM Clock Power                                                    */
      __IOM uint32_t PECICLKPWR : 1;            /*!< [7..7] PECI Clock Power                                                   */
      __IOM uint32_t PL0CLKPWR  : 1;            /*!< [8..8] PWMLED0 Clock Power                                                */
      __IOM uint32_t PL1CLKPWR  : 1;            /*!< [9..9] PWMLED1 Clock Power                                                */
      __IOM uint32_t PWM0CLKPWR : 1;            /*!< [10..10] PWM0 Clock Power                                                 */
      __IOM uint32_t PWM1CLKPWR : 1;            /*!< [11..11] PWM1 Clock Power                                                 */
      __IOM uint32_t PWM2CLKPWR : 1;            /*!< [12..12] PWM2 Clock Power                                                 */
      __IOM uint32_t PWM3CLKPWR : 1;            /*!< [13..13] PWM3 Clock Power                                                 */
      __IOM uint32_t PWM4CLKPWR : 1;            /*!< [14..14] PWM4 Clock Power                                                 */
      __IOM uint32_t PWM5CLKPWR : 1;            /*!< [15..15] PWM5 Clock Power                                                 */
      __IOM uint32_t PWM6CLKPWR : 1;            /*!< [16..16] PWM6 Clock Power                                                 */
      __IOM uint32_t PWM7CLKPWR : 1;            /*!< [17..17] PWM7 Clock Power                                                 */
      __IOM uint32_t PWM8CLKPWR : 1;            /*!< [18..18] PWM8 Clock Power                                                 */
      __IOM uint32_t PWM9CLKPWR : 1;            /*!< [19..19] PWM9 Clock Power                                                 */
      __IOM uint32_t PWM10CLKPWR : 1;           /*!< [20..20] PWM10 Clock Power                                                */
      __IOM uint32_t PWM11CLKPWR : 1;           /*!< [21..21] PWM11 Clock Power                                                */
      __IOM uint32_t ESPICLKPWR : 1;            /*!< [22..22] eSPI Clock Power                                                 */
      __IOM uint32_t KBCCLKPWR  : 1;            /*!< [23..23] KBC Clock Power                                                  */
      __IOM uint32_t ACPI0CLKPWR : 1;           /*!< [24..24] ACPI0 Clock Power                                                */
      __IOM uint32_t ACPI1CLKPWR : 1;           /*!< [25..25] ACPI1 Clock Power                                                */
      __IOM uint32_t ACPI2CLKPWR : 1;           /*!< [26..26] ACPI2 Clock Power                                                */
      __IOM uint32_t ACPI3CLKPWR : 1;           /*!< [27..27] ACPI3 Clock Power                                                */
      __IOM uint32_t ACPI4CLKPWR : 1;           /*!< [28..28] ACPI4 Clock Power                                                */
      __IOM uint32_t P80CLKPWR  : 1;            /*!< [29..29] Port80 Clock Power                                               */
      __IOM uint32_t EMI0CLKPWR : 1;            /*!< [30..30] EMI0 Clock Power                                                 */
      __IOM uint32_t EMI1CLKPWR : 1;            /*!< [31..31] EMI1 Clock Power                                                 */
    } PERICLKPWR0_b;
  } ;
  
  union {
    __IOM uint32_t UARTCLKPWR;                  /*!< (@ 0x00000010) UART CLOCK POWER REGISTER                                  */
    
    struct {
      __IOM uint32_t PWR        : 1;            /*!< [0..0] UART Clock Power                                                   */
      __IOM uint32_t CLKSRC     : 1;            /*!< [1..1] UART Clock Source                                                  */
      __IOM uint32_t DIV        : 2;            /*!< [3..2] UART Clock Divider                                                 */
            uint32_t            : 28;
    } UARTCLKPWR_b;
  } ;
  
  union {
    __IOM uint32_t SYSCLK;                      /*!< (@ 0x00000014) SYSTEM CLOCK REGISTER                                      */
    
    struct {
      __IOM uint32_t PLLBYPASS  : 1;            /*!< [0..0] Bypass PLL from Analog De-bounce Circuit                           */
      __IOM uint32_t CLKSRC     : 1;            /*!< [1..1] System Clock Source                                                */
      __IOM uint32_t DIV        : 1;            /*!< [2..2] System Clock Divider                                               */
            uint32_t            : 29;
    } SYSCLK_b;
  } ;
  
  union {
    __IOM uint32_t ADCCLKPWR;                   /*!< (@ 0x00000018) ADC CLOCK POWER REGISTER                                   */
    
    struct {
      __IOM uint32_t PWR        : 1;            /*!< [0..0] ADC Clock Power                                                    */
      __IOM uint32_t CLKSRC     : 1;            /*!< [1..1] ADC Clock Source                                                   */
      __IOM uint32_t DIV        : 3;            /*!< [4..2] ADC Clock Divider                                                  */
            uint32_t            : 27;
    } ADCCLKPWR_b;
  } ;
  
  union {
    __IOM uint32_t PERICLKPWR1;                 /*!< (@ 0x0000001C) PERIPHERAL CLOCK POWER REGISTER #1                         */
    
    struct {
      __IOM uint32_t EMI2CLKPWR : 1;            /*!< [0..0] EMI2 Clock Power                                                   */
      __IOM uint32_t EMI3CLKPWR : 1;            /*!< [1..1] EMI3 Clock Power                                                   */
      __IOM uint32_t EMI4CLKPWR : 1;            /*!< [2..2] EMI4 Clock Power                                                   */
      __IOM uint32_t EMI5CLKPWR : 1;            /*!< [3..3] EMI5 Clock Power                                                   */
      __IOM uint32_t EMI6CLKPWR : 1;            /*!< [4..4] EMI6 Clock Power                                                   */
      __IOM uint32_t EMI7CLKPWR : 1;            /*!< [5..5] EMI7 Clock Power                                                   */
      __IOM uint32_t OTPDMACLKPWR : 1;          /*!< [6..6] OTP DMA Clock Power                                                */
      __IOM uint32_t RC25MCALCLKPWR : 1;        /*!< [7..7] RC25M Calibration Circuit Clock Power                              */
      __IOM uint32_t RC32KCALCLKPWR : 1;        /*!< [8..8] RC32K Calibration Circuit Clock Power                              */
      __IOM uint32_t I3C0CLKPWR : 1;            /*!< [9..9] I3C0 Clock Power                                                   */
      __IOM uint32_t I3C1CLKPWR : 1;            /*!< [10..10] I3C1 Clock Power                                                 */
      __IOM uint32_t I2CAUTOPWRCLKPWR : 1;      /*!< [11..11] I2C Auto-Power Circuit Clock Power                               */
      __IOM uint32_t MCCLKPWR   : 1;            /*!< [12..12] Monotonic Counter Clock Power                                    */
      __IOM uint32_t TMR0CLKPWR : 1;            /*!< [13..13] Timer0 Clock Power                                               */
      __IOM uint32_t TMR1CLKPWR : 1;            /*!< [14..14] Timer1 Clock Power                                               */
      __IOM uint32_t TMR2CLKPWR : 1;            /*!< [15..15] Timer2 Clock Power                                               */
      __IOM uint32_t TMR3CLKPWR : 1;            /*!< [16..16] Timer3 Clock Power                                               */
      __IOM uint32_t TMR4CLKPWR : 1;            /*!< [17..17] Timer4 Clock Power                                               */
      __IOM uint32_t TMR5CLKPWR : 1;            /*!< [18..18] Timer5 Clock Power                                               */
      __IOM uint32_t RTMRCLKPWR : 1;            /*!< [19..19] RTOS Timer Clock Power                                           */
      __IOM uint32_t SLWTMR0CLKPWR : 1;         /*!< [20..20] Slow Timer 0 Clock Power                                         */
      __IOM uint32_t SLWTMR1CLKPWR : 1;         /*!< [21..21] Slow Timer 1 Clock Power                                         */
            uint32_t            : 10;
    } PERICLKPWR1_b;
  } ;
  
  union {
    __IOM uint32_t FUNOPTION;                   /*!< (@ 0x00000020) FUNCTION OPTIONAL REGISTER                                 */
    
    struct {
      __IOM uint32_t SRAMRANGE  : 1;            /*!< [0..0] SRAM Accessible Range                                              */
      __IOM uint32_t PUFACCESSEN : 1;           /*!< [1..1] PUF Accessible Permission                                          */
      __IOM uint32_t LALUACCESSEN : 1;          /*!< [2..2] Lalu Engine Accessible Permission                                  */
      __IOM uint32_t DIOACCESSEN : 1;           /*!< [3..3] Dedicated I/O Accessible Permission                                */
            uint32_t            : 28;
    } FUNOPTION_b;
  } ;
  __IOM uint32_t  CPURSTADDR0;                  /*!< (@ 0x00000024) CPU RESET ADDRESS REGISTER #0                              */
  __IOM uint32_t  CPURSTADDR1;                  /*!< (@ 0x00000028) CPU RESET ADDRESS REGISTER #1                              */
  __IM  uint32_t  RESERVED[21];
  
  union {
    __IOM uint32_t SLPCTRL;                     /*!< (@ 0x00000080) SYSTEM SLEEP CONTROL REGISTER                              */
    
    struct {
      __IOM uint32_t CPUDBGEN   : 1;            /*!< [0..0] CPU Debug Function Enable                                          */
      __IOM uint32_t SLPMDSEL   : 1;            /*!< [1..1] Sleep Mode Selection                                               */
      __IOM uint32_t ESPIWKEN   : 1;            /*!< [2..2] eSPI Wake-up Enable                                                */
      __IOM uint32_t PS2WKEN    : 1;            /*!< [3..3] PS2 Wake-up Enable                                                 */
      __IOM uint32_t I2CWKEN    : 1;            /*!< [4..4] I2C Wake-up Enable                                                 */
      __IOM uint32_t GPIOWKEN   : 1;            /*!< [5..5] GPIO Wake-up Enable                                                */
      __IOM uint32_t SPISLVWKEN : 1;            /*!< [6..6] SPI Slave Wake-up Enable                                           */
            uint32_t            : 25;
    } SLPCTRL_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t RSTCTRL;                     /*!< (@ 0x00000088) SYSTEM RESET REGISTER                                      */
    
    struct {
      __IOM uint32_t SWRST      : 1;            /*!< [0..0] Software Reset                                                     */
      __IOM uint32_t LDO2RST    : 1;            /*!< [1..1] LDO2 Reset                                                         */
            uint32_t            : 30;
    } RSTCTRL_b;
  } ;
  __IOM uint32_t  MSRAMCTRL0;                   /*!< (@ 0x0000008C) Main SRAM CONTROL REGISTER #0                              */
  __IOM uint32_t  MSRAMCTRL1;                   /*!< (@ 0x00000090) Main SRAM CONTROL REGISTER #1                              */
  __IOM uint32_t  MSRAMCTRL2;                   /*!< (@ 0x00000094) Main SRAM CONTROL REGISTER #2                              */
  __IOM uint32_t  MSRAMCTRL3;                   /*!< (@ 0x00000098) Main SRAM CONTROL REGISTER #3                              */
  __IOM uint32_t  ESPISRAMCTRL;                 /*!< (@ 0x0000009C) ESPI SRAM CONTROL REGISTER                                 */
  
  union {
    __IOM uint32_t VIVOCTRL;                    /*!< (@ 0x000000A0) VINVOUT CONTROL REGISTER                                   */
    
    struct {
      __IOM uint32_t VI0MDSEL   : 1;            /*!< [0..0] VI0 Mode Select                                                    */
      __IOM uint32_t VI1MDSEL   : 1;            /*!< [1..1] VI1 Mode Select                                                    */
      __IOM uint32_t VI2MDSEL   : 1;            /*!< [2..2] VI2 Mode Select                                                    */
      __IOM uint32_t VI3MDSEL   : 1;            /*!< [3..3] VI3 Mode Select                                                    */
      __IOM uint32_t VI4MDSEL   : 1;            /*!< [4..4] VI4 Mode Select                                                    */
      __IOM uint32_t VI5MDSEL   : 1;            /*!< [5..5] VI5 Mode Select                                                    */
      __IM  uint32_t VI0STS     : 1;            /*!< [6..6] VI0 Status                                                         */
      __IM  uint32_t VI1STS     : 1;            /*!< [7..7] VI1 Status                                                         */
      __IM  uint32_t VI2STS     : 1;            /*!< [8..8] VI2 Status                                                         */
      __IM  uint32_t VI3STS     : 1;            /*!< [9..9] VI3 Status                                                         */
      __IM  uint32_t VI4STS     : 1;            /*!< [10..10] VI4 Status                                                       */
      __IM  uint32_t VI5STS     : 1;            /*!< [11..11] VI5 Status                                                       */
      __IOM uint32_t VI0POL     : 1;            /*!< [12..12] VI Polarity                                                      */
      __IOM uint32_t VI1POL     : 1;            /*!< [13..13] VI Polarity                                                      */
      __IOM uint32_t VI2POL     : 1;            /*!< [14..14] VI Polarity                                                      */
      __IOM uint32_t VI3POL     : 1;            /*!< [15..15] VI Polarity                                                      */
      __IOM uint32_t VI4POL     : 1;            /*!< [16..16] VI Polarity                                                      */
      __IOM uint32_t VI5POL     : 1;            /*!< [17..17] VI Polarity                                                      */
            uint32_t            : 12;
      __IOM uint32_t REGWREN    : 1;            /*!< [30..30] Register Write Enable                                            */
      __IOM uint32_t VOMDSEL    : 1;            /*!< [31..31] VO Mode Selection                                                */
    } VIVOCTRL_b;
  } ;
  
  union {
    __IOM uint32_t LDOCTRL;                     /*!< (@ 0x000000A4) LDO CONTROL REGISTER                                       */
    
    struct {
      __IOM uint32_t LDO1VOL    : 3;            /*!< [2..0] Select LDO1 Voltage                                                */
      __IOM uint32_t LDO2PWREN  : 1;            /*!< [3..3] LDO2 Power Enable                                                  */
      __IOM uint32_t LDO2VOL    : 3;            /*!< [6..4] Select LDO2 Voltage                                                */
      __IOM uint32_t LDO3PWREN  : 1;            /*!< [7..7] LDO3 Power Enable                                                  */
      __IOM uint32_t LDO3VOL    : 3;            /*!< [10..8] Select LDO3 Voltage                                               */
            uint32_t            : 21;
    } LDOCTRL_b;
  } ;
  
  union {
    __IOM uint32_t RC25MCTRL;                   /*!< (@ 0x000000A8) RC25M ANALOG CONTROL REGISTER                              */
    
    struct {
      __IOM uint32_t PWREN      : 1;            /*!< [0..0] RC25M Power Enable                                                 */
      __IOM uint32_t CALCURR    : 7;            /*!< [7..1] RC25M Calibration Current                                          */
      __IOM uint32_t ISEL       : 1;            /*!< [8..8] RC25M Current Selection                                            */
      __IOM uint32_t TSEL       : 2;            /*!< [10..9] RC25M Temperature Selection                                       */
      __IOM uint32_t CAPSEL     : 2;            /*!< [12..11] RC25M Capacitor Selection                                        */
            uint32_t            : 19;
    } RC25MCTRL_b;
  } ;
  
  union {
    __IOM uint32_t PLLCTRL;                     /*!< (@ 0x000000AC) PLL ANALOG CONTROL REGISTER                                */
    
    struct {
      __IOM uint32_t PWREN      : 1;            /*!< [0..0] PLL Power Enable                                                   */
            uint32_t            : 18;
      __IOM uint32_t RDY        : 1;            /*!< [19..19] PLL Ready and Stable                                             */
            uint32_t            : 12;
    } PLLCTRL_b;
  } ;
  __IOM uint32_t  POR1CTRL;                     /*!< (@ 0x000000B0) POR1 CONTROL REGISTER                                      */
  __IOM uint32_t  CRYPTOSRAMCTRL;               /*!< (@ 0x000000B4) CRYPTO SRAM CONTROL REGISTER                               */
  __IOM uint32_t  ADCLDOCTRL;                   /*!< (@ 0x000000B8) ADC LDO CONTROL REGISTER                                   */
  __IOM uint32_t  ADCANACTRL;                   /*!< (@ 0x000000BC) ADC ANALOG CONTROL REGISTER                                */
  __IOM uint32_t  ROMBISTCTRL;                  /*!< (@ 0x000000C0) ROM BIST CONTROL REGISTER                                  */
  __IOM uint32_t  BTRMBISTRES0;                 /*!< (@ 0x000000C4) BOOTROM BIST RESULT REGISTER #0                            */
  __IOM uint32_t  BTRMBISTRES1;                 /*!< (@ 0x000000C8) BOOTROM BIST RESULT REGISTER #1                            */
  __IOM uint32_t  LALURMBISTRES0;               /*!< (@ 0x000000CC) LALU ROM BIST RESULT REGISTER #0                           */
  __IOM uint32_t  LALURMBISTRES1;               /*!< (@ 0x000000D0) LALU ROM BIST RESULT REGISTER #1                           */
  
  union {
    __IOM uint32_t TESTOUTCTRL0;                /*!< (@ 0x000000D4) TESTOUT CONTROL REGISTER #0                                */
    
    struct {
      __IOM uint32_t TOUT0SEL   : 7;            /*!< [6..0] TESTOUT0 function selection                                        */
            uint32_t            : 1;
      __IOM uint32_t TOUT1SEL   : 7;            /*!< [14..8] TESTOUT1 function selection                                       */
            uint32_t            : 1;
      __IOM uint32_t TOUT2SEL   : 7;            /*!< [22..16] TESTOUT2 function selection                                      */
            uint32_t            : 1;
      __IOM uint32_t TOUT3SEL   : 8;            /*!< [31..24] TESTOUT3 function selection                                      */
    } TESTOUTCTRL0_b;
  } ;
  
  union {
    __IOM uint32_t TESTOUTCTRL1;                /*!< (@ 0x000000D8) TESTOUT CONTROL REGISTER #1                                */
    
    struct {
      __IOM uint32_t TOUT4SEL   : 7;            /*!< [6..0] TESTOUT4 function selection                                        */
            uint32_t            : 1;
      __IOM uint32_t TOUT5SEL   : 7;            /*!< [14..8] TESTOUT5 function selection                                       */
            uint32_t            : 1;
      __IOM uint32_t TOUT6SEL   : 7;            /*!< [22..16] TESTOUT6 function selection                                      */
            uint32_t            : 1;
      __IOM uint32_t TOUT7SEL   : 8;            /*!< [31..24] TESTOUT7 function selection                                      */
    } TESTOUTCTRL1_b;
  } ;
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t RC32KCTRL;                   /*!< (@ 0x000000E0) RC32K ANALOG CONTROL REGISTER                              */
    
    struct {
      __IOM uint32_t PWREN      : 1;            /*!< [0..0] RC32K Power Enable                                                 */
      __IOM uint32_t CAPSEL     : 6;            /*!< [6..1] RC32K Capacitor Selection                                          */
      __IOM uint32_t VREFSEL    : 1;            /*!< [7..7] RC32K VREF Selection                                               */
            uint32_t            : 24;
    } RC32KCTRL_b;
  } ;
  __IOM uint32_t  POR2CTRL;                     /*!< (@ 0x000000E4) POR2 CONTROL REGISTER                                      */
  
  union {
    __IOM uint32_t PERICLKPWR2;                 /*!< (@ 0x000000E8) PERIPHERAL CLOCK POWER REGISTER #2                         */
    
    struct {
      __IOM uint32_t RTCCLKPWR  : 1;            /*!< [0..0] RTC Clock Power                                                    */
      __IOM uint32_t WDTCLKPWR  : 1;            /*!< [1..1] WDT Clock Power                                                    */
      __IOM uint32_t PWRBTNCLKPWR : 1;          /*!< [2..2] Power Button over WDT Clock Power                                  */
            uint32_t            : 27;
      __IOM uint32_t RC32KSRCSEL : 2;           /*!< [31..30] RC32K Clock Source Selection                                     */
    } PERICLKPWR2_b;
  } ;
  __IOM uint32_t  BATSRAMCTRL;                  /*!< (@ 0x000000EC) BATTERY SRAM CONTROL REGISTER                              */
} SYSTEM_Type;                                  /*!< Size = 240 (0xf0)                                                         */



/* =========================================================================================================================== */
/* ================                                          OTPDMA                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief OTP DMA Controller (OTPDMA)
  */

typedef struct {                                /*!< (@ 0x40020100) OTPDMA Structure                                           */
  
  union {
    __IOM uint32_t STS;                         /*!< (@ 0x00000000) STATUS REGISTER                                            */
    
    struct {
      __IOM uint32_t DONE       : 1;            /*!< [0..0] Fetching data from OTP is finished                                 */
            uint32_t            : 31;
    } STS_b;
  } ;
  
  union {
    __IM  uint32_t MSRAM0;                      /*!< (@ 0x00000004) MAIN SRAM #0 CONTROL PARAMETERS                            */
    
    struct {
      __IM  uint32_t RME        : 1;            /*!< [0..0] Read write margin enable                                           */
      __IM  uint32_t RM         : 4;            /*!< [4..1] Read write margin input                                            */
      __IM  uint32_t RA         : 2;            /*!< [6..5] Read assist pin                                                    */
      __IM  uint32_t WA         : 3;            /*!< [9..7] Write assist pin                                                   */
      __IM  uint32_t WPULSE     : 3;            /*!< [12..10] Write assist pulse                                               */
      __IM  uint32_t LS         : 1;            /*!< [13..13] Light sleep mode                                                 */
            uint32_t            : 17;
      __IM  uint32_t VALID      : 1;            /*!< [31..31] Parameters are valid or invalid                                  */
    } MSRAM0_b;
  } ;
  
  union {
    __IM  uint32_t MSRAM1;                      /*!< (@ 0x00000008) MAIN SRAM #1 CONTROL PARAMETERS                            */
    
    struct {
      __IM  uint32_t RME        : 1;            /*!< [0..0] Read write margin enable                                           */
      __IM  uint32_t RM         : 4;            /*!< [4..1] Read write margin input                                            */
      __IM  uint32_t RA         : 2;            /*!< [6..5] Read assist pin                                                    */
      __IM  uint32_t WA         : 3;            /*!< [9..7] Write assist pin                                                   */
      __IM  uint32_t WPULSE     : 3;            /*!< [12..10] Write assist pulse                                               */
      __IM  uint32_t LS         : 1;            /*!< [13..13] Light sleep mode                                                 */
            uint32_t            : 17;
      __IM  uint32_t VALID      : 1;            /*!< [31..31] Parameters are valid or invalid                                  */
    } MSRAM1_b;
  } ;
  
  union {
    __IM  uint32_t MSRAM2;                      /*!< (@ 0x0000000C) MAIN SRAM #2 CONTROL PARAMETERS                            */
    
    struct {
      __IM  uint32_t RME        : 1;            /*!< [0..0] Read write margin enable                                           */
      __IM  uint32_t RM         : 4;            /*!< [4..1] Read write margin input                                            */
      __IM  uint32_t RA         : 2;            /*!< [6..5] Read assist pin                                                    */
      __IM  uint32_t WA         : 3;            /*!< [9..7] Write assist pin                                                   */
      __IM  uint32_t WPULSE     : 3;            /*!< [12..10] Write assist pulse                                               */
      __IM  uint32_t LS         : 1;            /*!< [13..13] Light sleep mode                                                 */
            uint32_t            : 17;
      __IM  uint32_t VALID      : 1;            /*!< [31..31] Parameters are valid or invalid                                  */
    } MSRAM2_b;
  } ;
  
  union {
    __IM  uint32_t MSRAM3;                      /*!< (@ 0x00000010) MAIN SRAM #3 CONTROL PARAMETERS                            */
    
    struct {
      __IM  uint32_t RME        : 1;            /*!< [0..0] Read write margin enable                                           */
      __IM  uint32_t RM         : 4;            /*!< [4..1] Read write margin input                                            */
      __IM  uint32_t RA         : 2;            /*!< [6..5] Read assist pin                                                    */
      __IM  uint32_t WA         : 3;            /*!< [9..7] Write assist pin                                                   */
      __IM  uint32_t WPULSE     : 3;            /*!< [12..10] Write assist pulse                                               */
      __IM  uint32_t LS         : 1;            /*!< [13..13] Light sleep mode                                                 */
            uint32_t            : 17;
      __IM  uint32_t VALID      : 1;            /*!< [31..31] Parameters are valid or invalid                                  */
    } MSRAM3_b;
  } ;
  
  union {
    __IM  uint32_t MSRAM4;                      /*!< (@ 0x00000014) MAIN SRAM #4 CONTROL PARAMETERS                            */
    
    struct {
      __IM  uint32_t RME        : 1;            /*!< [0..0] Read write margin enable                                           */
      __IM  uint32_t RM         : 4;            /*!< [4..1] Read write margin input                                            */
      __IM  uint32_t RA         : 2;            /*!< [6..5] Read assist pin                                                    */
      __IM  uint32_t WA         : 3;            /*!< [9..7] Write assist pin                                                   */
      __IM  uint32_t WPULSE     : 3;            /*!< [12..10] Write assist pulse                                               */
      __IM  uint32_t LS         : 1;            /*!< [13..13] Light sleep mode                                                 */
            uint32_t            : 17;
      __IM  uint32_t VALID      : 1;            /*!< [31..31] Parameters are valid or invalid                                  */
    } MSRAM4_b;
  } ;
  
  union {
    __IM  uint32_t MSRAM5;                      /*!< (@ 0x00000018) MAIN SRAM #5 CONTROL PARAMETERS                            */
    
    struct {
      __IM  uint32_t RME        : 1;            /*!< [0..0] Read write margin enable                                           */
      __IM  uint32_t RM         : 4;            /*!< [4..1] Read write margin input                                            */
      __IM  uint32_t RA         : 2;            /*!< [6..5] Read assist pin                                                    */
      __IM  uint32_t WA         : 3;            /*!< [9..7] Write assist pin                                                   */
      __IM  uint32_t WPULSE     : 3;            /*!< [12..10] Write assist pulse                                               */
      __IM  uint32_t LS         : 1;            /*!< [13..13] Light sleep mode                                                 */
            uint32_t            : 17;
      __IM  uint32_t VALID      : 1;            /*!< [31..31] Parameters are valid or invalid                                  */
    } MSRAM5_b;
  } ;
  
  union {
    __IM  uint32_t ESPISRAM;                    /*!< (@ 0x0000001C) eSPI SRAM CONTROL PARAMETERS                               */
    
    struct {
      __IM  uint32_t RME        : 1;            /*!< [0..0] Read write margin enable                                           */
      __IM  uint32_t RM         : 4;            /*!< [4..1] Read write margin input                                            */
      __IM  uint32_t RA         : 2;            /*!< [6..5] Read assist pin                                                    */
      __IM  uint32_t WA         : 3;            /*!< [9..7] Write assist pin                                                   */
      __IM  uint32_t WPULSE     : 3;            /*!< [12..10] Write assist pulse                                               */
      __IM  uint32_t LS         : 1;            /*!< [13..13] Light sleep mode                                                 */
            uint32_t            : 17;
      __IM  uint32_t VALID      : 1;            /*!< [31..31] Parameters are valid or invalid                                  */
    } ESPISRAM_b;
  } ;
  
  union {
    __IM  uint32_t CRYPTOSRAM;                  /*!< (@ 0x00000020) CRYPTO SRAM CONTROL PARAMETERS                             */
    
    struct {
      __IM  uint32_t RME        : 1;            /*!< [0..0] Read write margin enable                                           */
      __IM  uint32_t RM         : 4;            /*!< [4..1] Read write margin input                                            */
      __IM  uint32_t RA         : 2;            /*!< [6..5] Read assist pin                                                    */
      __IM  uint32_t WA         : 3;            /*!< [9..7] Write assist pin                                                   */
      __IM  uint32_t WPULSE     : 3;            /*!< [12..10] Write assist pulse                                               */
      __IM  uint32_t LS         : 1;            /*!< [13..13] Light sleep mode                                                 */
            uint32_t            : 17;
      __IM  uint32_t VALID      : 1;            /*!< [31..31] Parameters are valid or invalid                                  */
    } CRYPTOSRAM_b;
  } ;
  
  union {
    __IM  uint32_t BATSRAM;                     /*!< (@ 0x00000024) BATTERY SRAM CONTROL PARAMETERS                            */
    
    struct {
      __IM  uint32_t RME        : 1;            /*!< [0..0] Read write margin enable                                           */
      __IM  uint32_t RM         : 4;            /*!< [4..1] Read write margin input                                            */
      __IM  uint32_t RA         : 2;            /*!< [6..5] Read assist pin                                                    */
      __IM  uint32_t WA         : 3;            /*!< [9..7] Write assist pin                                                   */
      __IM  uint32_t WPULSE     : 3;            /*!< [12..10] Write assist pulse                                               */
      __IM  uint32_t LS         : 1;            /*!< [13..13] Light sleep mode                                                 */
            uint32_t            : 17;
      __IM  uint32_t VALID      : 1;            /*!< [31..31] Parameters are valid or invalid                                  */
    } BATSRAM_b;
  } ;
  
  union {
    __IM  uint32_t GATECTRL;                    /*!< (@ 0x00000028) GATING CONTROL REGISTER                                    */
    
    struct {
            uint32_t            : 28;
      __IM  uint32_t DIO        : 1;            /*!< [28..28] DIO enable/disable                                               */
      __IM  uint32_t LALU       : 1;            /*!< [29..29] LALU enable/disable                                              */
      __IM  uint32_t PUF        : 1;            /*!< [30..30] PUF enable/disable                                               */
      __IM  uint32_t SRAM       : 1;            /*!< [31..31] SRAM ragne                                                       */
    } GATECTRL_b;
  } ;
  
  union {
    __IM  uint32_t GATESRC;                     /*!< (@ 0x0000002C) GATING SOURCE REGISTER                                     */
    
    struct {
            uint32_t            : 28;
      __IM  uint32_t DIO        : 1;            /*!< [28..28] DIO enable/disable source                                        */
      __IM  uint32_t LALU       : 1;            /*!< [29..29] LALU enable/disable source                                       */
      __IM  uint32_t PUF        : 1;            /*!< [30..30] PUF enable/disable source                                        */
      __IM  uint32_t SRAM       : 1;            /*!< [31..31] SRAM ragne source                                                */
    } GATESRC_b;
  } ;
} OTPDMA_Type;                                  /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                            PKE                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Lalu Public Key Engine (PKE)
  */

typedef struct {                                /*!< (@ 0x40040000) PKE Structure                                              */
  
  union {
    __IOM uint32_t CTRL0;                       /*!< (@ 0x00000000) CONTROL REGISTER #0                                        */
    
    struct {
      __IOM uint32_t GOTOEND    : 1;            /*!< [0..0] Go To End Loop                                                     */
      __IOM uint32_t IMEMRDEN   : 1;            /*!< [1..1] Enable IMEM Read                                                   */
      __IOM uint32_t DPAEN      : 1;            /*!< [2..2] DPA Defense Enable                                                 */
      __IOM uint32_t TATTKDEFEN : 1;            /*!< [3..3] Timing Attack Defense Enable                                       */
      __IOM uint32_t INTRLFSR   : 1;            /*!< [4..4] Use Internal LFSR                                                  */
      __IOM uint32_t CURVES     : 1;            /*!< [5..5] CURVES                                                             */
      __IOM uint32_t ALG        : 2;            /*!< [7..6] Algirom Selection                                                  */
      __IOM uint32_t LEN        : 16;           /*!< [23..8] Precise RSA/ECC Length in Bits                                    */
            uint32_t            : 1;
      __IOM uint32_t BYTESWAP   : 1;            /*!< [25..25] Enable Bytes Swap                                                */
      __IOM uint32_t WORDSWAP   : 1;            /*!< [26..26] Enable Word Swap                                                 */
      __IOM uint32_t OTHER      : 1;            /*!< [27..27] Other Function Enable                                            */
            uint32_t            : 2;
      __IOM uint32_t START      : 1;            /*!< [30..30] Start PKE Function                                               */
      __IOM uint32_t SIMPLIFY   : 1;            /*!< [31..31] SIMPLIFY ECDSA/EdDSA Hash Value Ready                            */
    } CTRL0_b;
  } ;
  
  union {
    __IOM uint32_t CTRL3;                       /*!< (@ 0x00000004) CONTROL REGISTER #3                                        */
    
    struct {
            uint32_t            : 6;
      __IOM uint32_t SWAPEN     : 1;            /*!< [6..6] Coorinate Swap Enable                                              */
      __IOM uint32_t SWAP       : 1;            /*!< [7..7] Coorinate Swap or Not                                              */
      __IOM uint32_t DMARXSINGLE : 1;           /*!< [8..8] dma_rx_single                                                      */
      __IOM uint32_t DMARXREQ   : 1;            /*!< [9..9] dma_rx_req                                                         */
      __IOM uint32_t DMARXLAST  : 1;            /*!< [10..10] dma_rx_last                                                      */
      __IOM uint32_t DMATXSINGLE : 1;           /*!< [11..11] dma_tx_single                                                    */
      __IOM uint32_t DMATXREQ   : 1;            /*!< [12..12] dma_tx_req                                                       */
      __IOM uint32_t DMATXLAST  : 1;            /*!< [13..13] dma_tx_last                                                      */
            uint32_t            : 18;
    } CTRL3_b;
  } ;
  
  union {
    __IOM uint32_t STS;                         /*!< (@ 0x00000008) STATUS REGISTER                                            */
    
    struct {
      __IOM uint32_t FIN        : 1;            /*!< [0..0] ECC/RSA Operation Finish                                           */
      __IOM uint32_t PRIMEERR   : 1;            /*!< [1..1] Prime Check Error                                                  */
      __IOM uint32_t R2MODN     : 1;            /*!< [2..2] R^2 Mod N Fail                                                     */
      __IOM uint32_t ECCODDPOINT : 1;           /*!< [3..3] ECC Odd Point                                                      */
      __IOM uint32_t ECCZEQUZERO : 1;           /*!< [4..4] ECC Z = 0                                                          */
      __IOM uint32_t MODINVERR  : 1;            /*!< [5..5] Modulat Inverse Fail                                               */
      __IOM uint32_t INTPUTERR  : 1;            /*!< [6..6] N Less Input Message For RSA                                       */
      __IOM uint32_t EXPERR     : 1;            /*!< [7..7] No Valid Exponent                                                  */
      __IOM uint32_t IDLE       : 1;            /*!< [8..8] PKE Idle                                                           */
      __IOM uint32_t SIMPLIFY   : 1;            /*!< [9..9] SIMPLIFY_ECDSA/EdDSA need hash value                               */
            uint32_t            : 22;
    } STS_b;
  } ;
  
  union {
    __IOM uint32_t INTMSK;                      /*!< (@ 0x0000000C) INTERRUPT MASK REGISTER                                    */
    
    struct {
      __IOM uint32_t FIN        : 1;            /*!< [0..0] Masked FIN Interrupt                                               */
      __IOM uint32_t PRIMEERR   : 1;            /*!< [1..1] Masked PRIMEERR Interrupt                                          */
      __IOM uint32_t R2MODN     : 1;            /*!< [2..2] Masked R2MODN Interrupt                                            */
      __IOM uint32_t ECCODDPOINT : 1;           /*!< [3..3] Masked ECCODDPOINT Interrupt                                       */
      __IOM uint32_t ECCZEQUZERO : 1;           /*!< [4..4] Masked ECCZEQUZERO Interrupt                                       */
      __IOM uint32_t MODINVERR  : 1;            /*!< [5..5] Masked MODINVERR Interrupt                                         */
      __IOM uint32_t INTPUTERR  : 1;            /*!< [6..6] Masked INTPUTERR Interrupt                                         */
      __IOM uint32_t EXPERR     : 1;            /*!< [7..7] Masked EXPERR Interrupt                                            */
      __IOM uint32_t SIMPLIFY   : 1;            /*!< [8..8] Masked SIMPLIFY Interrupt                                          */
            uint32_t            : 23;
    } INTMSK_b;
  } ;
  __IOM uint32_t  CTRL2;                        /*!< (@ 0x00000010) CONTROL REGISTER #2                                        */
  
  union {
    __IOM uint32_t SWAPADDR;                    /*!< (@ 0x00000014) SWAP ADDRESS REGISTER                                      */
    
    struct {
            uint32_t            : 5;
      __IOM uint32_t ADDR       : 7;            /*!< [11..5] Word Swap Base Address in Word                                    */
            uint32_t            : 20;
    } SWAPADDR_b;
  } ;
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  VERSION;                      /*!< (@ 0x0000001C) VERSION NUMBER REGISTER                                    */
  __IM  uint32_t  RESERVED1[16376];
  __IOM uint32_t* MMEM;                         /*!< (@ 0x00010000) PKE MAIN MEMORY                                            */
  __IM  uint32_t  RESERVED2[16383];
  __IOM uint32_t* TMEM;                         /*!< (@ 0x00020000) PKE TEMPORARY MEMORY                                       */
  __IM  uint32_t  RESERVED3[16383];
  __IOM uint32_t* IROM;                         /*!< (@ 0x00030000) PKE INSTRUCTION MEMORY                                     */
} PKE_Type;                                     /*!< Size = 196612 (0x30004)                                                   */



/* =========================================================================================================================== */
/* ================                                           EMI0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief EMI Controller (EMI0)
  */

typedef struct {                                /*!< (@ 0x40082000) EMI0 Structure                                             */
  
  union {
    __IOM uint32_t CFG;                         /*!< (@ 0x00000000) CONFIGURATION REGISTER                                     */
    
    struct {
      __IOM uint32_t STSADDR    : 2;            /*!< [1..0] Host Status Location at Memory Base Address                        */
      __IOM uint32_t WRPROT     : 1;            /*!< [2..2] Write Protect                                                      */
            uint32_t            : 29;
    } CFG_b;
  } ;
  
  union {
    __IOM uint32_t INTCTRL;                     /*!< (@ 0x00000004) INTERRUPT CONTROL REGISTER                                 */
    
    struct {
      __IOM uint32_t IRQEN      : 1;            /*!< [0..0] Auto IRQ Enable                                                    */
      __IOM uint32_t TGLV       : 1;            /*!< [1..1] Trigger Level Select                                               */
      __IOM uint32_t INTEN      : 1;            /*!< [2..2] Interrupt Enable                                                   */
            uint32_t            : 29;
    } INTCTRL_b;
  } ;
  
  union {
    __IOM uint32_t IRQNUM;                      /*!< (@ 0x00000008) IRQ NUMBER REGISTER                                        */
    
    struct {
      __IOM uint32_t NUM        : 8;            /*!< [7..0] Number of IRQ                                                      */
            uint32_t            : 24;
    } IRQNUM_b;
  } ;
  __IOM uint32_t  SAR;                          /*!< (@ 0x0000000C) LDN RX MAPPING ADDRESS                                     */
  
  union {
    __IOM uint32_t INTSTS;                      /*!< (@ 0x00000010) INTERRUPT STATUS                                           */
    
    struct {
      __IOM uint32_t STS        : 1;            /*!< [0..0] Indicate Wheather The Interrupt is Occurred                        */
            uint32_t            : 31;
    } INTSTS_b;
  } ;
} EMI_Type;                                     /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief GPIO Controller (GPIO)
  */

typedef struct {                                /*!< (@ 0x40090000) GPIO Structure                                             */
  
  union {
    __IOM uint32_t GCR[132];                    /*!< (@ 0x00000000) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t DIR        : 1;            /*!< [0..0] Direction                                                          */
      __IOM uint32_t INDETEN    : 1;            /*!< [1..1] Input Detection Enable                                             */
      __IOM uint32_t INVOLMD    : 1;            /*!< [2..2] Input Voltage Mode                                                 */
      __IM  uint32_t PINSTS     : 1;            /*!< [3..3] Pin Status                                                         */
            uint32_t            : 4;
      __IOM uint32_t MFCTRL     : 3;            /*!< [10..8] Multiple Function Control                                         */
      __IOM uint32_t OUTDRV     : 1;            /*!< [11..11] Pin Status                                                       */
      __IOM uint32_t SLEWRATE   : 1;            /*!< [12..12] Slew-rate selection                                              */
      __IOM uint32_t PULLDWEN   : 1;            /*!< [13..13] Pull-Down Enable                                                 */
      __IOM uint32_t PULLUPEN   : 1;            /*!< [14..14] Pull-Up Enable                                                   */
      __IOM uint32_t SCHEN      : 1;            /*!< [15..15] Schmitter-Trigger Enable                                         */
      __IOM uint32_t OUTTYPCTRL : 1;            /*!< [16..16] Output Type Control                                              */
      __IOM uint32_t OUTCTRL    : 1;            /*!< [17..17] Output Control                                                   */
            uint32_t            : 6;
      __IOM uint32_t INTCTRL    : 3;            /*!< [26..24] Interrupt Control                                                */
            uint32_t            : 1;
      __IOM uint32_t INTEN      : 1;            /*!< [28..28] Interrupt Enable                                                 */
            uint32_t            : 2;
      __IOM uint32_t INTSTS     : 1;            /*!< [31..31] Interrupt Status                                                 */
    } GCR_b[132];
  } ;
} GPIO_Type;                                    /*!< Size = 528 (0x210)                                                        */



/* =========================================================================================================================== */
/* ================                                           IOPAD                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief I/O Pad Controller (IOPAD)
  */

typedef struct {                                /*!< (@ 0x40091000) IOPAD Structure                                            */
  
  union {
    __IOM uint32_t FLASHWP;                     /*!< (@ 0x00000000) INTERNAL FLASH_WP PAD CONTROL REGISTER                     */
    
    struct {
      __IOM uint32_t INDETEN    : 1;            /*!< [0..0] Input Detection Enable                                             */
      __IOM uint32_t OUTDRV     : 1;            /*!< [1..1] Pin Status                                                         */
      __IOM uint32_t SLEWRATE   : 1;            /*!< [2..2] Slew-rate selection                                                */
      __IOM uint32_t PULLDWEN   : 1;            /*!< [3..3] Pull-Down Enable                                                   */
      __IOM uint32_t PULLUPEN   : 1;            /*!< [4..4] Pull-Up Enable                                                     */
      __IOM uint32_t SCHEN      : 1;            /*!< [5..5] Schmitter-Trigger Enable                                           */
            uint32_t            : 26;
    } FLASHWP_b;
  } ;
  
  union {
    __IOM uint32_t FLASHHOLD;                   /*!< (@ 0x00000004) INTERNAL FLASH_HOLD PAD CONTROL REGISTER                   */
    
    struct {
      __IOM uint32_t INDETEN    : 1;            /*!< [0..0] Input Detection Enable                                             */
      __IOM uint32_t OUTDRV     : 1;            /*!< [1..1] Pin Status                                                         */
      __IOM uint32_t SLEWRATE   : 1;            /*!< [2..2] Slew-rate selection                                                */
      __IOM uint32_t PULLDWEN   : 1;            /*!< [3..3] Pull-Down Enable                                                   */
      __IOM uint32_t PULLUPEN   : 1;            /*!< [4..4] Pull-Up Enable                                                     */
      __IOM uint32_t SCHEN      : 1;            /*!< [5..5] Schmitter-Trigger Enable                                           */
            uint32_t            : 26;
    } FLASHHOLD_b;
  } ;
  
  union {
    __IOM uint32_t FLASHSI;                     /*!< (@ 0x00000008) INTERNAL FLASH_SI PAD CONTROL REGISTER                     */
    
    struct {
      __IOM uint32_t INDETEN    : 1;            /*!< [0..0] Input Detection Enable                                             */
      __IOM uint32_t OUTDRV     : 1;            /*!< [1..1] Pin Status                                                         */
      __IOM uint32_t SLEWRATE   : 1;            /*!< [2..2] Slew-rate selection                                                */
      __IOM uint32_t PULLDWEN   : 1;            /*!< [3..3] Pull-Down Enable                                                   */
      __IOM uint32_t PULLUPEN   : 1;            /*!< [4..4] Pull-Up Enable                                                     */
      __IOM uint32_t SCHEN      : 1;            /*!< [5..5] Schmitter-Trigger Enable                                           */
            uint32_t            : 26;
    } FLASHSI_b;
  } ;
  
  union {
    __IOM uint32_t FLASHSO;                     /*!< (@ 0x0000000C) INTERNAL FLASH_SO PAD CONTROL REGISTER                     */
    
    struct {
      __IOM uint32_t INDETEN    : 1;            /*!< [0..0] Input Detection Enable                                             */
      __IOM uint32_t OUTDRV     : 1;            /*!< [1..1] Pin Status                                                         */
      __IOM uint32_t SLEWRATE   : 1;            /*!< [2..2] Slew-rate selection                                                */
      __IOM uint32_t PULLDWEN   : 1;            /*!< [3..3] Pull-Down Enable                                                   */
      __IOM uint32_t PULLUPEN   : 1;            /*!< [4..4] Pull-Up Enable                                                     */
      __IOM uint32_t SCHEN      : 1;            /*!< [5..5] Schmitter-Trigger Enable                                           */
            uint32_t            : 26;
    } FLASHSO_b;
  } ;
  
  union {
    __IOM uint32_t FLASHCS;                     /*!< (@ 0x00000010) INTERNAL FLASH_CS PAD CONTROL REGISTER                     */
    
    struct {
      __IOM uint32_t INDETEN    : 1;            /*!< [0..0] Input Detection Enable                                             */
      __IOM uint32_t OUTDRV     : 1;            /*!< [1..1] Pin Status                                                         */
      __IOM uint32_t SLEWRATE   : 1;            /*!< [2..2] Slew-rate selection                                                */
      __IOM uint32_t PULLDWEN   : 1;            /*!< [3..3] Pull-Down Enable                                                   */
      __IOM uint32_t PULLUPEN   : 1;            /*!< [4..4] Pull-Up Enable                                                     */
      __IOM uint32_t SCHEN      : 1;            /*!< [5..5] Schmitter-Trigger Enable                                           */
            uint32_t            : 26;
    } FLASHCS_b;
  } ;
  
  union {
    __IOM uint32_t FLASHCLK;                    /*!< (@ 0x00000014) INTERNAL FLASH_CLK PAD CONTROL REGISTER                    */
    
    struct {
      __IOM uint32_t INDETEN    : 1;            /*!< [0..0] Input Detection Enable                                             */
      __IOM uint32_t OUTDRV     : 1;            /*!< [1..1] Pin Status                                                         */
      __IOM uint32_t SLEWRATE   : 1;            /*!< [2..2] Slew-rate selection                                                */
      __IOM uint32_t PULLDWEN   : 1;            /*!< [3..3] Pull-Down Enable                                                   */
      __IOM uint32_t PULLUPEN   : 1;            /*!< [4..4] Pull-Up Enable                                                     */
      __IOM uint32_t SCHEN      : 1;            /*!< [5..5] Schmitter-Trigger Enable                                           */
            uint32_t            : 26;
    } FLASHCLK_b;
  } ;
  
  union {
    __IOM uint32_t PECI;                        /*!< (@ 0x00000018) PECI PAD CONTROL REGISTER                                  */
    
    struct {
      __IOM uint32_t INDETEN    : 1;            /*!< [0..0] Input Detection Enable                                             */
      __IOM uint32_t OUTDRV     : 1;            /*!< [1..1] Pin Status                                                         */
      __IOM uint32_t SLEWRATE   : 1;            /*!< [2..2] Slew-rate selection                                                */
      __IOM uint32_t PULLDWEN   : 1;            /*!< [3..3] Pull-Down Enable                                                   */
      __IOM uint32_t PULLUPEN   : 1;            /*!< [4..4] Pull-Up Enable                                                     */
      __IOM uint32_t SCHEN      : 1;            /*!< [5..5] Schmitter-Trigger Enable                                           */
            uint32_t            : 26;
    } PECI_b;
  } ;
} IOPAD_Type;                                   /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                           PECI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief PECI Controller (PECI)
  */

typedef struct {                                /*!< (@ 0x400A0000) PECI Structure                                             */
  
  union {
    __IOM uint32_t TX;                          /*!< (@ 0x00000000) TX DATA REGISTER                                           */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] Tx data                                                            */
            uint32_t            : 24;
    } TX_b;
  } ;
  
  union {
    __IM  uint32_t RX;                          /*!< (@ 0x00000004) RX DATA REGISTER                                           */
    
    struct {
      __IM  uint32_t DATA       : 8;            /*!< [7..0] Rx data                                                            */
            uint32_t            : 24;
    } RX_b;
  } ;
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000008) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable PECI Contoller                                              */
            uint32_t            : 2;
      __IOM uint32_t RST        : 1;            /*!< [3..3] Reset PECI Contoller                                               */
            uint32_t            : 1;
      __IOM uint32_t FIFORST    : 1;            /*!< [5..5] Reset PECI FIFO                                                    */
      __IOM uint32_t TXEN       : 1;            /*!< [6..6] Enable PECI Tx                                                     */
      __IOM uint32_t INTEN      : 1;            /*!< [7..7] Enable PECI Interrupt                                              */
            uint32_t            : 24;
    } CTRL_b;
  } ;
  
  union {
    __IOM uint32_t STS0;                        /*!< (@ 0x0000000C) STATUS REGISTER #0                                         */
    
    struct {
      __IOM uint32_t BOFSTS     : 1;            /*!< [0..0] Beginning of Frame Status                                          */
      __IOM uint32_t EOFSTS     : 1;            /*!< [1..1] End of Frame Status                                                */
      __IM  uint32_t ERRSTS     : 1;            /*!< [2..2] Error Status                                                       */
            uint32_t            : 4;
      __IM  uint32_t INTSTS     : 1;            /*!< [7..7] Interrupt Status                                                   */
            uint32_t            : 24;
    } STS0_b;
  } ;
  
  union {
    __IM  uint32_t STS1;                        /*!< (@ 0x00000010) STATUS REGISTER #1                                         */
    
    struct {
      __IM  uint32_t TXFULL     : 1;            /*!< [0..0] Tx FIFO is Full                                                    */
      __IM  uint32_t TXEMPTY    : 1;            /*!< [1..1] Tx FIFO is Empty                                                   */
      __IM  uint32_t RXFULL     : 1;            /*!< [2..2] Rx FIFO is Full                                                    */
      __IM  uint32_t RXEMPTY    : 1;            /*!< [3..3] Rx FIFO is Empty                                                   */
            uint32_t            : 3;
      __IM  uint32_t BUSY       : 1;            /*!< [7..7] PECI is busy                                                       */
            uint32_t            : 24;
    } STS1_b;
  } ;
  
  union {
    __IOM uint32_t ERR;                         /*!< (@ 0x00000014) ERROR REGISTER                                             */
    
    struct {
      __IOM uint32_t FCSERR     : 1;            /*!< [0..0] Frame Eheck Sequence                                               */
      __IOM uint32_t BUSERR     : 1;            /*!< [1..1] Bus Error                                                          */
            uint32_t            : 2;
      __IOM uint32_t TXOV       : 1;            /*!< [4..4] Tx Buffer Overflow                                                 */
      __IOM uint32_t TXUDRUN    : 1;            /*!< [5..5] Tx Buffer Underrun                                                 */
      __IOM uint32_t RXOV       : 1;            /*!< [6..6] Rx Buffer Overflow                                                 */
      __IOM uint32_t CLKERR     : 1;            /*!< [7..7] Error State of Unnormal PECI Clock                                 */
            uint32_t            : 24;
    } ERR_b;
  } ;
  
  union {
    __IOM uint32_t INTEN0;                      /*!< (@ 0x00000018) INTERRUPT ENABLE REGISTER #0                               */
    
    struct {
      __IOM uint32_t BOFEN      : 1;            /*!< [0..0] Enable BOF Interrupt                                               */
      __IOM uint32_t EOFEN      : 1;            /*!< [1..1] Enable EOF Interrupt                                               */
      __IOM uint32_t ERREN      : 1;            /*!< [2..2] Enable ERR Interrupt                                               */
            uint32_t            : 29;
    } INTEN0_b;
  } ;
  
  union {
    __IOM uint32_t INTEN1;                      /*!< (@ 0x0000001C) INTERRUPT ENABLE REGISTER #1                               */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t WFEEN      : 1;            /*!< [1..1] Enable WFE Interrupt                                               */
      __IOM uint32_t RFFEN      : 1;            /*!< [2..2] Enable RFF Interrupt                                               */
            uint32_t            : 29;
    } INTEN1_b;
  } ;
  
  union {
    __IOM uint32_t OBTL;                        /*!< (@ 0x00000020) OPTIMAL BIT TIME REGISTER LOW                              */
    
    struct {
      __IOM uint32_t VAL        : 8;            /*!< [7..0] Bit time low value                                                 */
            uint32_t            : 24;
    } OBTL_b;
  } ;
  
  union {
    __IOM uint32_t OBTH;                        /*!< (@ 0x00000024) OPTIMAL BIT TIME REGISTER HIGH                             */
    
    struct {
      __IOM uint32_t VAL        : 8;            /*!< [7..0] Bit time high value                                                */
            uint32_t            : 24;
    } OBTH_b;
  } ;
  __IM  uint32_t  RESERVED[6];
  __IOM uint32_t  BLKID;                        /*!< (@ 0x00000040) BLOCK ID REGISTER                                          */
  __IOM uint32_t  VERSION;                      /*!< (@ 0x00000044) VERSION REGISTER                                           */
  __IOM uint32_t  BTCTRL;                       /*!< (@ 0x00000048) BIT TIME CONTROL REGISTER                                  */
} PECI_Type;                                    /*!< Size = 76 (0x4c)                                                          */



/* =========================================================================================================================== */
/* ================                                            KBC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief KBC Controller (KBC)
  */

typedef struct {                                /*!< (@ 0x400A0100) KBC Structure                                              */
  
  union {
    __IOM uint32_t STS;                         /*!< (@ 0x00000000) STATUS REGISTER                                            */
    
    struct {
      __IM  uint32_t OBF        : 1;            /*!< [0..0] Output Buffer Full Status                                          */
      __IM  uint32_t IBF        : 1;            /*!< [1..1] Iutput Buffer Full Status                                          */
      __IOM uint32_t STS0       : 1;            /*!< [2..2] Genral Purpose Status0                                             */
      __IM  uint32_t CMDSEL     : 1;            /*!< [3..3] Command/Data Seletion                                              */
      __IOM uint32_t STS1       : 1;            /*!< [4..4] Genral Purpose Status1                                             */
      __IOM uint32_t STS2       : 1;            /*!< [5..5] Genral Purpose Status2                                             */
      __IOM uint32_t STS3       : 1;            /*!< [6..6] Genral Purpose Status3                                             */
      __IOM uint32_t STS4       : 1;            /*!< [7..7] Genral Purpose Status4                                             */
            uint32_t            : 24;
    } STS_b;
  } ;
  
  union {
    __IOM uint32_t IB;                          /*!< (@ 0x00000004) INPUT BUFFER REGISTER                                      */
    
    struct {
      __IOM uint32_t IBDAT      : 8;            /*!< [7..0] Inpurt Buffer Data                                                 */
      __IOM uint32_t IBCLR      : 1;            /*!< [8..8] Input Buffer Clear                                                 */
            uint32_t            : 23;
    } IB_b;
  } ;
  
  union {
    __IOM uint32_t OB;                          /*!< (@ 0x00000008) OUTPUT BUFFER REGISTER                                     */
    
    struct {
      __IOM uint32_t OBDAT      : 8;            /*!< [7..0] Output Buffer Data                                                 */
      __IOM uint32_t OBCLR      : 1;            /*!< [8..8] Output Buffer Clear                                                */
            uint32_t            : 23;
    } OB_b;
  } ;
  
  union {
    __IOM uint32_t PTADDR;                      /*!< (@ 0x0000000C) PORT ADDRESS REGISTER                                      */
    
    struct {
      __IOM uint32_t ADDR       : 12;           /*!< [11..0] Data Port Address                                                 */
      __IOM uint32_t OFFSET     : 3;            /*!< [14..12] Coomand Port Offset                                              */
            uint32_t            : 17;
    } PTADDR_b;
  } ;
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000010) INTERRUPT ENABLE REGISTER                                  */
    
    struct {
      __IOM uint32_t OBFINTEN   : 1;            /*!< [0..0] Output Buffer Interrupt Enable                                     */
      __IOM uint32_t IBFINTEN   : 1;            /*!< [1..1] Iutput Buffer Interrupt Enable                                     */
            uint32_t            : 30;
    } INTEN_b;
  } ;
  
  union {
    __IOM uint32_t VWCTRL0;                     /*!< (@ 0x00000014) VIRTUAL WIRE CONTROL REGISTER #0                           */
    
    struct {
      __IOM uint32_t IRQEN      : 1;            /*!< [0..0] Auto IRQ Enable                                                    */
      __IOM uint32_t TGLV       : 1;            /*!< [1..1] Trigger Level Select                                               */
            uint32_t            : 30;
    } VWCTRL0_b;
  } ;
  
  union {
    __IOM uint32_t VWCTRL1;                     /*!< (@ 0x00000018) VIRTUAL WIRE CONTROL REGISTER #1                           */
    
    struct {
      __IOM uint32_t IRQNUM     : 8;            /*!< [7..0] IRQ Number                                                         */
      __IOM uint32_t ACTEN      : 1;            /*!< [8..8] Activate Enable                                                    */
            uint32_t            : 23;
    } VWCTRL1_b;
  } ;
} KBC_Type;                                     /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                           ACPI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief ACPI Controller (ACPI)
  */

typedef struct {                                /*!< (@ 0x400A0200) ACPI Structure                                             */
  
  union {
    __IOM uint32_t STS;                         /*!< (@ 0x00000000) STATUS REGISTER                                            */
    
    struct {
      __IM  uint32_t OBF        : 1;            /*!< [0..0] Output Buffer Full Status                                          */
      __IM  uint32_t IBF        : 1;            /*!< [1..1] Iutput Buffer Full Status                                          */
      __IOM uint32_t STS0       : 1;            /*!< [2..2] Genral Purpose Status0                                             */
      __IM  uint32_t CMDSEL     : 1;            /*!< [3..3] Command/Data Seletion                                              */
      __IOM uint32_t BURST      : 1;            /*!< [4..4] Burst Mode Bit                                                     */
      __IOM uint32_t STS2       : 1;            /*!< [5..5] Genral Purpose Status2                                             */
      __IOM uint32_t STS3       : 1;            /*!< [6..6] Genral Purpose Status3                                             */
      __IOM uint32_t STS4       : 1;            /*!< [7..7] Genral Purpose Status4                                             */
            uint32_t            : 24;
    } STS_b;
  } ;
  
  union {
    __IOM uint32_t IB;                          /*!< (@ 0x00000004) INPUT BUFFER REGISTER                                      */
    
    struct {
      __IOM uint32_t IBDAT      : 8;            /*!< [7..0] Inpurt Buffer Data                                                 */
      __IOM uint32_t IBCLR      : 1;            /*!< [8..8] Input Buffer Clear                                                 */
            uint32_t            : 23;
    } IB_b;
  } ;
  
  union {
    __IOM uint32_t OB;                          /*!< (@ 0x00000008) OUTPUT BUFFER REGISTER                                     */
    
    struct {
      __IOM uint32_t OBDAT      : 8;            /*!< [7..0] Output Buffer Data                                                 */
      __IOM uint32_t OBCLR      : 1;            /*!< [8..8] Output Buffer Clear                                                */
            uint32_t            : 23;
    } OB_b;
  } ;
  
  union {
    __IOM uint32_t PTADDR;                      /*!< (@ 0x0000000C) PORT ADDRESS REGISTER                                      */
    
    struct {
      __IOM uint32_t ADDR       : 12;           /*!< [11..0] Data Port Address                                                 */
      __IOM uint32_t OFFSET     : 3;            /*!< [14..12] Coomand Port Offset                                              */
            uint32_t            : 17;
    } PTADDR_b;
  } ;
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000010) INTERRUPT ENABLE REGISTER                                  */
    
    struct {
      __IOM uint32_t OBFINTEN   : 1;            /*!< [0..0] Output Buffer Interrupt Enable                                     */
      __IOM uint32_t IBFINTEN   : 1;            /*!< [1..1] Iutput Buffer Interrupt Enable                                     */
            uint32_t            : 30;
    } INTEN_b;
  } ;
  
  union {
    __IOM uint32_t VWCTRL0;                     /*!< (@ 0x00000014) VIRTUAL WIRE CONTROL REGISTER #0                           */
    
    struct {
      __IOM uint32_t IRQEN      : 1;            /*!< [0..0] Auto IRQ Enable                                                    */
      __IOM uint32_t TGLV       : 1;            /*!< [1..1] Trigger Level Select                                               */
            uint32_t            : 30;
    } VWCTRL0_b;
  } ;
  
  union {
    __IOM uint32_t VWCTRL1;                     /*!< (@ 0x00000018) VIRTUAL WIRE CONTROL REGISTER #1                           */
    
    struct {
      __IOM uint32_t IRQNUM     : 8;            /*!< [7..0] IRQ Number                                                         */
      __IOM uint32_t ACTEN      : 1;            /*!< [8..8] Activate Enable                                                    */
            uint32_t            : 23;
    } VWCTRL1_b;
  } ;
} ACPI_Type;                                    /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                          PMPORT0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief PM Port Controller (PMPORT0)
  */

typedef struct {                                /*!< (@ 0x400A021C) PMPORT0 Structure                                          */
  
  union {
    __IOM uint32_t STS;                         /*!< (@ 0x00000000) STATUS REGISTER                                            */
    
    struct {
      __IM  uint32_t OBF        : 1;            /*!< [0..0] Output Buffer Full Status                                          */
      __IM  uint32_t IBF        : 1;            /*!< [1..1] Iutput Buffer Full Status                                          */
      __IOM uint32_t STS0       : 1;            /*!< [2..2] Genral Purpose Status0                                             */
      __IM  uint32_t CMDSEL     : 1;            /*!< [3..3] Command/Data Seletion                                              */
      __IOM uint32_t STS1       : 1;            /*!< [4..4] Genral Purpose Status1                                             */
      __IOM uint32_t STS2       : 1;            /*!< [5..5] Genral Purpose Status2                                             */
      __IOM uint32_t STS3       : 1;            /*!< [6..6] Genral Purpose Status3                                             */
      __IOM uint32_t STS4       : 1;            /*!< [7..7] Genral Purpose Status4                                             */
            uint32_t            : 24;
    } STS_b;
  } ;
  
  union {
    __IOM uint32_t IB;                          /*!< (@ 0x00000004) INPUT BUFFER REGISTER                                      */
    
    struct {
      __IOM uint32_t IBDAT      : 8;            /*!< [7..0] Inpurt Buffer Data                                                 */
      __IOM uint32_t IBCLR      : 1;            /*!< [8..8] Input Buffer Clear                                                 */
            uint32_t            : 23;
    } IB_b;
  } ;
  
  union {
    __IOM uint32_t OB;                          /*!< (@ 0x00000008) OUTPUT BUFFER REGISTER                                     */
    
    struct {
      __IOM uint32_t OBDAT      : 8;            /*!< [7..0] Output Buffer Data                                                 */
      __IOM uint32_t OBCLR      : 1;            /*!< [8..8] Output Buffer Clear                                                */
            uint32_t            : 23;
    } OB_b;
  } ;
  
  union {
    __IOM uint32_t PTADDR;                      /*!< (@ 0x0000000C) PORT ADDRESS REGISTER                                      */
    
    struct {
      __IOM uint32_t ADDR       : 12;           /*!< [11..0] Data Port Address                                                 */
      __IOM uint32_t OFFSET     : 3;            /*!< [14..12] Coomand Port Offset                                              */
            uint32_t            : 17;
    } PTADDR_b;
  } ;
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000010) INTERRUPT ENABLE REGISTER                                  */
    
    struct {
      __IOM uint32_t OBFINTEN   : 1;            /*!< [0..0] Output Buffer Interrupt Enable                                     */
      __IOM uint32_t IBFINTEN   : 1;            /*!< [1..1] Iutput Buffer Interrupt Enable                                     */
            uint32_t            : 30;
    } INTEN_b;
  } ;
  
  union {
    __IOM uint32_t VWCTRL0;                     /*!< (@ 0x00000014) VIRTUAL WIRE CONTROL REGISTER #0                           */
    
    struct {
      __IOM uint32_t IRQEN      : 1;            /*!< [0..0] Auto IRQ Enable                                                    */
      __IOM uint32_t TGLV       : 1;            /*!< [1..1] Trigger Level Select                                               */
            uint32_t            : 30;
    } VWCTRL0_b;
  } ;
  
  union {
    __IOM uint32_t VWCTRL1;                     /*!< (@ 0x00000018) VIRTUAL WIRE CONTROL REGISTER #1                           */
    
    struct {
      __IOM uint32_t IRQNUM     : 8;            /*!< [7..0] IRQ Number                                                         */
      __IOM uint32_t ACTEN      : 1;            /*!< [8..8] Activate Enable                                                    */
            uint32_t            : 23;
    } VWCTRL1_b;
  } ;
} PMPORT_Type;                                  /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                           DIO0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Dedicated I/O Controller (DIO0)
  */

typedef struct {                                /*!< (@ 0x400A02C0) DIO0 Structure                                             */
  
  union {
    __IOM uint32_t ADDR;                        /*!< (@ 0x00000000) BASE ADDRESS REGISTER                                      */
    
    struct {
      __IOM uint32_t ADDR       : 16;           /*!< [15..0] Base address                                                      */
            uint32_t            : 16;
    } ADDR_b;
  } ;
  
  union {
    __IOM uint32_t CFG;                         /*!< (@ 0x00000004) DIO ENABLE REGISTER                                        */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Dedicated I/O Activate                                             */
            uint32_t            : 31;
    } CFG_b;
  } ;
} DIO_Type;                                     /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                          PORT80                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief PORT80 Controller (PORT80)
  */

typedef struct {                                /*!< (@ 0x400A0400) PORT80 Structure                                           */
  
  union {
    __IM  uint32_t STS;                         /*!< (@ 0x00000000) STATUS REGISTER                                            */
    
    struct {
      __IM  uint32_t FIFOEM     : 1;            /*!< [0..0] FIFO Empty Status                                                  */
      __IM  uint32_t FIFOFUL    : 1;            /*!< [1..1] FIFO Full Status                                                   */
      __IM  uint32_t FIFOOVRN   : 1;            /*!< [2..2] FIFO Overrun Status                                                */
            uint32_t            : 29;
    } STS_b;
  } ;
  
  union {
    __IOM uint32_t CFG;                         /*!< (@ 0x00000004) CONFIGURATION REGISTER                                     */
    
    struct {
      __IOM uint32_t CLRFLG     : 1;            /*!< [0..0] Clear Flag                                                         */
      __IOM uint32_t THRE       : 2;            /*!< [2..1] FIFO Threshold Selection                                           */
            uint32_t            : 4;
      __IOM uint32_t THREEN     : 1;            /*!< [7..7] Enable Threshold                                                   */
      __IOM uint32_t UARTPASS   : 1;            /*!< [8..8] Enable Port80 Decode to UART                                       */
            uint32_t            : 23;
    } CFG_b;
  } ;
  
  union {
    __IOM uint32_t INTEN;                       /*!< (@ 0x00000008) INTERRUPT ENABLE REGISTER                                  */
    
    struct {
      __IOM uint32_t THREINTEN  : 1;            /*!< [0..0] Enable Threshold Interrupt                                         */
            uint32_t            : 31;
    } INTEN_b;
  } ;
  
  union {
    __IOM uint32_t DATA;                        /*!< (@ 0x0000000C) DATA REGISTER                                              */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] Data                                                               */
            uint32_t            : 24;
    } DATA_b;
  } ;
  
  union {
    __IOM uint32_t ADDR;                        /*!< (@ 0x00000010) ADDRESS REGISTER                                           */
    
    struct {
      __IOM uint32_t ADDR       : 8;            /*!< [7..0] Address                                                            */
            uint32_t            : 24;
    } ADDR_b;
  } ;
} PORT80_Type;                                  /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                           ESPI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief eSPI Controller (ESPI)
  */

typedef struct {                                /*!< (@ 0x400B1000) ESPI Structure                                             */
  
  union {
    __IOM uint32_t EPSTS;                       /*!< (@ 0x00000000) PERIPHERAL CH. STATUS REGISTER                             */
    
    struct {
      __IOM uint32_t MWDONE     : 1;            /*!< [0..0] Peripheral Ch. Memory Write Done                                   */
      __IOM uint32_t MWADMS     : 1;            /*!< [1..1] Peripheral Ch. Memory Address Mismatch                             */
      __IOM uint32_t MRDONE     : 1;            /*!< [2..2] Peripheral Ch. Memory Read Done                                    */
      __IOM uint32_t LTXDONE    : 1;            /*!< [3..3] Peripheral Ch. LTR Message Tx Done                                 */
            uint32_t            : 28;
    } EPSTS_b;
  } ;
  
  union {
    __IOM uint32_t EPCFG;                       /*!< (@ 0x00000004) PERIPHERAL CH. CONFIGURTAION REGISTER                      */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Peripheral Ch. Enable                                              */
      __IOM uint32_t CHRDY      : 1;            /*!< [1..1] Peripheral Ch. Ready                                               */
      __IOM uint32_t BMTREN     : 1;            /*!< [2..2] Peripheral Ch. Bus Master Enable                                   */
            uint32_t            : 1;
      __IOM uint32_t MXPLSUP    : 3;            /*!< [6..4] Peripheral Ch. Maximum Payload Size Supported                      */
            uint32_t            : 1;
      __IOM uint32_t MXPLSEL    : 3;            /*!< [10..8] Peripheral Ch. Maximum Payload Size Selected                      */
            uint32_t            : 1;
      __IOM uint32_t MXRDSZ     : 3;            /*!< [14..12] Peripheral Ch. Maximum Read Request Size                         */
            uint32_t            : 17;
    } EPCFG_b;
  } ;
  
  union {
    __IOM uint32_t EPINTEN;                     /*!< (@ 0x00000008) PERIPHERAL CH. INTERRUPT ENABLE REGISTER                   */
    
    struct {
      __IOM uint32_t CFGCHGEN   : 1;            /*!< [0..0] Peripheral Ch. Configuration Change Interrupt Enable               */
      __IOM uint32_t MEMWREN    : 1;            /*!< [1..1] Peripheral Ch. Memory Write Interrupt Enable                       */
      __IOM uint32_t MEMRDEN    : 1;            /*!< [2..2] Peripheral Ch. Memory Read Interrupt Enable                        */
            uint32_t            : 29;
    } EPINTEN_b;
  } ;
  
  union {
    __IM  uint32_t EPRXINFO;                    /*!< (@ 0x0000000C) PERIPHERAL CH. RECEIVE PACKET INFORMATION REGISTER         */
    
    struct {
      __IM  uint32_t LENGTH     : 12;           /*!< [11..0] Peripheral Ch. Rx Command Length                                  */
      __IM  uint32_t TAG        : 4;            /*!< [15..12] Peripheral Ch. RX Command Tag                                    */
      __IM  uint32_t CYCLE      : 8;            /*!< [23..16] Peripheral Ch. RX Command Cycle                                  */
      __IM  uint32_t OPCODE     : 8;            /*!< [31..24] Peripheral Ch. RX Command Opcode                                 */
    } EPRXINFO_b;
  } ;
  __IOM uint32_t  EPRXADRH;                     /*!< (@ 0x00000010) PERIPHERAL CH. RECEIVE ADDRESS HIGH REGISTER               */
  __IOM uint32_t  EPRXADRL;                     /*!< (@ 0x00000014) PERIPHERAL CH. RECEIVE ADDRESS LOW REGISTER                */
  __IOM uint32_t  EPCPRADR;                     /*!< (@ 0x00000018) PERIPHERAL CH. COMPARE ADDRESS REGISTER                    */
  
  union {
    __IOM uint32_t EPCPRVLD;                    /*!< (@ 0x0000001C) PERIPHERAL CH. COMPARE ADDRESS VALID REGISTER              */
    
    struct {
      __IOM uint32_t VALIDEN    : 1;            /*!< [0..0] Peripheral Ch. Memory Write Address Compare Enable                 */
            uint32_t            : 31;
    } EPCPRVLD_b;
  } ;
  __IOM uint32_t  EPBUF;                        /*!< (@ 0x00000020) PERIPHERAL CH. BUFFER REGISTER                             */
  
  union {
    __IOM uint32_t EPBUFSZ;                     /*!< (@ 0x00000024) PERIPHERAL CH. BUFFER SIZE REGISTER                        */
    
    struct {
      __IOM uint32_t SIZE       : 4;            /*!< [3..0] Peripheral Ch. Memory Buffer Size                                  */
            uint32_t            : 28;
    } EPBUFSZ_b;
  } ;
  
  union {
    __IOM uint32_t EPPTRCLR;                    /*!< (@ 0x00000028) PERIPHERAL CH. POINTER CLEAR REGISTER                      */
    
    struct {
      __IOM uint32_t WRCLR      : 1;            /*!< [0..0] Reset Peripheral Ch. Memory Write Pointer                          */
      __IOM uint32_t RDCLR      : 1;            /*!< [1..1] Reset Peripheral Ch. Memory Read Pointer                           */
            uint32_t            : 30;
    } EPPTRCLR_b;
  } ;
  
  union {
    __IOM uint32_t ELMSG;                       /*!< (@ 0x0000002C) PERIPHERAL CH. LTR MESSAGE REGISTER                        */
    
    struct {
      __IOM uint32_t MSGDAT     : 16;           /*!< [15..0] Data of LTR Message to be Transfered                              */
      __IOM uint32_t MSGCODE    : 16;           /*!< [31..16] Code of LTR Message to be Transfered                             */
    } ELMSG_b;
  } ;
  __IOM uint32_t  EPMRDA;                       /*!< (@ 0x00000030) PERIPHERAL CH. MEMORY RECEIVE DATA REGISTER                */
  __IOM uint32_t  EPMRADRL;                     /*!< (@ 0x00000034) PERIPHERAL CH. MEMORY RECEIVE ADDRESS LOW REGISTER         */
  __IOM uint32_t  EPMRADRH;                     /*!< (@ 0x00000038) PERIPHERAL CH. MEMORY RECEIVE ADDRESS HIGH REGISTER        */
  
  union {
    __IOM uint32_t EPMRLEN;                     /*!< (@ 0x0000003C) PERIPHERAL CH. MEMORY RECEIVE LENGTH REGISTER              */
    
    struct {
      __IOM uint32_t RXLEN      : 12;           /*!< [11..0] Peripheral Ch. Memory Receive Length                              */
            uint32_t            : 20;
    } EPMRLEN_b;
  } ;
  
  union {
    __IOM uint32_t EVSTS;                       /*!< (@ 0x00000040) VIRTUAL WIRE CH. STATUS REGISTER                           */
    
    struct {
      __IM  uint32_t RXEPT      : 1;            /*!< [0..0] Virtual Wire Ch. Rx FIFO Empty                                     */
      __IOM uint32_t RXOVR      : 1;            /*!< [1..1] Virtual Wire Ch. Rx FIFO Overrun                                   */
      __IM  uint32_t TXFULL     : 1;            /*!< [2..2] Virtual Wire Ch. Tx FIFO Full                                      */
      __IOM uint32_t ILLCHG     : 1;            /*!< [3..3] Virtual Wire Ch. Illegal Index                                     */
      __IOM uint32_t IDX2CHG    : 1;            /*!< [4..4] Virtual Wire Ch. Index2 Changed                                    */
      __IOM uint32_t IDX3CHG    : 1;            /*!< [5..5] Virtual Wire Ch. Index3 Changed                                    */
      __IOM uint32_t IDX7CHG    : 1;            /*!< [6..6] Virtual Wire Ch. Index7 Changed                                    */
      __IOM uint32_t IDX41CHG   : 1;            /*!< [7..7] Virtual Wire Ch. Index41 Changed                                   */
      __IOM uint32_t IDX42CHG   : 1;            /*!< [8..8] Virtual Wire Ch. Index42 Changed                                   */
      __IOM uint32_t IDX43CHG   : 1;            /*!< [9..9] Virtual Wire Ch. Index43 Changed                                   */
      __IOM uint32_t IDX44CHG   : 1;            /*!< [10..10] Virtual Wire Ch. Index44 Changed                                 */
      __IOM uint32_t IDX47CHG   : 1;            /*!< [11..11] Virtual Wire Ch. Index47 Changed                                 */
      __IOM uint32_t IDX4ACHG   : 1;            /*!< [12..12] Virtual Wire Ch. Index4A Changed                                 */
      __IOM uint32_t IDX51CHG   : 1;            /*!< [13..13] Virtual Wire Ch. Index51 Changed                                 */
      __IOM uint32_t IDX61CHG   : 1;            /*!< [14..14] Virtual Wire Ch. Index61 Changed                                 */
      __IOM uint32_t CFGCHG     : 1;            /*!< [15..15] Virtual Wire Ch. Configuration Changed                           */
      __IOM uint32_t TXDONE     : 1;            /*!< [16..16] Virtual Wire Ch. Transaction Done                                */
      __IOM uint32_t RXIDXCLR   : 1;            /*!< [17..17] Virtual Wire Ch. Rx Index Clear                                  */
            uint32_t            : 14;
    } EVSTS_b;
  } ;
  
  union {
    __IOM uint32_t EVCFG;                       /*!< (@ 0x00000044) VIRTUAL WIRE CH. CONFIGURATION REGISTER                    */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Virtual Wire Ch. Enable                                            */
      __IOM uint32_t CHRDY      : 1;            /*!< [1..1] Virtual Wire Ch. Ready                                             */
            uint32_t            : 6;
      __IM  uint32_t MAXSUP     : 6;            /*!< [13..8] Virtual Wire Ch. Maximum Count Supported                          */
            uint32_t            : 2;
      __IM  uint32_t MAXCNT     : 6;            /*!< [21..16] Virtual Wire Ch. Maximum Operating Count                         */
            uint32_t            : 10;
    } EVCFG_b;
  } ;
  
  union {
    __IOM uint32_t EVIDX2;                      /*!< (@ 0x00000048) VIRTUAL WIRE CH. RX INDEX 2 REGISTER                       */
    
    struct {
      __IM  uint32_t RXDAT      : 8;            /*!< [7..0] Virtual Wire Ch. Index2 Receive Data                               */
            uint32_t            : 24;
    } EVIDX2_b;
  } ;
  
  union {
    __IOM uint32_t EVIDX3;                      /*!< (@ 0x0000004C) VIRTUAL WIRE CH. RX INDEX 3 REGISTER                       */
    
    struct {
      __IM  uint32_t RXDAT      : 8;            /*!< [7..0] Virtual Wire Ch. Index3 Receive Data                               */
            uint32_t            : 24;
    } EVIDX3_b;
  } ;
  
  union {
    __IOM uint32_t EVIDX7;                      /*!< (@ 0x00000050) VIRTUAL WIRE CH. RX INDEX 7 REGISTER                       */
    
    struct {
      __IM  uint32_t RXDAT      : 8;            /*!< [7..0] Virtual Wire Ch. Index7 Receive Data                               */
            uint32_t            : 24;
    } EVIDX7_b;
  } ;
  
  union {
    __IOM uint32_t EVIDX41;                     /*!< (@ 0x00000054) VIRTUAL WIRE CH. RX INDEX 41 REGISTER                      */
    
    struct {
      __IM  uint32_t RXDAT      : 8;            /*!< [7..0] Virtual Wire Ch. Index41 Receive Data                              */
            uint32_t            : 24;
    } EVIDX41_b;
  } ;
  
  union {
    __IOM uint32_t EVIDX42;                     /*!< (@ 0x00000058) VIRTUAL WIRE CH. RX INDEX 42 REGISTER                      */
    
    struct {
      __IM  uint32_t RXDAT      : 8;            /*!< [7..0] Virtual Wire Ch. Index42 Receive Data                              */
            uint32_t            : 24;
    } EVIDX42_b;
  } ;
  
  union {
    __IOM uint32_t EVIDX43;                     /*!< (@ 0x0000005C) VIRTUAL WIRE CH. RX INDEX 43 REGISTER                      */
    
    struct {
      __IM  uint32_t RXDAT      : 8;            /*!< [7..0] Virtual Wire Ch. Index43 Receive Data                              */
            uint32_t            : 24;
    } EVIDX43_b;
  } ;
  
  union {
    __IOM uint32_t EVIDX44;                     /*!< (@ 0x00000060) VIRTUAL WIRE CH. RX INDEX 44 REGISTER                      */
    
    struct {
      __IM  uint32_t RXDAT      : 8;            /*!< [7..0] Virtual Wire Ch. Index44 Receive Data                              */
            uint32_t            : 24;
    } EVIDX44_b;
  } ;
  
  union {
    __IOM uint32_t EVIDX47;                     /*!< (@ 0x00000064) VIRTUAL WIRE CH. RX INDEX 47 REGISTER                      */
    
    struct {
      __IM  uint32_t RXDAT      : 8;            /*!< [7..0] Virtual Wire Ch. Index47 Receive Data                              */
            uint32_t            : 24;
    } EVIDX47_b;
  } ;
  
  union {
    __IOM uint32_t EVIDX4A;                     /*!< (@ 0x00000068) VIRTUAL WIRE CH. RX INDEX 4A REGISTER                      */
    
    struct {
      __IM  uint32_t RXDAT      : 8;            /*!< [7..0] Virtual Wire Ch. Index4A Receive Data                              */
            uint32_t            : 24;
    } EVIDX4A_b;
  } ;
  
  union {
    __IOM uint32_t EVTXDAT;                     /*!< (@ 0x0000006C) VIRTUAL WIRE CH. TX DATA REGISTER                          */
    
    struct {
      __IOM uint32_t TXDAT      : 8;            /*!< [7..0] Virtual Wire Ch. Transport Data                                    */
      __IOM uint32_t TXIDX      : 8;            /*!< [15..8] Virtual Wire Ch. Transport Index                                  */
            uint32_t            : 16;
    } EVTXDAT_b;
  } ;
  
  union {
    __IOM uint32_t EVPVIDX;                     /*!< (@ 0x00000070) VIRTUAL WIRE CH. PRIVILEGE INDEX REGISTER                  */
    
    struct {
      __IM  uint32_t PVIDX      : 8;            /*!< [7..0] Virtual Wire Ch. Transport Privilege Index                         */
            uint32_t            : 24;
    } EVPVIDX_b;
  } ;
  
  union {
    __IOM uint32_t EVRXINTEN;                   /*!< (@ 0x00000074) VIRTUAL WIRE CH. RX INTERRUPT ENABLE REGISTER              */
    
    struct {
      __IOM uint32_t CFGCHGEN   : 1;            /*!< [0..0] Virtual Wire Ch. Configuration Change Interrupt Enable             */
            uint32_t            : 1;
      __IOM uint32_t RXCHGEN    : 1;            /*!< [2..2] Virtual Wire Ch. Recevie Data Change Interrupt Enable              */
            uint32_t            : 29;
    } EVRXINTEN_b;
  } ;
  
  union {
    __IOM uint32_t EVTXINTEN;                   /*!< (@ 0x00000078) VIRTUAL WIRE CH. TX INTERRUPT ENABLE REGISTER              */
    
    struct {
      __IOM uint32_t TXMPTEN    : 1;            /*!< [0..0] Virtual Wire Ch. Tx FIFO Empty Interrupt Enable                    */
            uint32_t            : 31;
    } EVTXINTEN_b;
  } ;
  
  union {
    __IOM uint32_t EOSTS;                       /*!< (@ 0x0000007C) OOB CH. STATUS REGISTER                                    */
    
    struct {
      __IM  uint32_t RXPND      : 1;            /*!< [0..0] OOB Ch. RX FIFO Pending                                            */
      __IOM uint32_t RXDONE     : 1;            /*!< [1..1] OOB Ch. Receive Done                                               */
      __IM  uint32_t TXPND      : 1;            /*!< [2..2] OOB Ch. TX FIFO Pending                                            */
      __IOM uint32_t TXDONE     : 1;            /*!< [3..3] OOB Ch. Transaction Done                                           */
      __IOM uint32_t CFGENCHG   : 1;            /*!< [4..4] OOB Ch. Configuration Channel Enable Changed                       */
            uint32_t            : 27;
    } EOSTS_b;
  } ;
  
  union {
    __IOM uint32_t EOCFG;                       /*!< (@ 0x00000080) OOB CH. CONFIGURATION REGISTER                             */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] OOB Ch. Enable                                                     */
      __IOM uint32_t CHRDY      : 1;            /*!< [1..1] OOB Ch. Ready                                                      */
            uint32_t            : 2;
      __IM  uint32_t MXSZSUP    : 3;            /*!< [6..4] OOB Ch. Maximum Payload Size Supported                             */
            uint32_t            : 1;
      __IM  uint32_t MXSZSEL    : 3;            /*!< [10..8] OOB Ch. Maximum Payload Size Selected                             */
            uint32_t            : 21;
    } EOCFG_b;
  } ;
  
  union {
    __IOM uint32_t EORXINTEN;                   /*!< (@ 0x00000084) OOB CH. RX INTERRUPT ENABLE REGISTER                       */
    
    struct {
      __IOM uint32_t CHENCHG    : 1;            /*!< [0..0] OOB Ch. Configuration Channel Enable Changed Interrupt
                                                     Enable                                                                    */
      __IOM uint32_t RXEN       : 1;            /*!< [1..1] OOB Ch. Rx Interrupt Enable                                        */
            uint32_t            : 30;
    } EORXINTEN_b;
  } ;
  __IOM uint32_t  EORXBUF;                      /*!< (@ 0x00000088) OOB CH. RX BUFFER REGISTER                                 */
  
  union {
    __IOM uint32_t EORXLEN;                     /*!< (@ 0x0000008C) OOB CH. RX LENGTH REGISTER                                 */
    
    struct {
      __IOM uint32_t LENGTH     : 12;           /*!< [11..0] OOB Ch. Rx Length                                                 */
            uint32_t            : 20;
    } EORXLEN_b;
  } ;
  __IOM uint32_t  EOTXBUF;                      /*!< (@ 0x00000090) OOB CH. TX BUFFER REGISTER                                 */
  
  union {
    __IOM uint32_t EOTXLEN;                     /*!< (@ 0x00000094) OOB CH. TX LENGTH REGISTER                                 */
    
    struct {
      __IOM uint32_t LENGTH     : 12;           /*!< [11..0] OOB Ch. Tx Length                                                 */
            uint32_t            : 20;
    } EOTXLEN_b;
  } ;
  
  union {
    __IOM uint32_t EOTXCTRL;                    /*!< (@ 0x00000098) OOB CH. TX CONTROL REGISTER                                */
    
    struct {
      __IOM uint32_t TXSTR      : 1;            /*!< [0..0] Kick OOB Ch. Start to Transaction                                  */
            uint32_t            : 31;
    } EOTXCTRL_b;
  } ;
  
  union {
    __IOM uint32_t EOTXINTEN;                   /*!< (@ 0x0000009C) OOB CH. TX INTERRUPT ENABLE REGISTER                       */
    
    struct {
      __IOM uint32_t TXEN       : 1;            /*!< [0..0] OOB Ch. Tx Interrupt Enable                                        */
            uint32_t            : 31;
    } EOTXINTEN_b;
  } ;
  
  union {
    __IOM uint32_t EFSTS;                       /*!< (@ 0x000000A0) FLASH CH. STATUS REGISTER                                  */
    
    struct {
      __IOM uint32_t MAFTXDN    : 1;            /*!< [0..0] Flash Ch. MAF Transfer Done                                        */
      __IOM uint32_t MAFREOVR   : 1;            /*!< [1..1] Flash Ch. MAF Overrun                                              */
      __IOM uint32_t MAFREUDR   : 1;            /*!< [2..2] Flash Ch. MAF Underrun                                             */
      __IOM uint32_t SAFDONE    : 1;            /*!< [3..3] Flash Ch. SAF Transfer Done                                        */
      __IOM uint32_t SAFRW      : 1;            /*!< [4..4] Flash Ch. SAF Transfer Type                                        */
      __IOM uint32_t SAFERS     : 1;            /*!< [5..5] Flash Ch. SAF Transfer Type Erase                                  */
      __IOM uint32_t CHENCHG    : 1;            /*!< [6..6] Flash Ch. Configuration Channel Enable Changed                     */
      __IOM uint32_t RPMCOP2    : 1;            /*!< [7..7] Flash Ch. Receive RPMC OP2 Command                                 */
            uint32_t            : 24;
    } EFSTS_b;
  } ;
  
  union {
    __IOM uint32_t EFCONF;                      /*!< (@ 0x000000A4) FLASH CH. CONFIGURATION REGISTER                           */
    
    struct {
      __IOM uint32_t CHEN       : 1;            /*!< [0..0] Flash Access Ch. Enable                                            */
      __IOM uint32_t CHRDY      : 1;            /*!< [1..1] Flash Access Ch. Ready                                             */
      __IOM uint32_t ERBLKSZ    : 3;            /*!< [4..2] Flash Block Erase Size                                             */
      __IOM uint32_t MXPLSUP    : 3;            /*!< [7..5] Flash Access Channel Maximum Payload Size Supported                */
      __IOM uint32_t MXPLSEL    : 3;            /*!< [10..8] Flash Access Channel Maximum Payload Size Selected                */
      __IOM uint32_t SHAREMD    : 1;            /*!< [11..11] Flash Sharing Mode                                               */
      __IOM uint32_t MXRDSZ     : 3;            /*!< [14..12] Flash Access Channel Maximum Read Request Size                   */
            uint32_t            : 1;
      __IOM uint32_t SHARECAPSP : 2;            /*!< [17..16] Flash Sharing Capability Supported                               */
            uint32_t            : 2;
      __IOM uint32_t RPMCCNT1   : 4;            /*!< [23..20] RPMC Counter on the 1st RPMC Flash device                        */
      __IOM uint32_t RPMCOP1    : 8;            /*!< [31..24] RPMC OP1 Opcode on the 1st RPMC Flash device                     */
    } EFCONF_b;
  } ;
  __IOM uint32_t  EMADR;                        /*!< (@ 0x000000A8) FLASH CH. MAF FLASH ADDRESS REGISTER                       */
  
  union {
    __IOM uint32_t EMTRLEN;                     /*!< (@ 0x000000AC) FLASH CH. MAF TRANSFER LENGTH REGISTER                     */
    
    struct {
      __IOM uint32_t TRLEN      : 12;           /*!< [11..0] Flash Ch. MAF Tx Length                                           */
            uint32_t            : 20;
    } EMTRLEN_b;
  } ;
  __IOM uint32_t  EMBUF;                        /*!< (@ 0x000000B0) FLASH CH. MAF BUFFER REGISTER                              */
  
  union {
    __IOM uint32_t EMCTRL;                      /*!< (@ 0x000000B4) FLASH CH. MAF CONTROL REGISTER                             */
    
    struct {
      __IOM uint32_t START      : 1;            /*!< [0..0] Kick Flash Ch. MAF Start to Transaction                            */
      __IOM uint32_t MDSEL      : 2;            /*!< [2..1] Flash Ch. MAF TR Mode selection                                    */
            uint32_t            : 29;
    } EMCTRL_b;
  } ;
  
  union {
    __IOM uint32_t EMINTEN;                     /*!< (@ 0x000000B8) FLASH CH. MAF INTERRUPT ENABLE REGISTER                    */
    
    struct {
      __IOM uint32_t CHENCHG    : 1;            /*!< [0..0] Flash Ch. Configuration Channel Enable Changed Interrupt
                                                     Enable                                                                    */
      __IOM uint32_t TRDONEEN   : 1;            /*!< [1..1] Flash Ch. MAF Transfer Done Interrupt Enable                       */
            uint32_t            : 30;
    } EMINTEN_b;
  } ;
  __IOM uint32_t  ESBUF;                        /*!< (@ 0x000000BC) FLASH CH. SAF BUFFER REGISTER #0                           */
  
  union {
    __IOM uint32_t ESINTEN;                     /*!< (@ 0x000000C0) FLASH CH. SAF INTERRUPT ENABLE REGISTER                    */
    
    struct {
      __IOM uint32_t TRDONEEN   : 1;            /*!< [0..0] Flash Ch. SAF Transfer Done Interrupt Enable                       */
      __IOM uint32_t ERASEEN    : 1;            /*!< [1..1] Flash Ch. SAF Erase Interrupt Enable                               */
      __IOM uint32_t RPMCEN     : 1;            /*!< [2..2] Flash Ch. SAF RPMC OP2 Interrupt Enable                            */
            uint32_t            : 29;
    } ESINTEN_b;
  } ;
  __IOM uint32_t  ESRXADR;                      /*!< (@ 0x000000C4) FLASH CH. SAF RECEIVE ADDRESS REGISTER                     */
  
  union {
    __IOM uint32_t ESRXLEN;                     /*!< (@ 0x000000C8) FLASH CH. SAF RECEIVE LENGTH REGISTER                      */
    
    struct {
      __IM  uint32_t LENGTH     : 12;           /*!< [11..0] Peripheral Ch. RX Command Length                                  */
            uint32_t            : 20;
    } ESRXLEN_b;
  } ;
  
  union {
    __IOM uint32_t ESPICFG;                     /*!< (@ 0x000000CC) GENERAL CONFIGURATION REGISTER                             */
    
    struct {
      __IOM uint32_t CHSUP      : 8;            /*!< [7..0] Channel Supported                                                  */
            uint32_t            : 4;
      __IOM uint32_t MXWAITALW  : 4;            /*!< [15..12] Maximum WAIT STATE Allowed                                       */
      __IOM uint32_t MXFREQSUP  : 3;            /*!< [18..16] Maximum Frequency Supported                                      */
      __IOM uint32_t ODALRSUP   : 1;            /*!< [19..19] Open Drain Alert Supported                                       */
      __IOM uint32_t OPFREQ     : 3;            /*!< [22..20] Operating Frequency                                              */
      __IOM uint32_t ODALRSEL   : 1;            /*!< [23..23] Open Drain Alert Select                                          */
      __IOM uint32_t IOSUP      : 2;            /*!< [25..24] I/O Mode Support                                                 */
      __IOM uint32_t IOSEL      : 2;            /*!< [27..26] I/O Mode Select                                                  */
      __IOM uint32_t ALRMODE    : 1;            /*!< [28..28] Alert Mode                                                       */
      __IOM uint32_t RTCINBMC   : 1;            /*!< [29..29] RTC-Integrated-BMC                                               */
      __IOM uint32_t RSPMDFEN   : 1;            /*!< [30..30] Response Modifier Enable                                         */
      __IOM uint32_t CRCCHKEN   : 1;            /*!< [31..31] CRC Checking Enable                                              */
    } ESPICFG_b;
  } ;
  __IOM uint32_t  ERSTCFG;                      /*!< (@ 0x000000D0) RESET PIN INTERRUPT CONFIGURATION REGISTER                 */
  
  union {
    __IOM uint32_t EVIDX51;                     /*!< (@ 0x000000D4) VIRTUAL WIRE CH. RX INDEX 51 REGISTER                      */
    
    struct {
      __IM  uint32_t RXDAT      : 8;            /*!< [7..0] Virtual Wire Ch. Index51 Receive Data                              */
            uint32_t            : 24;
    } EVIDX51_b;
  } ;
  
  union {
    __IOM uint32_t EVIDX61;                     /*!< (@ 0x000000D8) VIRTUAL WIRE CH. RX INDEX 61 REGISTER                      */
    
    struct {
      __IM  uint32_t RXDAT      : 8;            /*!< [7..0] Virtual Wire Ch. Index61 Receive Data                              */
            uint32_t            : 24;
    } EVIDX61_b;
  } ;
  __IOM uint32_t  ESRXC;                        /*!< (@ 0x000000DC) FLASH CH. SAF RECEIVE CYCLE TYPE REGISTER                  */
  
  union {
    __IOM uint32_t EFCFG2;                      /*!< (@ 0x000000E0) FLASH CH. SAF CONFIG #2 REGISTER                           */
    
    struct {
      __IOM uint32_t MXRDSZ     : 3;            /*!< [2..0] Target Maximum Read Request Size Supported                         */
            uint32_t            : 5;
      __IOM uint32_t ERBLKSZ    : 8;            /*!< [15..8] Target Flash Erase Block Size                                     */
      __IOM uint32_t RPMCSP     : 6;            /*!< [21..16] Target RPMC Supported                                            */
      __IOM uint32_t NUMRPMC    : 2;            /*!< [23..22] Number of Target Attached Flash RPMC flash devices               */
            uint32_t            : 8;
    } EFCFG2_b;
  } ;
  
  union {
    __IOM uint32_t EFCFG3;                      /*!< (@ 0x000000E4) FLASH CH. SAF CONFIG #3 REGISTER                           */
    
    struct {
            uint32_t            : 20;
      __IOM uint32_t RPMCCNT2   : 4;            /*!< [23..20] RPMC Counter on the 2nd RPMC Flash device                        */
      __IOM uint32_t RPMCOP2    : 8;            /*!< [31..24] RPMC OP1 Opcode on the 2nd RPMC Flash device                     */
    } EFCFG3_b;
  } ;
  
  union {
    __IOM uint32_t EFCFG4;                      /*!< (@ 0x000000E8) FLASH CH. SAF CONFIG #4 REGISTER                           */
    
    struct {
            uint32_t            : 4;
      __IOM uint32_t RPMCCNT3   : 4;            /*!< [7..4] RPMC Counter on the 3rd RPMC Flash device                          */
      __IOM uint32_t RPMCOP3    : 8;            /*!< [15..8] RPMC OP1 Opcode on the 3rd RPMC Flash device                      */
            uint32_t            : 4;
      __IOM uint32_t RPMCCNT4   : 4;            /*!< [23..20] RPMC Counter on the 4th RPMC Flash device                        */
      __IOM uint32_t RPMCOP4    : 8;            /*!< [31..24] RPMC OP1 Opcode on the 4th RPMC Flash device                     */
    } EFCFG4_b;
  } ;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t ELCTRL;                      /*!< (@ 0x000000F8) PERIPHERAL CH. LTR CONTROL REGISTER                        */
    
    struct {
      __IOM uint32_t TXSTR      : 1;            /*!< [0..0] Kick LTR Start to Transaction                                      */
            uint32_t            : 31;
    } ELCTRL_b;
  } ;
  __IOM uint32_t  ESBUF1;                       /*!< (@ 0x000000FC) FLASH CH. SAF RPMC BUFFER1 REGISTER                        */
  
  union {
    __IOM uint32_t ESPRG0;                      /*!< (@ 0x00000100) FLASH CH. SAF PROTECTION GROUP #0 REGISTER                 */
    
    struct {
      __IOM uint32_t TAG0GRP    : 3;            /*!< [2..0] Tag #0 Group                                                       */
            uint32_t            : 1;
      __IOM uint32_t TAG1GRP    : 3;            /*!< [6..4] Tag #1 Group                                                       */
            uint32_t            : 1;
      __IOM uint32_t TAG2GRP    : 3;            /*!< [10..8] Tag #2 Group                                                      */
            uint32_t            : 1;
      __IOM uint32_t TAG3GRP    : 3;            /*!< [14..12] Tag #3 Group                                                     */
            uint32_t            : 1;
      __IOM uint32_t TAG4GRP    : 3;            /*!< [18..16] Tag #4 Group                                                     */
            uint32_t            : 1;
      __IOM uint32_t TAG5GRP    : 3;            /*!< [22..20] Tag #5 Group                                                     */
            uint32_t            : 1;
      __IOM uint32_t TAG6GRP    : 3;            /*!< [26..24] Tag #6 Group                                                     */
            uint32_t            : 1;
      __IOM uint32_t TAG7GRP    : 3;            /*!< [30..28] Tag #7 Group                                                     */
            uint32_t            : 1;
    } ESPRG0_b;
  } ;
  
  union {
    __IOM uint32_t ESPRG1;                      /*!< (@ 0x00000104) FLASH CH. SAF PROTECTION GROUP #1 REGISTER                 */
    
    struct {
      __IOM uint32_t TAG8GRP    : 3;            /*!< [2..0] Tag #8 Group                                                       */
            uint32_t            : 1;
      __IOM uint32_t TAG9GRP    : 3;            /*!< [6..4] Tag #9 Group                                                       */
            uint32_t            : 1;
      __IOM uint32_t TAGAGRP    : 3;            /*!< [10..8] Tag #A Group                                                      */
            uint32_t            : 1;
      __IOM uint32_t TAGBGRP    : 3;            /*!< [14..12] Tag #B Group                                                     */
            uint32_t            : 1;
      __IOM uint32_t TAGCGRP    : 3;            /*!< [18..16] Tag #C Group                                                     */
            uint32_t            : 1;
      __IOM uint32_t TAGDGRP    : 3;            /*!< [22..20] Tag #D Group                                                     */
            uint32_t            : 1;
      __IOM uint32_t TAGEGRP    : 3;            /*!< [26..24] Tag #E Group                                                     */
            uint32_t            : 1;
      __IOM uint32_t TAGFGRP    : 3;            /*!< [30..28] Tag #F Group                                                     */
            uint32_t            : 1;
    } ESPRG1_b;
  } ;
  
  union {
    __IOM uint32_t ESPDRT;                      /*!< (@ 0x00000108) FLASH CH. SAF PROTECTION DIRTY REGISTER                    */
    
    struct {
      __IOM uint32_t TAG0DRT    : 1;            /*!< [0..0] Tag #0 Dirty                                                       */
      __IOM uint32_t TAG1DRT    : 1;            /*!< [1..1] Tag #1 Dirty                                                       */
      __IOM uint32_t TAG2DRT    : 1;            /*!< [2..2] Tag #2 Dirty                                                       */
      __IOM uint32_t TAG3DRT    : 1;            /*!< [3..3] Tag #3 Dirty                                                       */
      __IOM uint32_t TAG4DRT    : 1;            /*!< [4..4] Tag #4 Dirty                                                       */
      __IOM uint32_t TAG5DRT    : 1;            /*!< [5..5] Tag #5 Dirty                                                       */
      __IOM uint32_t TAG6DRT    : 1;            /*!< [6..6] Tag #6 Dirty                                                       */
      __IOM uint32_t TAG7DRT    : 1;            /*!< [7..7] Tag #7 Dirty                                                       */
      __IOM uint32_t TAG8DRT    : 1;            /*!< [8..8] Tag #8 Dirty                                                       */
      __IOM uint32_t TAG9DRT    : 1;            /*!< [9..9] Tag #9 Dirty                                                       */
      __IOM uint32_t TAGADRT    : 1;            /*!< [10..10] Tag #A Dirty                                                     */
      __IOM uint32_t TAGBDRT    : 1;            /*!< [11..11] Tag #B Dirty                                                     */
      __IOM uint32_t TAGCDRT    : 1;            /*!< [12..12] Tag #C Dirty                                                     */
      __IOM uint32_t TAGDDRT    : 1;            /*!< [13..13] Tag #D Dirty                                                     */
      __IOM uint32_t TAGEDRT    : 1;            /*!< [14..14] Tag #E Dirty                                                     */
      __IOM uint32_t TAGFDRT    : 1;            /*!< [15..15] Tag #F Dirty                                                     */
            uint32_t            : 16;
    } ESPDRT_b;
  } ;
  
  union {
    __IOM uint32_t ESP0STR;                     /*!< (@ 0x0000010C) FLASH CH. SAF REGION #0 START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESP0STR_b;
  } ;
  
  union {
    __IOM uint32_t ESP1STR;                     /*!< (@ 0x00000110) FLASH CH. SAF REGION #1 START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESP1STR_b;
  } ;
  
  union {
    __IOM uint32_t ESP2STR;                     /*!< (@ 0x00000114) FLASH CH. SAF REGION #2 START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESP2STR_b;
  } ;
  
  union {
    __IOM uint32_t ESP3STR;                     /*!< (@ 0x00000118) FLASH CH. SAF REGION #3 START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESP3STR_b;
  } ;
  
  union {
    __IOM uint32_t ESP4STR;                     /*!< (@ 0x0000011C) FLASH CH. SAF REGION #4 START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESP4STR_b;
  } ;
  
  union {
    __IOM uint32_t ESP5STR;                     /*!< (@ 0x00000120) FLASH CH. SAF REGION #5 START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESP5STR_b;
  } ;
  
  union {
    __IOM uint32_t ESP6STR;                     /*!< (@ 0x00000124) FLASH CH. SAF REGION #6 START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESP6STR_b;
  } ;
  
  union {
    __IOM uint32_t ESP7STR;                     /*!< (@ 0x00000128) FLASH CH. SAF REGION #7 START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESP7STR_b;
  } ;
  
  union {
    __IOM uint32_t ESP8STR;                     /*!< (@ 0x0000012C) FLASH CH. SAF REGION #8 START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESP8STR_b;
  } ;
  
  union {
    __IOM uint32_t ESP9STR;                     /*!< (@ 0x00000130) FLASH CH. SAF REGION #9 START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESP9STR_b;
  } ;
  
  union {
    __IOM uint32_t ESPASTR;                     /*!< (@ 0x00000134) FLASH CH. SAF REGION #A START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESPASTR_b;
  } ;
  
  union {
    __IOM uint32_t ESPBSTR;                     /*!< (@ 0x00000138) FLASH CH. SAF REGION #B START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESPBSTR_b;
  } ;
  
  union {
    __IOM uint32_t ESPCSTR;                     /*!< (@ 0x0000013C) FLASH CH. SAF REGION #C START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESPCSTR_b;
  } ;
  
  union {
    __IOM uint32_t ESPDSTR;                     /*!< (@ 0x00000140) FLASH CH. SAF REGION #D START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESPDSTR_b;
  } ;
  
  union {
    __IOM uint32_t ESPESTR;                     /*!< (@ 0x00000144) FLASH CH. SAF REGION #E START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESPESTR_b;
  } ;
  
  union {
    __IOM uint32_t ESPFSTR;                     /*!< (@ 0x00000148) FLASH CH. SAF REGION #F START REGISTER                     */
    
    struct {
      __IOM uint32_t ADDR       : 20;           /*!< [19..0] Region Start Address                                              */
            uint32_t            : 12;
    } ESPFSTR_b;
  } ;
  
  union {
    __IOM uint32_t ESP0LEN;                     /*!< (@ 0x0000014C) FLASH CH. SAF REGION #0 LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESP0LEN_b;
  } ;
  
  union {
    __IOM uint32_t ESP1LEN;                     /*!< (@ 0x00000150) FLASH CH. SAF REGION #1 LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESP1LEN_b;
  } ;
  
  union {
    __IOM uint32_t ESP2LEN;                     /*!< (@ 0x00000154) FLASH CH. SAF REGION #2 LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESP2LEN_b;
  } ;
  
  union {
    __IOM uint32_t ESP3LEN;                     /*!< (@ 0x00000158) FLASH CH. SAF REGION #3 LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESP3LEN_b;
  } ;
  
  union {
    __IOM uint32_t ESP4LEN;                     /*!< (@ 0x0000015C) FLASH CH. SAF REGION #4 LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESP4LEN_b;
  } ;
  
  union {
    __IOM uint32_t ESP5LEN;                     /*!< (@ 0x00000160) FLASH CH. SAF REGION #5 LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESP5LEN_b;
  } ;
  
  union {
    __IOM uint32_t ESP6LEN;                     /*!< (@ 0x00000164) FLASH CH. SAF REGION #6 LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESP6LEN_b;
  } ;
  
  union {
    __IOM uint32_t ESP7LEN;                     /*!< (@ 0x00000168) FLASH CH. SAF REGION #7 LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESP7LEN_b;
  } ;
  
  union {
    __IOM uint32_t ESP8LEN;                     /*!< (@ 0x0000016C) FLASH CH. SAF REGION #8 LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESP8LEN_b;
  } ;
  
  union {
    __IOM uint32_t ESP9LEN;                     /*!< (@ 0x00000170) FLASH CH. SAF REGION #9 LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESP9LEN_b;
  } ;
  
  union {
    __IOM uint32_t ESPALEN;                     /*!< (@ 0x00000174) FLASH CH. SAF REGION #A LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESPALEN_b;
  } ;
  
  union {
    __IOM uint32_t ESPBLEN;                     /*!< (@ 0x00000178) FLASH CH. SAF REGION #B LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESPBLEN_b;
  } ;
  
  union {
    __IOM uint32_t ESPCLEN;                     /*!< (@ 0x0000017C) FLASH CH. SAF REGION #C LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESPCLEN_b;
  } ;
  
  union {
    __IOM uint32_t ESPDLEN;                     /*!< (@ 0x00000180) FLASH CH. SAF REGION #D LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESPDLEN_b;
  } ;
  
  union {
    __IOM uint32_t ESPELEN;                     /*!< (@ 0x00000184) FLASH CH. SAF REGION #E LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESPELEN_b;
  } ;
  
  union {
    __IOM uint32_t ESPFLEN;                     /*!< (@ 0x00000188) FLASH CH. SAF REGION #F LENGTH REGISTER                    */
    
    struct {
      __IOM uint32_t LEN        : 20;           /*!< [19..0] Region Length                                                     */
            uint32_t            : 12;
    } ESPFLEN_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRG0;                     /*!< (@ 0x0000018C) FLASH CH. SAF WRITE PROTECTION REGION #0 REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRG0_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRG0;                     /*!< (@ 0x00000190) FLASH CH. SAF READ PROTECTION REGION #0 REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRG0_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRG1;                     /*!< (@ 0x00000194) FLASH CH. SAF WRITE PROTECTION REGION #1 REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRG1_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRG1;                     /*!< (@ 0x00000198) FLASH CH. SAF READ PROTECTION REGION #1 REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRG1_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRG2;                     /*!< (@ 0x0000019C) FLASH CH. SAF WRITE PROTECTION REGION #2 REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRG2_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRG2;                     /*!< (@ 0x000001A0) FLASH CH. SAF READ PROTECTION REGION #2 REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRG2_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRG3;                     /*!< (@ 0x000001A4) FLASH CH. SAF WRITE PROTECTION REGION #3 REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRG3_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRG3;                     /*!< (@ 0x000001A8) FLASH CH. SAF READ PROTECTION REGION #3 REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRG3_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRG4;                     /*!< (@ 0x000001AC) FLASH CH. SAF WRITE PROTECTION REGION #4 REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRG4_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRG4;                     /*!< (@ 0x000001B0) FLASH CH. SAF READ PROTECTION REGION #4 REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRG4_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRG5;                     /*!< (@ 0x000001B4) FLASH CH. SAF WRITE PROTECTION REGION #5 REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRG5_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRG5;                     /*!< (@ 0x000001B8) FLASH CH. SAF READ PROTECTION REGION #5 REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRG5_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRG6;                     /*!< (@ 0x000001BC) FLASH CH. SAF WRITE PROTECTION REGION #6 REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRG6_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRG6;                     /*!< (@ 0x000001C0) FLASH CH. SAF READ PROTECTION REGION #6 REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRG6_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRG7;                     /*!< (@ 0x000001C4) FLASH CH. SAF WRITE PROTECTION REGION #7 REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRG7_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRG7;                     /*!< (@ 0x000001C8) FLASH CH. SAF READ PROTECTION REGION #7 REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRG7_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRG8;                     /*!< (@ 0x000001CC) FLASH CH. SAF WRITE PROTECTION REGION #8 REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRG8_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRG8;                     /*!< (@ 0x000001D0) FLASH CH. SAF READ PROTECTION REGION #8 REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRG8_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRG9;                     /*!< (@ 0x000001D4) FLASH CH. SAF WRITE PROTECTION REGION #9 REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRG9_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRG9;                     /*!< (@ 0x000001D8) FLASH CH. SAF READ PROTECTION REGION #9 REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRG9_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRGA;                     /*!< (@ 0x000001DC) FLASH CH. SAF WRITE PROTECTION REGION #A REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRGA_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRGA;                     /*!< (@ 0x000001E0) FLASH CH. SAF READ PROTECTION REGION #A REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRGA_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRGB;                     /*!< (@ 0x000001E4) FLASH CH. SAF WRITE PROTECTION REGION #B REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRGB_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRGB;                     /*!< (@ 0x000001E8) FLASH CH. SAF READ PROTECTION REGION #B REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRGB_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRGC;                     /*!< (@ 0x000001EC) FLASH CH. SAF WRITE PROTECTION REGION #C REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRGC_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRGC;                     /*!< (@ 0x000001F0) FLASH CH. SAF READ PROTECTION REGION #C REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRGC_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRGD;                     /*!< (@ 0x000001F4) FLASH CH. SAF WRITE PROTECTION REGION #D REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRGD_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRGD;                     /*!< (@ 0x000001F8) FLASH CH. SAF READ PROTECTION REGION #D REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRGD_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRGE;                     /*!< (@ 0x000001FC) FLASH CH. SAF WRITE PROTECTION REGION #E REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRGE_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRGE;                     /*!< (@ 0x00000200) FLASH CH. SAF READ PROTECTION REGION #E REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRGE_b;
  } ;
  
  union {
    __IOM uint32_t ESWPRGF;                     /*!< (@ 0x00000204) FLASH CH. SAF WRITE PROTECTION REGION #F REGISTER          */
    
    struct {
      __IOM uint32_t G0WREN     : 1;            /*!< [0..0] Group #0 Write Enable                                              */
      __IOM uint32_t G1WREN     : 1;            /*!< [1..1] Group #1 Write Enable                                              */
      __IOM uint32_t G2WREN     : 1;            /*!< [2..2] Group #2 Write Enable                                              */
      __IOM uint32_t G3WREN     : 1;            /*!< [3..3] Group #3 Write Enable                                              */
      __IOM uint32_t G4WREN     : 1;            /*!< [4..4] Group #4 Write Enable                                              */
      __IOM uint32_t G5WREN     : 1;            /*!< [5..5] Group #5 Write Enable                                              */
      __IOM uint32_t G6WREN     : 1;            /*!< [6..6] Group #6 Write Enable                                              */
      __IOM uint32_t G7WREN     : 1;            /*!< [7..7] Group #7 Write Enable                                              */
            uint32_t            : 24;
    } ESWPRGF_b;
  } ;
  
  union {
    __IOM uint32_t ESRPRGF;                     /*!< (@ 0x00000208) FLASH CH. SAF READ PROTECTION REGION #F REGISTER           */
    
    struct {
      __IOM uint32_t G0RDEN     : 1;            /*!< [0..0] Group #0 Read Enable                                               */
      __IOM uint32_t G1RDEN     : 1;            /*!< [1..1] Group #1 Read Enable                                               */
      __IOM uint32_t G2RDEN     : 1;            /*!< [2..2] Group #2 Read Enable                                               */
      __IOM uint32_t G3RDEN     : 1;            /*!< [3..3] Group #3 Read Enable                                               */
      __IOM uint32_t G4RDEN     : 1;            /*!< [4..4] Group #4 Read Enable                                               */
      __IOM uint32_t G5RDEN     : 1;            /*!< [5..5] Group #5 Read Enable                                               */
      __IOM uint32_t G6RDEN     : 1;            /*!< [6..6] Group #6 Read Enable                                               */
      __IOM uint32_t G7RDEN     : 1;            /*!< [7..7] Group #7 Read Enable                                               */
            uint32_t            : 24;
    } ESRPRGF_b;
  } ;
  
  union {
    __IOM uint32_t ESPREN;                      /*!< (@ 0x0000020C) FLASH CH. SAF PROTECTION ENABLE REGISTER                   */
    
    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Flash Ch. SAF Protection Enable                                    */
            uint32_t            : 31;
    } ESPREN_b;
  } ;
  
  union {
    __IOM uint32_t ESPSTS;                      /*!< (@ 0x00000210) FLASH CH. SAF PROTECTION STATUS REGISTER                   */
    
    struct {
      __IOM uint32_t OVSIZE     : 1;            /*!< [0..0] Host Access Over Size                                              */
      __IOM uint32_t HIT        : 1;            /*!< [1..1] Host Hit Protection Region                                         */
      __IOM uint32_t CRS4K      : 1;            /*!< [2..2] Host Cross 4K boundary                                             */
            uint32_t            : 29;
    } ESPSTS_b;
  } ;
  __IOM uint32_t  ESFLSZ;                       /*!< (@ 0x00000214) FLASH CH. SAF FLASH SIZE REGISTER                          */
  
  union {
    __IOM uint32_t ESPINTEN;                    /*!< (@ 0x00000218) FLASH CH. SAF PROTECTION INTERRUPT ENABLE REGISTER         */
    
    struct {
      __IOM uint32_t OVSIZEEN   : 1;            /*!< [0..0] Host Access Over Size Interrupt Enable                             */
      __IOM uint32_t HITEN      : 1;            /*!< [1..1] Host Hit Protection Region Interrupt Enable                        */
      __IOM uint32_t CRS4KEN    : 1;            /*!< [2..2] Host Cross 4K Boundary Interrupt Enable                            */
            uint32_t            : 29;
    } ESPINTEN_b;
  } ;
  
  union {
    __IOM uint32_t IOSHORIOSHORTSTSTRDSTS;      /*!< (@ 0x0000021C) IO SHORT STATUS REGISTER                                   */
    
    struct {
      __IOM uint32_t BYTES      : 2;            /*!< [1..0] Number of IO Short Bytes                                           */
      __IOM uint32_t TYPE       : 1;            /*!< [2..2] Type of IO Short                                                   */
      __IOM uint32_t ACCEPT     : 1;            /*!< [3..3] IO Short Read/Write Accpeted                                       */
            uint32_t            : 28;
    } IOSHORIOSHORTSTSTRDSTS_b;
  } ;
  
  union {
    __IOM uint32_t IOSHORTRDADDR;               /*!< (@ 0x00000220) IO SHORT READ ADDRESS REGISTER                             */
    
    struct {
      __IOM uint32_t ADDR       : 16;           /*!< [15..0] Channel Address                                                   */
            uint32_t            : 16;
    } IOSHORTRDADDR_b;
  } ;
  __IOM uint32_t  IOSHORTRDDATA;                /*!< (@ 0x00000224) IO SHORT READ DATA REGISTER                                */
  
  union {
    __IOM uint32_t LDNCFG;                      /*!< (@ 0x00000228) LDN INDEX/DATA CONFIGURATION REGISTER                      */
    
    struct {
      __IOM uint32_t IDX        : 16;           /*!< [15..0] LDN Index Compare Address                                         */
            uint32_t            : 16;
    } LDNCFG_b;
  } ;
  __IOM uint32_t  ID0;                          /*!< (@ 0x0000022C) CHIP ID #0 REGISTER                                        */
  __IOM uint32_t  ID1;                          /*!< (@ 0x00000230) CHIP ID #1 REGISTER                                        */
  __IOM uint32_t  VER;                          /*!< (@ 0x00000234) CHIP VERSION REGISTER                                      */
} ESPI_Type;                                    /*!< Size = 568 (0x238)                                                        */



/* =========================================================================================================================== */
/* ================                                         MONOTONIC                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief Monotonic Counter (MONOTONIC)
  */

typedef struct {                                /*!< (@ 0x400B1400) MONOTONIC Structure                                        */
  
  union {
    __IOM uint32_t CTRL;                        /*!< (@ 0x00000000) CONTROL REGISTER                                           */
    
    struct {
      __IOM uint32_t INC0       : 1;            /*!< [0..0] Increase monotonic counter #0 by 1                                 */
            uint32_t            : 7;
      __IOM uint32_t INC1       : 1;            /*!< [8..8] Increase monotonic counter #1 by 1                                 */
            uint32_t            : 7;
      __IOM uint32_t INC2       : 1;            /*!< [16..16] Increase monotonic counter #2 by 1                               */
            uint32_t            : 7;
      __IOM uint32_t INC3       : 1;            /*!< [24..24] Increase monotonic counter #3 by 1                               */
      __IOM uint32_t LOAD       : 1;            /*!< [25..25] Load monotonic counter #0 to #3 to VBAT domain                   */
      __IOM uint32_t UPDATE     : 1;            /*!< [26..26] Update monotonic counter #0 to #3 from VBAT domain               */
            uint32_t            : 5;
    } CTRL_b;
  } ;
  __IOM uint32_t  MCNT0;                        /*!< (@ 0x00000004) MONOTONIC COUNTER #0 REGISTER                              */
  __IOM uint32_t  MCNT1;                        /*!< (@ 0x00000008) MONOTONIC COUNTER #1 REGISTER                              */
  __IOM uint32_t  MCNT2;                        /*!< (@ 0x0000000C) MONOTONIC COUNTER #2 REGISTER                              */
  __IOM uint32_t  MCNT3;                        /*!< (@ 0x00000010) MONOTONIC COUNTER #3 REGISTER                              */
} MONOTONIC_Type;                               /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                            MBX                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Mailbox Controller (MBX)
  */

typedef struct {                                /*!< (@ 0x400B1600) MBX Structure                                              */
  
  union {
    __IOM uint32_t STS;                         /*!< (@ 0x00000000) MAILBOX STATUS REGISTER                                    */
    
    struct {
      __IOM uint32_t STS        : 8;            /*!< [7..0] Status                                                             */
            uint32_t            : 24;
    } STS_b;
  } ;
  __IOM uint32_t  DATA[48];                     /*!< (@ 0x00000004) MAILBOX DATA[0..47] REGISTER                               */
  
  union {
    __IOM uint32_t INTCTRL;                     /*!< (@ 0x000000C4) MAILBOX INTERRUPT CONTROL REGISTER                         */
    
    struct {
      __IOM uint32_t IRQEN      : 1;            /*!< [0..0] Auto IRQ Enable                                                    */
      __IOM uint32_t TGLV       : 1;            /*!< [1..1] Trigger Level Select                                               */
      __IOM uint32_t INTEN      : 1;            /*!< [2..2] Interrupt Enable                                                   */
            uint32_t            : 29;
    } INTCTRL_b;
  } ;
  
  union {
    __IOM uint32_t IRQNUM;                      /*!< (@ 0x000000C8) MAILBOX IRQ NUMBER REGISTER                                */
    
    struct {
      __IOM uint32_t NUM        : 8;            /*!< [7..0] IRQ Number                                                         */
            uint32_t            : 24;
    } IRQNUM_b;
  } ;
  
  union {
    __IOM uint32_t INTSTS;                      /*!< (@ 0x000000CC) MAILBOX INTERRUPT STATUS REGISTER                          */
    
    struct {
      __IOM uint32_t STS        : 1;            /*!< [0..0] Indicate wheather the interrupt is occurred                        */
      __IOM uint32_t CLR        : 1;            /*!< [1..1] Write 1 to clear interrupt status                                  */
            uint32_t            : 30;
    } INTSTS_b;
  } ;
} MBX_Type;                                     /*!< Size = 208 (0xd0)                                                         */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define SHA2_BASE                   0x40000000UL
#define SHA2DMA_BASE                0x40001000UL
#define SHA3_BASE                   0x40002000UL
#define AES_BASE                    0x40003000UL
#define DMA_BASE                    0x4000B800UL
#define AESDMA_BASE                 0x40004000UL
#define WDT_BASE                    0x4000C000UL
#define PWRBTN_BASE                 0x4000C028UL
#define RTC_BASE                    0x4000C100UL
#define SLWTMR0_BASE                0x4000C200UL
#define SLWTMR1_BASE                0x4000C210UL
#define TMR0_BASE                   0x4000C300UL
#define TMR1_BASE                   0x4000C314UL
#define TMR2_BASE                   0x4000C328UL
#define TMR3_BASE                   0x4000C33CUL
#define TMR4_BASE                   0x4000C350UL
#define TMR5_BASE                   0x4000C364UL
#define RTMR_BASE                   0x4000C500UL
#define I2C0_BASE                   0x4000D000UL
#define I2C1_BASE                   0x4000D200UL
#define I2C2_BASE                   0x4000D400UL
#define I2C3_BASE                   0x4000D600UL
#define I2C4_BASE                   0x4000D800UL
#define I2C5_BASE                   0x4000DA00UL
#define I2C6_BASE                   0x4000DC00UL
#define I2C7_BASE                   0x4000DE00UL
#define I3C0_BASE                   0x4000E000UL
#define PWM0_BASE                   0x4000F000UL
#define PWM1_BASE                   0x4000F00CUL
#define PWM2_BASE                   0x4000F018UL
#define PWM3_BASE                   0x4000F024UL
#define PWM4_BASE                   0x4000F030UL
#define PWM5_BASE                   0x4000F03CUL
#define PWM6_BASE                   0x4000F048UL
#define PWM7_BASE                   0x4000F054UL
#define PWM8_BASE                   0x4000F060UL
#define PWM9_BASE                   0x4000F06CUL
#define PWM10_BASE                  0x4000F078UL
#define PWM11_BASE                  0x4000F084UL
#define PWMLED0_BASE                0x4000F800UL
#define PWMLED1_BASE                0x4000F818UL
#define TACHO0_BASE                 0x4000FD00UL
#define TACHO1_BASE                 0x4000FD40UL
#define TACHO2_BASE                 0x4000FD80UL
#define TACHO3_BASE                 0x4000FDC0UL
#define ADC_BASE                    0x4000FE00UL
#define PS2_BASE                    0x4000FF00UL
#define KBM_BASE                    0x40010000UL
#define UART_BASE                   0x40010100UL
#define SPIC_BASE                   0x40010200UL
#define MSPI_BASE                   0x40010400UL
#define SPISLV_BASE                 0x40010500UL
#define PUF_BASE                    0x40010800UL
#define SYSTEM_BASE                 0x40020000UL
#define OTPDMA_BASE                 0x40020100UL
#define PKE_BASE                    0x40040000UL
#define EMI0_BASE                   0x40082000UL
#define EMI1_BASE                   0x40082020UL
#define EMI2_BASE                   0x40082040UL
#define EMI3_BASE                   0x40082060UL
#define EMI4_BASE                   0x40082080UL
#define EMI5_BASE                   0x400820A0UL
#define EMI6_BASE                   0x400820C0UL
#define EMI7_BASE                   0x400820E0UL
#define GPIO_BASE                   0x40090000UL
#define IOPAD_BASE                  0x40091000UL
#define PECI_BASE                   0x400A0000UL
#define KBC_BASE                    0x400A0100UL
#define ACPI_BASE                   0x400A0200UL
#define PMPORT0_BASE                0x400A021CUL
#define PMPORT1_BASE                0x400A0238UL
#define PMPORT2_BASE                0x400A0254UL
#define PMPORT3_BASE                0x400A0270UL
#define DIO0_BASE                   0x400A02C0UL
#define DIO1_BASE                   0x400A02C8UL
#define PORT80_BASE                 0x400A0400UL
#define PORT81_BASE                 0x400A0414UL
#define I3C1_BASE                   0x400B0000UL
#define ESPI_BASE                   0x400B1000UL
#define MONOTONIC_BASE              0x400B1400UL
#define MBX_BASE                    0x400B1600UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define SHA2                        ((SHA2_Type*)              SHA2_BASE)
#define SHA2DMA                     ((SHA2DMA_Type*)           SHA2DMA_BASE)
#define SHA3                        ((SHA3_Type*)              SHA3_BASE)
#define AES                         ((AES_Type*)               AES_BASE)
#define DMA                         ((DMA_Type*)               DMA_BASE)
#define AESDMA                      ((SHA2DMA_Type*)           AESDMA_BASE)
#define WDT                         ((WDT_Type*)               WDT_BASE)
#define PWRBTN                      ((PWRBTN_Type*)            PWRBTN_BASE)
#define RTC                         ((RTC_Type*)               RTC_BASE)
#define SLWTMR0                     ((SLWTMR_Type*)            SLWTMR0_BASE)
#define SLWTMR1                     ((SLWTMR_Type*)            SLWTMR1_BASE)
#define TMR0                        ((TIMER32_Type*)           TMR0_BASE)
#define TMR1                        ((TIMER32_Type*)           TMR1_BASE)
#define TMR2                        ((TIMER32_Type*)           TMR2_BASE)
#define TMR3                        ((TIMER32_Type*)           TMR3_BASE)
#define TMR4                        ((TIMER32_Type*)           TMR4_BASE)
#define TMR5                        ((TIMER32_Type*)           TMR5_BASE)
#define RTMR                        ((RTOSTMR_Type*)           RTMR_BASE)
#define I2C0                        ((I2C_Type*)               I2C0_BASE)
#define I2C1                        ((I2C_Type*)               I2C1_BASE)
#define I2C2                        ((I2C_Type*)               I2C2_BASE)
#define I2C3                        ((I2C_Type*)               I2C3_BASE)
#define I2C4                        ((I2C_Type*)               I2C4_BASE)
#define I2C5                        ((I2C_Type*)               I2C5_BASE)
#define I2C6                        ((I2C_Type*)               I2C6_BASE)
#define I2C7                        ((I2C_Type*)               I2C7_BASE)
#define I3C0                        ((I3C0_Type*)              I3C0_BASE)
#define PWM0                        ((PWM_Type*)               PWM0_BASE)
#define PWM1                        ((PWM_Type*)               PWM1_BASE)
#define PWM2                        ((PWM_Type*)               PWM2_BASE)
#define PWM3                        ((PWM_Type*)               PWM3_BASE)
#define PWM4                        ((PWM_Type*)               PWM4_BASE)
#define PWM5                        ((PWM_Type*)               PWM5_BASE)
#define PWM6                        ((PWM_Type*)               PWM6_BASE)
#define PWM7                        ((PWM_Type*)               PWM7_BASE)
#define PWM8                        ((PWM_Type*)               PWM8_BASE)
#define PWM9                        ((PWM_Type*)               PWM9_BASE)
#define PWM10                       ((PWM_Type*)               PWM10_BASE)
#define PWM11                       ((PWM_Type*)               PWM11_BASE)
#define PWMLED0                     ((PWMLED_Type*)            PWMLED0_BASE)
#define PWMLED1                     ((PWMLED_Type*)            PWMLED1_BASE)
#define TACHO0                      ((TACHO_Type*)             TACHO0_BASE)
#define TACHO1                      ((TACHO_Type*)             TACHO1_BASE)
#define TACHO2                      ((TACHO_Type*)             TACHO2_BASE)
#define TACHO3                      ((TACHO_Type*)             TACHO3_BASE)
#define ADC                         ((ADC_Type*)               ADC_BASE)
#define PS2                         ((PS2_Type*)               PS2_BASE)
#define KBM                         ((KBM_Type*)               KBM_BASE)
#define UART                        ((UART_Type*)              UART_BASE)
#define SPIC                        ((SPIC_Type*)              SPIC_BASE)
#define MSPI                        ((MSPI_Type*)              MSPI_BASE)
#define SPISLV                      ((SPISLV_Type*)            SPISLV_BASE)
#define PUF                         ((PUF_Type*)               PUF_BASE)
#define SYSTEM                      ((SYSTEM_Type*)            SYSTEM_BASE)
#define OTPDMA                      ((OTPDMA_Type*)            OTPDMA_BASE)
#define PKE                         ((PKE_Type*)               PKE_BASE)
#define EMI0                        ((EMI_Type*)               EMI0_BASE)
#define EMI1                        ((EMI_Type*)               EMI1_BASE)
#define EMI2                        ((EMI_Type*)               EMI2_BASE)
#define EMI3                        ((EMI_Type*)               EMI3_BASE)
#define EMI4                        ((EMI_Type*)               EMI4_BASE)
#define EMI5                        ((EMI_Type*)               EMI5_BASE)
#define EMI6                        ((EMI_Type*)               EMI6_BASE)
#define EMI7                        ((EMI_Type*)               EMI7_BASE)
#define GPIO                        ((GPIO_Type*)              GPIO_BASE)
#define IOPAD                       ((IOPAD_Type*)             IOPAD_BASE)
#define PECI                        ((PECI_Type*)              PECI_BASE)
#define KBC                         ((KBC_Type*)               KBC_BASE)
#define ACPI                        ((ACPI_Type*)              ACPI_BASE)
#define PMPORT0                     ((PMPORT_Type*)            PMPORT0_BASE)
#define PMPORT1                     ((PMPORT_Type*)            PMPORT1_BASE)
#define PMPORT2                     ((PMPORT_Type*)            PMPORT2_BASE)
#define PMPORT3                     ((PMPORT_Type*)            PMPORT3_BASE)
#define DIO0                        ((DIO_Type*)               DIO0_BASE)
#define DIO1                        ((DIO_Type*)               DIO1_BASE)
#define PORT80                      ((PORT80_Type*)            PORT80_BASE)
#define PORT81                      ((PORT80_Type*)            PORT81_BASE)
#define I3C1                        ((I3C0_Type*)              I3C1_BASE)
#define ESPI                        ((ESPI_Type*)              ESPI_BASE)
#define MONOTONIC                   ((MONOTONIC_Type*)         MONOTONIC_BASE)
#define MBX                         ((MBX_Type*)               MBX_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           SHA2                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define SHA2_CTRL_RST_Pos                 (1UL)                     /*!< RST (Bit 1)                                           */
#define SHA2_CTRL_RST_Msk                 (0x2UL)                   /*!< RST (Bitfield-Mask: 0x01)                             */
#define SHA2_CTRL_DMAMD_Pos               (2UL)                     /*!< DMAMD (Bit 2)                                         */
#define SHA2_CTRL_DMAMD_Msk               (0x4UL)                   /*!< DMAMD (Bitfield-Mask: 0x01)                           */
#define SHA2_CTRL_BYTEINV_Pos             (3UL)                     /*!< BYTEINV (Bit 3)                                       */
#define SHA2_CTRL_BYTEINV_Msk             (0x8UL)                   /*!< BYTEINV (Bitfield-Mask: 0x01)                         */
#define SHA2_CTRL_SHAMD_Pos               (4UL)                     /*!< SHAMD (Bit 4)                                         */
#define SHA2_CTRL_SHAMD_Msk               (0x10UL)                  /*!< SHAMD (Bitfield-Mask: 0x01)                           */
#define SHA2_CTRL_ICGEN_Pos               (5UL)                     /*!< ICGEN (Bit 5)                                         */
#define SHA2_CTRL_ICGEN_Msk               (0x20UL)                  /*!< ICGEN (Bitfield-Mask: 0x01)                           */
#define SHA2_CTRL_SLVMD_Pos               (6UL)                     /*!< SLVMD (Bit 6)                                         */
#define SHA2_CTRL_SLVMD_Msk               (0x40UL)                  /*!< SLVMD (Bitfield-Mask: 0x01)                           */
/* ==========================================================  STS  ========================================================== */
#define SHA2_STS_FIFOSPACE_Pos            (0UL)                     /*!< FIFOSPACE (Bit 0)                                     */
#define SHA2_STS_FIFOSPACE_Msk            (0x1fUL)                  /*!< FIFOSPACE (Bitfield-Mask: 0x1f)                       */
#define SHA2_STS_BUSY_Pos                 (6UL)                     /*!< BUSY (Bit 6)                                          */
#define SHA2_STS_BUSY_Msk                 (0x40UL)                  /*!< BUSY (Bitfield-Mask: 0x01)                            */
/* ========================================================  DIGEST  ========================================================= */
/* ========================================================  FIFOIN  ========================================================= */


/* =========================================================================================================================== */
/* ================                                          SHA2DMA                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  SAR  ========================================================== */
/* ==========================================================  DAR  ========================================================== */
/* =========================================================  CTRLL  ========================================================= */
#define SHA2DMA_CTRLL_INTEN_Pos           (0UL)                     /*!< INTEN (Bit 0)                                         */
#define SHA2DMA_CTRLL_INTEN_Msk           (0x1UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
#define SHA2DMA_CTRLL_DSTTRWIDTH_Pos      (1UL)                     /*!< DSTTRWIDTH (Bit 1)                                    */
#define SHA2DMA_CTRLL_DSTTRWIDTH_Msk      (0xeUL)                   /*!< DSTTRWIDTH (Bitfield-Mask: 0x07)                      */
#define SHA2DMA_CTRLL_SRCTRWIDTH_Pos      (4UL)                     /*!< SRCTRWIDTH (Bit 4)                                    */
#define SHA2DMA_CTRLL_SRCTRWIDTH_Msk      (0x70UL)                  /*!< SRCTRWIDTH (Bitfield-Mask: 0x07)                      */
#define SHA2DMA_CTRLL_DINC_Pos            (7UL)                     /*!< DINC (Bit 7)                                          */
#define SHA2DMA_CTRLL_DINC_Msk            (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define SHA2DMA_CTRLL_SINC_Pos            (9UL)                     /*!< SINC (Bit 9)                                          */
#define SHA2DMA_CTRLL_SINC_Msk            (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define SHA2DMA_CTRLL_DESTMSIZE_Pos       (11UL)                    /*!< DESTMSIZE (Bit 11)                                    */
#define SHA2DMA_CTRLL_DESTMSIZE_Msk       (0x3800UL)                /*!< DESTMSIZE (Bitfield-Mask: 0x07)                       */
#define SHA2DMA_CTRLL_SRCMSIZE_Pos        (14UL)                    /*!< SRCMSIZE (Bit 14)                                     */
#define SHA2DMA_CTRLL_SRCMSIZE_Msk        (0x1c000UL)               /*!< SRCMSIZE (Bitfield-Mask: 0x07)                        */
/* =========================================================  CTRLH  ========================================================= */
#define SHA2DMA_CTRLH_BLOCKTS_Pos         (0UL)                     /*!< BLOCKTS (Bit 0)                                       */
#define SHA2DMA_CTRLH_BLOCKTS_Msk         (0xfffUL)                 /*!< BLOCKTS (Bitfield-Mask: 0xfff)                        */
/* ==========================================================  CFG  ========================================================== */
#define SHA2DMA_CFG_PROTCTL_Pos           (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define SHA2DMA_CFG_PROTCTL_Msk           (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
/* ========================================================  MSKTFR  ========================================================= */
/* ========================================================  CLRTFR  ========================================================= */
/* ========================================================  INTSTS  ========================================================= */
#define SHA2DMA_INTSTS_TFR_Pos            (0UL)                     /*!< TFR (Bit 0)                                           */
#define SHA2DMA_INTSTS_TFR_Msk            (0x1UL)                   /*!< TFR (Bitfield-Mask: 0x01)                             */
#define SHA2DMA_INTSTS_BLOCK_Pos          (1UL)                     /*!< BLOCK (Bit 1)                                         */
#define SHA2DMA_INTSTS_BLOCK_Msk          (0x2UL)                   /*!< BLOCK (Bitfield-Mask: 0x01)                           */
#define SHA2DMA_INTSTS_SRCT_Pos           (2UL)                     /*!< SRCT (Bit 2)                                          */
#define SHA2DMA_INTSTS_SRCT_Msk           (0x4UL)                   /*!< SRCT (Bitfield-Mask: 0x01)                            */
#define SHA2DMA_INTSTS_DSTT_Pos           (3UL)                     /*!< DSTT (Bit 3)                                          */
#define SHA2DMA_INTSTS_DSTT_Msk           (0x8UL)                   /*!< DSTT (Bitfield-Mask: 0x01)                            */
#define SHA2DMA_INTSTS_ERR_Pos            (4UL)                     /*!< ERR (Bit 4)                                           */
#define SHA2DMA_INTSTS_ERR_Msk            (0x10UL)                  /*!< ERR (Bitfield-Mask: 0x01)                             */
/* =========================================================  CONF  ========================================================== */
#define SHA2DMA_CONF_EN_Pos               (0UL)                     /*!< EN (Bit 0)                                            */
#define SHA2DMA_CONF_EN_Msk               (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
/* =========================================================  CHEN  ========================================================== */
#define SHA2DMA_CHEN_CHEN_Pos             (0UL)                     /*!< CHEN (Bit 0)                                          */
#define SHA2DMA_CHEN_CHEN_Msk             (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01)                            */
#define SHA2DMA_CHEN_CHENWE_Pos           (8UL)                     /*!< CHENWE (Bit 8)                                        */
#define SHA2DMA_CHEN_CHENWE_Msk           (0x100UL)                 /*!< CHENWE (Bitfield-Mask: 0x01)                          */


/* =========================================================================================================================== */
/* ================                                           SHA3                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  ADDR  ========================================================== */
/* ==========================================================  LEN  ========================================================== */
/* =========================================================  SPEC  ========================================================== */
#define SHA3_SPEC_SPEC_Pos                (0UL)                     /*!< SPEC (Bit 0)                                          */
#define SHA3_SPEC_SPEC_Msk                (0x1UL)                   /*!< SPEC (Bitfield-Mask: 0x01)                            */
#define SHA3_SPEC_SUFFIX_Pos              (8UL)                     /*!< SUFFIX (Bit 8)                                        */
#define SHA3_SPEC_SUFFIX_Msk              (0x700UL)                 /*!< SUFFIX (Bitfield-Mask: 0x07)                          */
/* ========================================================  INTDIS  ========================================================= */
/* ========================================================  LPMDDIS  ======================================================== */
/* ========================================================  ENABLE  ========================================================= */
#define SHA3_ENABLE_EN_Pos                (8UL)                     /*!< EN (Bit 8)                                            */
#define SHA3_ENABLE_EN_Msk                (0x700UL)                 /*!< EN (Bitfield-Mask: 0x07)                              */
/* ==========================================================  CLR  ========================================================== */
/* ========================================================  CLRINT  ========================================================= */
/* ========================================================  SQUEEZE  ======================================================== */
/* ========================================================  INTSTS  ========================================================= */
/* =======================================================  RDERRSTS  ======================================================== */
/* ========================================================  ADDRERR  ======================================================== */
/* =========================================================  HASH  ========================================================== */
#define SHA3_HASH_BYTE0_Pos               (0UL)                     /*!< BYTE0 (Bit 0)                                         */
#define SHA3_HASH_BYTE0_Msk               (0xffUL)                  /*!< BYTE0 (Bitfield-Mask: 0xff)                           */
#define SHA3_HASH_BYTE1_Pos               (8UL)                     /*!< BYTE1 (Bit 8)                                         */
#define SHA3_HASH_BYTE1_Msk               (0xff00UL)                /*!< BYTE1 (Bitfield-Mask: 0xff)                           */
#define SHA3_HASH_BYTE2_Pos               (16UL)                    /*!< BYTE2 (Bit 16)                                        */
#define SHA3_HASH_BYTE2_Msk               (0xff0000UL)              /*!< BYTE2 (Bitfield-Mask: 0xff)                           */
#define SHA3_HASH_BYTE3_Pos               (24UL)                    /*!< BYTE3 (Bit 24)                                        */
#define SHA3_HASH_BYTE3_Msk               (0xff000000UL)            /*!< BYTE3 (Bitfield-Mask: 0xff)                           */


/* =========================================================================================================================== */
/* ================                                            AES                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  DATAIN3  ======================================================== */
/* ========================================================  DATAIN2  ======================================================== */
/* ========================================================  DATAIN1  ======================================================== */
/* ========================================================  DATAIN0  ======================================================== */
/* =======================================================  DATAOUT3  ======================================================== */
/* =======================================================  DATAOUT2  ======================================================== */
/* =======================================================  DATAOUT1  ======================================================== */
/* =======================================================  DATAOUT0  ======================================================== */
/* ======================================================  KEYDEAOUT7  ======================================================= */
/* ======================================================  KEYDEAOUT6  ======================================================= */
/* ======================================================  KEYDEAOUT5  ======================================================= */
/* ======================================================  KEYDEAOUT4  ======================================================= */
/* ======================================================  KEYDEAOUT3  ======================================================= */
/* ======================================================  KEYDEAOUT2  ======================================================= */
/* ======================================================  KEYDEAOUT1  ======================================================= */
/* ======================================================  KEYDEAOUT0  ======================================================= */
/* =========================================================  KEY7  ========================================================== */
/* =========================================================  KEY6  ========================================================== */
/* =========================================================  KEY5  ========================================================== */
/* =========================================================  KEY4  ========================================================== */
/* =========================================================  KEY3  ========================================================== */
/* =========================================================  KEY2  ========================================================== */
/* =========================================================  KEY1  ========================================================== */
/* =========================================================  KEY0  ========================================================== */
/* ==========================================================  IV3  ========================================================== */
/* ==========================================================  IV2  ========================================================== */
/* ==========================================================  IV1  ========================================================== */
/* ==========================================================  IV0  ========================================================== */
/* =========================================================  CONF  ========================================================== */
#define AES_CONF_MODE_Pos                 (0UL)                     /*!< MODE (Bit 0)                                          */
#define AES_CONF_MODE_Msk                 (0x1UL)                   /*!< MODE (Bitfield-Mask: 0x01)                            */
#define AES_CONF_CIPHERMD_Pos             (1UL)                     /*!< CIPHERMD (Bit 1)                                      */
#define AES_CONF_CIPHERMD_Msk             (0x1eUL)                  /*!< CIPHERMD (Bitfield-Mask: 0x0f)                        */
#define AES_CONF_KEYSIZE_Pos              (5UL)                     /*!< KEYSIZE (Bit 5)                                       */
#define AES_CONF_KEYSIZE_Msk              (0x60UL)                  /*!< KEYSIZE (Bitfield-Mask: 0x03)                         */
#define AES_CONF_DECRYPT_Pos              (7UL)                     /*!< DECRYPT (Bit 7)                                       */
#define AES_CONF_DECRYPT_Msk              (0x80UL)                  /*!< DECRYPT (Bitfield-Mask: 0x01)                         */
#define AES_CONF_FIRSTBLK_Pos             (8UL)                     /*!< FIRSTBLK (Bit 8)                                      */
#define AES_CONF_FIRSTBLK_Msk             (0x100UL)                 /*!< FIRSTBLK (Bitfield-Mask: 0x01)                        */
#define AES_CONF_DEKEYGEN_Pos             (9UL)                     /*!< DEKEYGEN (Bit 9)                                      */
#define AES_CONF_DEKEYGEN_Msk             (0x200UL)                 /*!< DEKEYGEN (Bitfield-Mask: 0x01)                        */
#define AES_CONF_BYTESWAP_Pos             (10UL)                    /*!< BYTESWAP (Bit 10)                                     */
#define AES_CONF_BYTESWAP_Msk             (0x400UL)                 /*!< BYTESWAP (Bitfield-Mask: 0x01)                        */
#define AES_CONF_SCANMSKEN_Pos            (11UL)                    /*!< SCANMSKEN (Bit 11)                                    */
#define AES_CONF_SCANMSKEN_Msk            (0x800UL)                 /*!< SCANMSKEN (Bitfield-Mask: 0x01)                       */
#define AES_CONF_GCMLAST_Pos              (16UL)                    /*!< GCMLAST (Bit 16)                                      */
#define AES_CONF_GCMLAST_Msk              (0x10000UL)               /*!< GCMLAST (Bitfield-Mask: 0x01)                         */
#define AES_CONF_CMACLAST_Pos             (17UL)                    /*!< CMACLAST (Bit 17)                                     */
#define AES_CONF_CMACLAST_Msk             (0x20000UL)               /*!< CMACLAST (Bitfield-Mask: 0x01)                        */
/* ==========================================================  LEN  ========================================================== */
/* =======================================================  GMACLEN1  ======================================================== */
/* =======================================================  GMACLEN0  ======================================================== */
/* =========================================================  TAG3  ========================================================== */
/* =========================================================  TAG2  ========================================================== */
/* =========================================================  TAG1  ========================================================== */
/* =========================================================  TAG0  ========================================================== */
/* =======================================================  GHASHKEY3  ======================================================= */
/* =======================================================  GHASHKEY2  ======================================================= */
/* =======================================================  GHASHKEY1  ======================================================= */
/* =======================================================  GHASHKEY0  ======================================================= */
/* ========================================================  INTSTS  ========================================================= */
#define AES_INTSTS_CHINTSTS_Pos           (0UL)                     /*!< CHINTSTS (Bit 0)                                      */
#define AES_INTSTS_CHINTSTS_Msk           (0x1UL)                   /*!< CHINTSTS (Bitfield-Mask: 0x01)                        */
/* ========================================================  INTRAW  ========================================================= */
#define AES_INTRAW_SLVDONE_Pos            (0UL)                     /*!< SLVDONE (Bit 0)                                       */
#define AES_INTRAW_SLVDONE_Msk            (0x1UL)                   /*!< SLVDONE (Bitfield-Mask: 0x01)                         */
#define AES_INTRAW_ERRBLKSIZE_Pos         (1UL)                     /*!< ERRBLKSIZE (Bit 1)                                    */
#define AES_INTRAW_ERRBLKSIZE_Msk         (0x2UL)                   /*!< ERRBLKSIZE (Bitfield-Mask: 0x01)                      */
#define AES_INTRAW_ERRDECIPHER_Pos        (2UL)                     /*!< ERRDECIPHER (Bit 2)                                   */
#define AES_INTRAW_ERRDECIPHER_Msk        (0x4UL)                   /*!< ERRDECIPHER (Bitfield-Mask: 0x01)                     */
#define AES_INTRAW_ERRORENDE_Pos          (3UL)                     /*!< ERRORENDE (Bit 3)                                     */
#define AES_INTRAW_ERRORENDE_Msk          (0x8UL)                   /*!< ERRORENDE (Bitfield-Mask: 0x01)                       */
/* ========================================================  INTMSK  ========================================================= */
#define AES_INTMSK_SLVDONE_Pos            (0UL)                     /*!< SLVDONE (Bit 0)                                       */
#define AES_INTMSK_SLVDONE_Msk            (0x1UL)                   /*!< SLVDONE (Bitfield-Mask: 0x01)                         */
#define AES_INTMSK_ERRBLKSIZE_Pos         (1UL)                     /*!< ERRBLKSIZE (Bit 1)                                    */
#define AES_INTMSK_ERRBLKSIZE_Msk         (0x2UL)                   /*!< ERRBLKSIZE (Bitfield-Mask: 0x01)                      */
#define AES_INTMSK_ERRDECIPHER_Pos        (2UL)                     /*!< ERRDECIPHER (Bit 2)                                   */
#define AES_INTMSK_ERRDECIPHER_Msk        (0x4UL)                   /*!< ERRDECIPHER (Bitfield-Mask: 0x01)                     */
#define AES_INTMSK_ERRORENDE_Pos          (3UL)                     /*!< ERRORENDE (Bit 3)                                     */
#define AES_INTMSK_ERRORENDE_Msk          (0x8UL)                   /*!< ERRORENDE (Bitfield-Mask: 0x01)                       */
/* =======================================================  INTMSKSTS  ======================================================= */
#define AES_INTMSKSTS_SLVDONE_Pos         (0UL)                     /*!< SLVDONE (Bit 0)                                       */
#define AES_INTMSKSTS_SLVDONE_Msk         (0x1UL)                   /*!< SLVDONE (Bitfield-Mask: 0x01)                         */
#define AES_INTMSKSTS_ERRBLKSIZE_Pos      (1UL)                     /*!< ERRBLKSIZE (Bit 1)                                    */
#define AES_INTMSKSTS_ERRBLKSIZE_Msk      (0x2UL)                   /*!< ERRBLKSIZE (Bitfield-Mask: 0x01)                      */
#define AES_INTMSKSTS_ERRDECIPHER_Pos     (2UL)                     /*!< ERRDECIPHER (Bit 2)                                   */
#define AES_INTMSKSTS_ERRDECIPHER_Msk     (0x4UL)                   /*!< ERRDECIPHER (Bitfield-Mask: 0x01)                     */
#define AES_INTMSKSTS_ERRORENDE_Pos       (3UL)                     /*!< ERRORENDE (Bit 3)                                     */
#define AES_INTMSKSTS_ERRORENDE_Msk       (0x8UL)                   /*!< ERRORENDE (Bitfield-Mask: 0x01)                       */
/* ========================================================  INTCLR  ========================================================= */
#define AES_INTCLR_SLVDONE_Pos            (0UL)                     /*!< SLVDONE (Bit 0)                                       */
#define AES_INTCLR_SLVDONE_Msk            (0x1UL)                   /*!< SLVDONE (Bitfield-Mask: 0x01)                         */
#define AES_INTCLR_ERRBLKSIZE_Pos         (1UL)                     /*!< ERRBLKSIZE (Bit 1)                                    */
#define AES_INTCLR_ERRBLKSIZE_Msk         (0x2UL)                   /*!< ERRBLKSIZE (Bitfield-Mask: 0x01)                      */
#define AES_INTCLR_ERRDECIPHER_Pos        (2UL)                     /*!< ERRDECIPHER (Bit 2)                                   */
#define AES_INTCLR_ERRDECIPHER_Msk        (0x4UL)                   /*!< ERRDECIPHER (Bitfield-Mask: 0x01)                     */
#define AES_INTCLR_ERRORENDE_Pos          (3UL)                     /*!< ERRORENDE (Bit 3)                                     */
#define AES_INTCLR_ERRORENDE_Msk          (0x8UL)                   /*!< ERRORENDE (Bitfield-Mask: 0x01)                       */


/* =========================================================================================================================== */
/* ================                                            DMA                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  SAR0  ========================================================== */
/* =========================================================  SAR1  ========================================================== */
/* =========================================================  SAR2  ========================================================== */
/* =========================================================  SAR3  ========================================================== */
/* =========================================================  SAR4  ========================================================== */
/* =========================================================  SAR5  ========================================================== */
/* =========================================================  SAR6  ========================================================== */
/* =========================================================  SAR7  ========================================================== */
/* =========================================================  DAR0  ========================================================== */
/* =========================================================  DAR1  ========================================================== */
/* =========================================================  DAR2  ========================================================== */
/* =========================================================  DAR3  ========================================================== */
/* =========================================================  DAR4  ========================================================== */
/* =========================================================  DAR5  ========================================================== */
/* =========================================================  DAR6  ========================================================== */
/* =========================================================  DAR7  ========================================================== */
/* =========================================================  LLP0  ========================================================== */
#define DMA_LLP0_LMS_Pos                  (0UL)                     /*!< LMS (Bit 0)                                           */
#define DMA_LLP0_LMS_Msk                  (0x3UL)                   /*!< LMS (Bitfield-Mask: 0x03)                             */
#define DMA_LLP0_LOC_Pos                  (2UL)                     /*!< LOC (Bit 2)                                           */
#define DMA_LLP0_LOC_Msk                  (0xfffffffcUL)            /*!< LOC (Bitfield-Mask: 0x3fffffff)                       */
/* =========================================================  LLP1  ========================================================== */
#define DMA_LLP1_LMS_Pos                  (0UL)                     /*!< LMS (Bit 0)                                           */
#define DMA_LLP1_LMS_Msk                  (0x3UL)                   /*!< LMS (Bitfield-Mask: 0x03)                             */
#define DMA_LLP1_LOC_Pos                  (2UL)                     /*!< LOC (Bit 2)                                           */
#define DMA_LLP1_LOC_Msk                  (0xfffffffcUL)            /*!< LOC (Bitfield-Mask: 0x3fffffff)                       */
/* =========================================================  LLP2  ========================================================== */
#define DMA_LLP2_LMS_Pos                  (0UL)                     /*!< LMS (Bit 0)                                           */
#define DMA_LLP2_LMS_Msk                  (0x3UL)                   /*!< LMS (Bitfield-Mask: 0x03)                             */
#define DMA_LLP2_LOC_Pos                  (2UL)                     /*!< LOC (Bit 2)                                           */
#define DMA_LLP2_LOC_Msk                  (0xfffffffcUL)            /*!< LOC (Bitfield-Mask: 0x3fffffff)                       */
/* =========================================================  LLP3  ========================================================== */
#define DMA_LLP3_LMS_Pos                  (0UL)                     /*!< LMS (Bit 0)                                           */
#define DMA_LLP3_LMS_Msk                  (0x3UL)                   /*!< LMS (Bitfield-Mask: 0x03)                             */
#define DMA_LLP3_LOC_Pos                  (2UL)                     /*!< LOC (Bit 2)                                           */
#define DMA_LLP3_LOC_Msk                  (0xfffffffcUL)            /*!< LOC (Bitfield-Mask: 0x3fffffff)                       */
/* =========================================================  LLP4  ========================================================== */
#define DMA_LLP4_LMS_Pos                  (0UL)                     /*!< LMS (Bit 0)                                           */
#define DMA_LLP4_LMS_Msk                  (0x3UL)                   /*!< LMS (Bitfield-Mask: 0x03)                             */
#define DMA_LLP4_LOC_Pos                  (2UL)                     /*!< LOC (Bit 2)                                           */
#define DMA_LLP4_LOC_Msk                  (0xfffffffcUL)            /*!< LOC (Bitfield-Mask: 0x3fffffff)                       */
/* =========================================================  LLP5  ========================================================== */
#define DMA_LLP5_LMS_Pos                  (0UL)                     /*!< LMS (Bit 0)                                           */
#define DMA_LLP5_LMS_Msk                  (0x3UL)                   /*!< LMS (Bitfield-Mask: 0x03)                             */
#define DMA_LLP5_LOC_Pos                  (2UL)                     /*!< LOC (Bit 2)                                           */
#define DMA_LLP5_LOC_Msk                  (0xfffffffcUL)            /*!< LOC (Bitfield-Mask: 0x3fffffff)                       */
/* =========================================================  LLP6  ========================================================== */
#define DMA_LLP6_LMS_Pos                  (0UL)                     /*!< LMS (Bit 0)                                           */
#define DMA_LLP6_LMS_Msk                  (0x3UL)                   /*!< LMS (Bitfield-Mask: 0x03)                             */
#define DMA_LLP6_LOC_Pos                  (2UL)                     /*!< LOC (Bit 2)                                           */
#define DMA_LLP6_LOC_Msk                  (0xfffffffcUL)            /*!< LOC (Bitfield-Mask: 0x3fffffff)                       */
/* =========================================================  LLP7  ========================================================== */
#define DMA_LLP7_LMS_Pos                  (0UL)                     /*!< LMS (Bit 0)                                           */
#define DMA_LLP7_LMS_Msk                  (0x3UL)                   /*!< LMS (Bitfield-Mask: 0x03)                             */
#define DMA_LLP7_LOC_Pos                  (2UL)                     /*!< LOC (Bit 2)                                           */
#define DMA_LLP7_LOC_Msk                  (0xfffffffcUL)            /*!< LOC (Bitfield-Mask: 0x3fffffff)                       */
/* ========================================================  CTRL0L  ========================================================= */
#define DMA_CTRL0L_INTEN_Pos              (0UL)                     /*!< INTEN (Bit 0)                                         */
#define DMA_CTRL0L_INTEN_Msk              (0x1UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
#define DMA_CTRL0L_DSTTRWIDTH_Pos         (1UL)                     /*!< DSTTRWIDTH (Bit 1)                                    */
#define DMA_CTRL0L_DSTTRWIDTH_Msk         (0xeUL)                   /*!< DSTTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL0L_SRCTRWIDTH_Pos         (4UL)                     /*!< SRCTRWIDTH (Bit 4)                                    */
#define DMA_CTRL0L_SRCTRWIDTH_Msk         (0x70UL)                  /*!< SRCTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL0L_DINC_Pos               (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMA_CTRL0L_DINC_Msk               (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL0L_SINC_Pos               (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMA_CTRL0L_SINC_Msk               (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL0L_DESTMSIZE_Pos          (11UL)                    /*!< DESTMSIZE (Bit 11)                                    */
#define DMA_CTRL0L_DESTMSIZE_Msk          (0x3800UL)                /*!< DESTMSIZE (Bitfield-Mask: 0x07)                       */
#define DMA_CTRL0L_SRCMSIZE_Pos           (14UL)                    /*!< SRCMSIZE (Bit 14)                                     */
#define DMA_CTRL0L_SRCMSIZE_Msk           (0x1c000UL)               /*!< SRCMSIZE (Bitfield-Mask: 0x07)                        */
#define DMA_CTRL0L_SRCGATHEREN_Pos        (17UL)                    /*!< SRCGATHEREN (Bit 17)                                  */
#define DMA_CTRL0L_SRCGATHEREN_Msk        (0x20000UL)               /*!< SRCGATHEREN (Bitfield-Mask: 0x01)                     */
#define DMA_CTRL0L_DSTSCATTEREN_Pos       (18UL)                    /*!< DSTSCATTEREN (Bit 18)                                 */
#define DMA_CTRL0L_DSTSCATTEREN_Msk       (0x40000UL)               /*!< DSTSCATTEREN (Bitfield-Mask: 0x01)                    */
#define DMA_CTRL0L_WRNPEN_Pos             (19UL)                    /*!< WRNPEN (Bit 19)                                       */
#define DMA_CTRL0L_WRNPEN_Msk             (0x80000UL)               /*!< WRNPEN (Bitfield-Mask: 0x01)                          */
#define DMA_CTRL0L_TTFC_Pos               (20UL)                    /*!< TTFC (Bit 20)                                         */
#define DMA_CTRL0L_TTFC_Msk               (0x700000UL)              /*!< TTFC (Bitfield-Mask: 0x07)                            */
#define DMA_CTRL0L_LLPDSTEN_Pos           (27UL)                    /*!< LLPDSTEN (Bit 27)                                     */
#define DMA_CTRL0L_LLPDSTEN_Msk           (0x8000000UL)             /*!< LLPDSTEN (Bitfield-Mask: 0x01)                        */
#define DMA_CTRL0L_LLPSRCEN_Pos           (28UL)                    /*!< LLPSRCEN (Bit 28)                                     */
#define DMA_CTRL0L_LLPSRCEN_Msk           (0x10000000UL)            /*!< LLPSRCEN (Bitfield-Mask: 0x01)                        */
/* ========================================================  CTRL1L  ========================================================= */
#define DMA_CTRL1L_INTEN_Pos              (0UL)                     /*!< INTEN (Bit 0)                                         */
#define DMA_CTRL1L_INTEN_Msk              (0x1UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
#define DMA_CTRL1L_DSTTRWIDTH_Pos         (1UL)                     /*!< DSTTRWIDTH (Bit 1)                                    */
#define DMA_CTRL1L_DSTTRWIDTH_Msk         (0xeUL)                   /*!< DSTTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL1L_SRCTRWIDTH_Pos         (4UL)                     /*!< SRCTRWIDTH (Bit 4)                                    */
#define DMA_CTRL1L_SRCTRWIDTH_Msk         (0x70UL)                  /*!< SRCTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL1L_DINC_Pos               (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMA_CTRL1L_DINC_Msk               (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL1L_SINC_Pos               (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMA_CTRL1L_SINC_Msk               (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL1L_DESTMSIZE_Pos          (11UL)                    /*!< DESTMSIZE (Bit 11)                                    */
#define DMA_CTRL1L_DESTMSIZE_Msk          (0x3800UL)                /*!< DESTMSIZE (Bitfield-Mask: 0x07)                       */
#define DMA_CTRL1L_SRCMSIZE_Pos           (14UL)                    /*!< SRCMSIZE (Bit 14)                                     */
#define DMA_CTRL1L_SRCMSIZE_Msk           (0x1c000UL)               /*!< SRCMSIZE (Bitfield-Mask: 0x07)                        */
#define DMA_CTRL1L_SRCGATHEREN_Pos        (17UL)                    /*!< SRCGATHEREN (Bit 17)                                  */
#define DMA_CTRL1L_SRCGATHEREN_Msk        (0x20000UL)               /*!< SRCGATHEREN (Bitfield-Mask: 0x01)                     */
#define DMA_CTRL1L_DSTSCATTEREN_Pos       (18UL)                    /*!< DSTSCATTEREN (Bit 18)                                 */
#define DMA_CTRL1L_DSTSCATTEREN_Msk       (0x40000UL)               /*!< DSTSCATTEREN (Bitfield-Mask: 0x01)                    */
#define DMA_CTRL1L_WRNPEN_Pos             (19UL)                    /*!< WRNPEN (Bit 19)                                       */
#define DMA_CTRL1L_WRNPEN_Msk             (0x80000UL)               /*!< WRNPEN (Bitfield-Mask: 0x01)                          */
#define DMA_CTRL1L_TTFC_Pos               (20UL)                    /*!< TTFC (Bit 20)                                         */
#define DMA_CTRL1L_TTFC_Msk               (0x700000UL)              /*!< TTFC (Bitfield-Mask: 0x07)                            */
#define DMA_CTRL1L_LLPDSTEN_Pos           (27UL)                    /*!< LLPDSTEN (Bit 27)                                     */
#define DMA_CTRL1L_LLPDSTEN_Msk           (0x8000000UL)             /*!< LLPDSTEN (Bitfield-Mask: 0x01)                        */
#define DMA_CTRL1L_LLPSRCEN_Pos           (28UL)                    /*!< LLPSRCEN (Bit 28)                                     */
#define DMA_CTRL1L_LLPSRCEN_Msk           (0x10000000UL)            /*!< LLPSRCEN (Bitfield-Mask: 0x01)                        */
/* ========================================================  CTRL2L  ========================================================= */
#define DMA_CTRL2L_INTEN_Pos              (0UL)                     /*!< INTEN (Bit 0)                                         */
#define DMA_CTRL2L_INTEN_Msk              (0x1UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
#define DMA_CTRL2L_DSTTRWIDTH_Pos         (1UL)                     /*!< DSTTRWIDTH (Bit 1)                                    */
#define DMA_CTRL2L_DSTTRWIDTH_Msk         (0xeUL)                   /*!< DSTTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL2L_SRCTRWIDTH_Pos         (4UL)                     /*!< SRCTRWIDTH (Bit 4)                                    */
#define DMA_CTRL2L_SRCTRWIDTH_Msk         (0x70UL)                  /*!< SRCTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL2L_DINC_Pos               (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMA_CTRL2L_DINC_Msk               (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL2L_SINC_Pos               (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMA_CTRL2L_SINC_Msk               (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL2L_DESTMSIZE_Pos          (11UL)                    /*!< DESTMSIZE (Bit 11)                                    */
#define DMA_CTRL2L_DESTMSIZE_Msk          (0x3800UL)                /*!< DESTMSIZE (Bitfield-Mask: 0x07)                       */
#define DMA_CTRL2L_SRCMSIZE_Pos           (14UL)                    /*!< SRCMSIZE (Bit 14)                                     */
#define DMA_CTRL2L_SRCMSIZE_Msk           (0x1c000UL)               /*!< SRCMSIZE (Bitfield-Mask: 0x07)                        */
#define DMA_CTRL2L_SRCGATHEREN_Pos        (17UL)                    /*!< SRCGATHEREN (Bit 17)                                  */
#define DMA_CTRL2L_SRCGATHEREN_Msk        (0x20000UL)               /*!< SRCGATHEREN (Bitfield-Mask: 0x01)                     */
#define DMA_CTRL2L_DSTSCATTEREN_Pos       (18UL)                    /*!< DSTSCATTEREN (Bit 18)                                 */
#define DMA_CTRL2L_DSTSCATTEREN_Msk       (0x40000UL)               /*!< DSTSCATTEREN (Bitfield-Mask: 0x01)                    */
#define DMA_CTRL2L_WRNPEN_Pos             (19UL)                    /*!< WRNPEN (Bit 19)                                       */
#define DMA_CTRL2L_WRNPEN_Msk             (0x80000UL)               /*!< WRNPEN (Bitfield-Mask: 0x01)                          */
#define DMA_CTRL2L_TTFC_Pos               (20UL)                    /*!< TTFC (Bit 20)                                         */
#define DMA_CTRL2L_TTFC_Msk               (0x700000UL)              /*!< TTFC (Bitfield-Mask: 0x07)                            */
#define DMA_CTRL2L_LLPDSTEN_Pos           (27UL)                    /*!< LLPDSTEN (Bit 27)                                     */
#define DMA_CTRL2L_LLPDSTEN_Msk           (0x8000000UL)             /*!< LLPDSTEN (Bitfield-Mask: 0x01)                        */
#define DMA_CTRL2L_LLPSRCEN_Pos           (28UL)                    /*!< LLPSRCEN (Bit 28)                                     */
#define DMA_CTRL2L_LLPSRCEN_Msk           (0x10000000UL)            /*!< LLPSRCEN (Bitfield-Mask: 0x01)                        */
/* ========================================================  CTRL3L  ========================================================= */
#define DMA_CTRL3L_INTEN_Pos              (0UL)                     /*!< INTEN (Bit 0)                                         */
#define DMA_CTRL3L_INTEN_Msk              (0x1UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
#define DMA_CTRL3L_DSTTRWIDTH_Pos         (1UL)                     /*!< DSTTRWIDTH (Bit 1)                                    */
#define DMA_CTRL3L_DSTTRWIDTH_Msk         (0xeUL)                   /*!< DSTTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL3L_SRCTRWIDTH_Pos         (4UL)                     /*!< SRCTRWIDTH (Bit 4)                                    */
#define DMA_CTRL3L_SRCTRWIDTH_Msk         (0x70UL)                  /*!< SRCTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL3L_DINC_Pos               (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMA_CTRL3L_DINC_Msk               (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL3L_SINC_Pos               (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMA_CTRL3L_SINC_Msk               (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL3L_DESTMSIZE_Pos          (11UL)                    /*!< DESTMSIZE (Bit 11)                                    */
#define DMA_CTRL3L_DESTMSIZE_Msk          (0x3800UL)                /*!< DESTMSIZE (Bitfield-Mask: 0x07)                       */
#define DMA_CTRL3L_SRCMSIZE_Pos           (14UL)                    /*!< SRCMSIZE (Bit 14)                                     */
#define DMA_CTRL3L_SRCMSIZE_Msk           (0x1c000UL)               /*!< SRCMSIZE (Bitfield-Mask: 0x07)                        */
#define DMA_CTRL3L_SRCGATHEREN_Pos        (17UL)                    /*!< SRCGATHEREN (Bit 17)                                  */
#define DMA_CTRL3L_SRCGATHEREN_Msk        (0x20000UL)               /*!< SRCGATHEREN (Bitfield-Mask: 0x01)                     */
#define DMA_CTRL3L_DSTSCATTEREN_Pos       (18UL)                    /*!< DSTSCATTEREN (Bit 18)                                 */
#define DMA_CTRL3L_DSTSCATTEREN_Msk       (0x40000UL)               /*!< DSTSCATTEREN (Bitfield-Mask: 0x01)                    */
#define DMA_CTRL3L_WRNPEN_Pos             (19UL)                    /*!< WRNPEN (Bit 19)                                       */
#define DMA_CTRL3L_WRNPEN_Msk             (0x80000UL)               /*!< WRNPEN (Bitfield-Mask: 0x01)                          */
#define DMA_CTRL3L_TTFC_Pos               (20UL)                    /*!< TTFC (Bit 20)                                         */
#define DMA_CTRL3L_TTFC_Msk               (0x700000UL)              /*!< TTFC (Bitfield-Mask: 0x07)                            */
#define DMA_CTRL3L_LLPDSTEN_Pos           (27UL)                    /*!< LLPDSTEN (Bit 27)                                     */
#define DMA_CTRL3L_LLPDSTEN_Msk           (0x8000000UL)             /*!< LLPDSTEN (Bitfield-Mask: 0x01)                        */
#define DMA_CTRL3L_LLPSRCEN_Pos           (28UL)                    /*!< LLPSRCEN (Bit 28)                                     */
#define DMA_CTRL3L_LLPSRCEN_Msk           (0x10000000UL)            /*!< LLPSRCEN (Bitfield-Mask: 0x01)                        */
/* ========================================================  CTRL4L  ========================================================= */
#define DMA_CTRL4L_INTEN_Pos              (0UL)                     /*!< INTEN (Bit 0)                                         */
#define DMA_CTRL4L_INTEN_Msk              (0x1UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
#define DMA_CTRL4L_DSTTRWIDTH_Pos         (1UL)                     /*!< DSTTRWIDTH (Bit 1)                                    */
#define DMA_CTRL4L_DSTTRWIDTH_Msk         (0xeUL)                   /*!< DSTTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL4L_SRCTRWIDTH_Pos         (4UL)                     /*!< SRCTRWIDTH (Bit 4)                                    */
#define DMA_CTRL4L_SRCTRWIDTH_Msk         (0x70UL)                  /*!< SRCTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL4L_DINC_Pos               (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMA_CTRL4L_DINC_Msk               (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL4L_SINC_Pos               (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMA_CTRL4L_SINC_Msk               (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL4L_DESTMSIZE_Pos          (11UL)                    /*!< DESTMSIZE (Bit 11)                                    */
#define DMA_CTRL4L_DESTMSIZE_Msk          (0x3800UL)                /*!< DESTMSIZE (Bitfield-Mask: 0x07)                       */
#define DMA_CTRL4L_SRCMSIZE_Pos           (14UL)                    /*!< SRCMSIZE (Bit 14)                                     */
#define DMA_CTRL4L_SRCMSIZE_Msk           (0x1c000UL)               /*!< SRCMSIZE (Bitfield-Mask: 0x07)                        */
#define DMA_CTRL4L_SRCGATHEREN_Pos        (17UL)                    /*!< SRCGATHEREN (Bit 17)                                  */
#define DMA_CTRL4L_SRCGATHEREN_Msk        (0x20000UL)               /*!< SRCGATHEREN (Bitfield-Mask: 0x01)                     */
#define DMA_CTRL4L_DSTSCATTEREN_Pos       (18UL)                    /*!< DSTSCATTEREN (Bit 18)                                 */
#define DMA_CTRL4L_DSTSCATTEREN_Msk       (0x40000UL)               /*!< DSTSCATTEREN (Bitfield-Mask: 0x01)                    */
#define DMA_CTRL4L_WRNPEN_Pos             (19UL)                    /*!< WRNPEN (Bit 19)                                       */
#define DMA_CTRL4L_WRNPEN_Msk             (0x80000UL)               /*!< WRNPEN (Bitfield-Mask: 0x01)                          */
#define DMA_CTRL4L_TTFC_Pos               (20UL)                    /*!< TTFC (Bit 20)                                         */
#define DMA_CTRL4L_TTFC_Msk               (0x700000UL)              /*!< TTFC (Bitfield-Mask: 0x07)                            */
#define DMA_CTRL4L_LLPDSTEN_Pos           (27UL)                    /*!< LLPDSTEN (Bit 27)                                     */
#define DMA_CTRL4L_LLPDSTEN_Msk           (0x8000000UL)             /*!< LLPDSTEN (Bitfield-Mask: 0x01)                        */
#define DMA_CTRL4L_LLPSRCEN_Pos           (28UL)                    /*!< LLPSRCEN (Bit 28)                                     */
#define DMA_CTRL4L_LLPSRCEN_Msk           (0x10000000UL)            /*!< LLPSRCEN (Bitfield-Mask: 0x01)                        */
/* ========================================================  CTRL5L  ========================================================= */
#define DMA_CTRL5L_INTEN_Pos              (0UL)                     /*!< INTEN (Bit 0)                                         */
#define DMA_CTRL5L_INTEN_Msk              (0x1UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
#define DMA_CTRL5L_DSTTRWIDTH_Pos         (1UL)                     /*!< DSTTRWIDTH (Bit 1)                                    */
#define DMA_CTRL5L_DSTTRWIDTH_Msk         (0xeUL)                   /*!< DSTTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL5L_SRCTRWIDTH_Pos         (4UL)                     /*!< SRCTRWIDTH (Bit 4)                                    */
#define DMA_CTRL5L_SRCTRWIDTH_Msk         (0x70UL)                  /*!< SRCTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL5L_DINC_Pos               (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMA_CTRL5L_DINC_Msk               (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL5L_SINC_Pos               (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMA_CTRL5L_SINC_Msk               (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL5L_DESTMSIZE_Pos          (11UL)                    /*!< DESTMSIZE (Bit 11)                                    */
#define DMA_CTRL5L_DESTMSIZE_Msk          (0x3800UL)                /*!< DESTMSIZE (Bitfield-Mask: 0x07)                       */
#define DMA_CTRL5L_SRCMSIZE_Pos           (14UL)                    /*!< SRCMSIZE (Bit 14)                                     */
#define DMA_CTRL5L_SRCMSIZE_Msk           (0x1c000UL)               /*!< SRCMSIZE (Bitfield-Mask: 0x07)                        */
#define DMA_CTRL5L_SRCGATHEREN_Pos        (17UL)                    /*!< SRCGATHEREN (Bit 17)                                  */
#define DMA_CTRL5L_SRCGATHEREN_Msk        (0x20000UL)               /*!< SRCGATHEREN (Bitfield-Mask: 0x01)                     */
#define DMA_CTRL5L_DSTSCATTEREN_Pos       (18UL)                    /*!< DSTSCATTEREN (Bit 18)                                 */
#define DMA_CTRL5L_DSTSCATTEREN_Msk       (0x40000UL)               /*!< DSTSCATTEREN (Bitfield-Mask: 0x01)                    */
#define DMA_CTRL5L_WRNPEN_Pos             (19UL)                    /*!< WRNPEN (Bit 19)                                       */
#define DMA_CTRL5L_WRNPEN_Msk             (0x80000UL)               /*!< WRNPEN (Bitfield-Mask: 0x01)                          */
#define DMA_CTRL5L_TTFC_Pos               (20UL)                    /*!< TTFC (Bit 20)                                         */
#define DMA_CTRL5L_TTFC_Msk               (0x700000UL)              /*!< TTFC (Bitfield-Mask: 0x07)                            */
#define DMA_CTRL5L_LLPDSTEN_Pos           (27UL)                    /*!< LLPDSTEN (Bit 27)                                     */
#define DMA_CTRL5L_LLPDSTEN_Msk           (0x8000000UL)             /*!< LLPDSTEN (Bitfield-Mask: 0x01)                        */
#define DMA_CTRL5L_LLPSRCEN_Pos           (28UL)                    /*!< LLPSRCEN (Bit 28)                                     */
#define DMA_CTRL5L_LLPSRCEN_Msk           (0x10000000UL)            /*!< LLPSRCEN (Bitfield-Mask: 0x01)                        */
/* ========================================================  CTRL6L  ========================================================= */
#define DMA_CTRL6L_INTEN_Pos              (0UL)                     /*!< INTEN (Bit 0)                                         */
#define DMA_CTRL6L_INTEN_Msk              (0x1UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
#define DMA_CTRL6L_DSTTRWIDTH_Pos         (1UL)                     /*!< DSTTRWIDTH (Bit 1)                                    */
#define DMA_CTRL6L_DSTTRWIDTH_Msk         (0xeUL)                   /*!< DSTTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL6L_SRCTRWIDTH_Pos         (4UL)                     /*!< SRCTRWIDTH (Bit 4)                                    */
#define DMA_CTRL6L_SRCTRWIDTH_Msk         (0x70UL)                  /*!< SRCTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL6L_DINC_Pos               (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMA_CTRL6L_DINC_Msk               (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL6L_SINC_Pos               (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMA_CTRL6L_SINC_Msk               (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL6L_DESTMSIZE_Pos          (11UL)                    /*!< DESTMSIZE (Bit 11)                                    */
#define DMA_CTRL6L_DESTMSIZE_Msk          (0x3800UL)                /*!< DESTMSIZE (Bitfield-Mask: 0x07)                       */
#define DMA_CTRL6L_SRCMSIZE_Pos           (14UL)                    /*!< SRCMSIZE (Bit 14)                                     */
#define DMA_CTRL6L_SRCMSIZE_Msk           (0x1c000UL)               /*!< SRCMSIZE (Bitfield-Mask: 0x07)                        */
#define DMA_CTRL6L_SRCGATHEREN_Pos        (17UL)                    /*!< SRCGATHEREN (Bit 17)                                  */
#define DMA_CTRL6L_SRCGATHEREN_Msk        (0x20000UL)               /*!< SRCGATHEREN (Bitfield-Mask: 0x01)                     */
#define DMA_CTRL6L_DSTSCATTEREN_Pos       (18UL)                    /*!< DSTSCATTEREN (Bit 18)                                 */
#define DMA_CTRL6L_DSTSCATTEREN_Msk       (0x40000UL)               /*!< DSTSCATTEREN (Bitfield-Mask: 0x01)                    */
#define DMA_CTRL6L_WRNPEN_Pos             (19UL)                    /*!< WRNPEN (Bit 19)                                       */
#define DMA_CTRL6L_WRNPEN_Msk             (0x80000UL)               /*!< WRNPEN (Bitfield-Mask: 0x01)                          */
#define DMA_CTRL6L_TTFC_Pos               (20UL)                    /*!< TTFC (Bit 20)                                         */
#define DMA_CTRL6L_TTFC_Msk               (0x700000UL)              /*!< TTFC (Bitfield-Mask: 0x07)                            */
#define DMA_CTRL6L_LLPDSTEN_Pos           (27UL)                    /*!< LLPDSTEN (Bit 27)                                     */
#define DMA_CTRL6L_LLPDSTEN_Msk           (0x8000000UL)             /*!< LLPDSTEN (Bitfield-Mask: 0x01)                        */
#define DMA_CTRL6L_LLPSRCEN_Pos           (28UL)                    /*!< LLPSRCEN (Bit 28)                                     */
#define DMA_CTRL6L_LLPSRCEN_Msk           (0x10000000UL)            /*!< LLPSRCEN (Bitfield-Mask: 0x01)                        */
/* ========================================================  CTRL7L  ========================================================= */
#define DMA_CTRL7L_INTEN_Pos              (0UL)                     /*!< INTEN (Bit 0)                                         */
#define DMA_CTRL7L_INTEN_Msk              (0x1UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
#define DMA_CTRL7L_DSTTRWIDTH_Pos         (1UL)                     /*!< DSTTRWIDTH (Bit 1)                                    */
#define DMA_CTRL7L_DSTTRWIDTH_Msk         (0xeUL)                   /*!< DSTTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL7L_SRCTRWIDTH_Pos         (4UL)                     /*!< SRCTRWIDTH (Bit 4)                                    */
#define DMA_CTRL7L_SRCTRWIDTH_Msk         (0x70UL)                  /*!< SRCTRWIDTH (Bitfield-Mask: 0x07)                      */
#define DMA_CTRL7L_DINC_Pos               (7UL)                     /*!< DINC (Bit 7)                                          */
#define DMA_CTRL7L_DINC_Msk               (0x180UL)                 /*!< DINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL7L_SINC_Pos               (9UL)                     /*!< SINC (Bit 9)                                          */
#define DMA_CTRL7L_SINC_Msk               (0x600UL)                 /*!< SINC (Bitfield-Mask: 0x03)                            */
#define DMA_CTRL7L_DESTMSIZE_Pos          (11UL)                    /*!< DESTMSIZE (Bit 11)                                    */
#define DMA_CTRL7L_DESTMSIZE_Msk          (0x3800UL)                /*!< DESTMSIZE (Bitfield-Mask: 0x07)                       */
#define DMA_CTRL7L_SRCMSIZE_Pos           (14UL)                    /*!< SRCMSIZE (Bit 14)                                     */
#define DMA_CTRL7L_SRCMSIZE_Msk           (0x1c000UL)               /*!< SRCMSIZE (Bitfield-Mask: 0x07)                        */
#define DMA_CTRL7L_SRCGATHEREN_Pos        (17UL)                    /*!< SRCGATHEREN (Bit 17)                                  */
#define DMA_CTRL7L_SRCGATHEREN_Msk        (0x20000UL)               /*!< SRCGATHEREN (Bitfield-Mask: 0x01)                     */
#define DMA_CTRL7L_DSTSCATTEREN_Pos       (18UL)                    /*!< DSTSCATTEREN (Bit 18)                                 */
#define DMA_CTRL7L_DSTSCATTEREN_Msk       (0x40000UL)               /*!< DSTSCATTEREN (Bitfield-Mask: 0x01)                    */
#define DMA_CTRL7L_WRNPEN_Pos             (19UL)                    /*!< WRNPEN (Bit 19)                                       */
#define DMA_CTRL7L_WRNPEN_Msk             (0x80000UL)               /*!< WRNPEN (Bitfield-Mask: 0x01)                          */
#define DMA_CTRL7L_TTFC_Pos               (20UL)                    /*!< TTFC (Bit 20)                                         */
#define DMA_CTRL7L_TTFC_Msk               (0x700000UL)              /*!< TTFC (Bitfield-Mask: 0x07)                            */
#define DMA_CTRL7L_LLPDSTEN_Pos           (27UL)                    /*!< LLPDSTEN (Bit 27)                                     */
#define DMA_CTRL7L_LLPDSTEN_Msk           (0x8000000UL)             /*!< LLPDSTEN (Bitfield-Mask: 0x01)                        */
#define DMA_CTRL7L_LLPSRCEN_Pos           (28UL)                    /*!< LLPSRCEN (Bit 28)                                     */
#define DMA_CTRL7L_LLPSRCEN_Msk           (0x10000000UL)            /*!< LLPSRCEN (Bitfield-Mask: 0x01)                        */
/* ========================================================  CTRL0H  ========================================================= */
#define DMA_CTRL0H_BLOCKTS_Pos            (0UL)                     /*!< BLOCKTS (Bit 0)                                       */
#define DMA_CTRL0H_BLOCKTS_Msk            (0xffffffffUL)            /*!< BLOCKTS (Bitfield-Mask: 0xffffffff)                   */
/* ========================================================  CTRL1H  ========================================================= */
#define DMA_CTRL1H_BLOCKTS_Pos            (0UL)                     /*!< BLOCKTS (Bit 0)                                       */
#define DMA_CTRL1H_BLOCKTS_Msk            (0xffffffffUL)            /*!< BLOCKTS (Bitfield-Mask: 0xffffffff)                   */
/* ========================================================  CTRL2H  ========================================================= */
#define DMA_CTRL2H_BLOCKTS_Pos            (0UL)                     /*!< BLOCKTS (Bit 0)                                       */
#define DMA_CTRL2H_BLOCKTS_Msk            (0xffffffffUL)            /*!< BLOCKTS (Bitfield-Mask: 0xffffffff)                   */
/* ========================================================  CTRL3H  ========================================================= */
#define DMA_CTRL3H_BLOCKTS_Pos            (0UL)                     /*!< BLOCKTS (Bit 0)                                       */
#define DMA_CTRL3H_BLOCKTS_Msk            (0xffffffffUL)            /*!< BLOCKTS (Bitfield-Mask: 0xffffffff)                   */
/* ========================================================  CTRL4H  ========================================================= */
#define DMA_CTRL4H_BLOCKTS_Pos            (0UL)                     /*!< BLOCKTS (Bit 0)                                       */
#define DMA_CTRL4H_BLOCKTS_Msk            (0xffffffffUL)            /*!< BLOCKTS (Bitfield-Mask: 0xffffffff)                   */
/* ========================================================  CTRL5H  ========================================================= */
#define DMA_CTRL5H_BLOCKTS_Pos            (0UL)                     /*!< BLOCKTS (Bit 0)                                       */
#define DMA_CTRL5H_BLOCKTS_Msk            (0xffffffffUL)            /*!< BLOCKTS (Bitfield-Mask: 0xffffffff)                   */
/* ========================================================  CTRL6H  ========================================================= */
#define DMA_CTRL6H_BLOCKTS_Pos            (0UL)                     /*!< BLOCKTS (Bit 0)                                       */
#define DMA_CTRL6H_BLOCKTS_Msk            (0xffffffffUL)            /*!< BLOCKTS (Bitfield-Mask: 0xffffffff)                   */
/* ========================================================  CTRL7H  ========================================================= */
#define DMA_CTRL7H_BLOCKTS_Pos            (0UL)                     /*!< BLOCKTS (Bit 0)                                       */
#define DMA_CTRL7H_BLOCKTS_Msk            (0xffffffffUL)            /*!< BLOCKTS (Bitfield-Mask: 0xffffffff)                   */
/* =========================================================  CFG0L  ========================================================= */
#define DMA_CFG0L_INACTIVE_Pos            (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMA_CFG0L_INACTIVE_Msk            (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG0L_SRCPCTLOVER_Pos         (1UL)                     /*!< SRCPCTLOVER (Bit 1)                                   */
#define DMA_CFG0L_SRCPCTLOVER_Msk         (0x2UL)                   /*!< SRCPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG0L_DSTPCTLOVER_Pos         (2UL)                     /*!< DSTPCTLOVER (Bit 2)                                   */
#define DMA_CFG0L_DSTPCTLOVER_Msk         (0x4UL)                   /*!< DSTPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG0L_CHPRIOR_Pos             (4UL)                     /*!< CHPRIOR (Bit 4)                                       */
#define DMA_CFG0L_CHPRIOR_Msk             (0xf0UL)                  /*!< CHPRIOR (Bitfield-Mask: 0x0f)                         */
#define DMA_CFG0L_CHSUSP_Pos              (8UL)                     /*!< CHSUSP (Bit 8)                                        */
#define DMA_CFG0L_CHSUSP_Msk              (0x100UL)                 /*!< CHSUSP (Bitfield-Mask: 0x01)                          */
#define DMA_CFG0L_FIFOEMPTY_Pos           (9UL)                     /*!< FIFOEMPTY (Bit 9)                                     */
#define DMA_CFG0L_FIFOEMPTY_Msk           (0x200UL)                 /*!< FIFOEMPTY (Bitfield-Mask: 0x01)                       */
#define DMA_CFG0L_HSSELDST_Pos            (10UL)                    /*!< HSSELDST (Bit 10)                                     */
#define DMA_CFG0L_HSSELDST_Msk            (0x400UL)                 /*!< HSSELDST (Bitfield-Mask: 0x01)                        */
#define DMA_CFG0L_HSSELSRC_Pos            (11UL)                    /*!< HSSELSRC (Bit 11)                                     */
#define DMA_CFG0L_HSSELSRC_Msk            (0x800UL)                 /*!< HSSELSRC (Bitfield-Mask: 0x01)                        */
#define DMA_CFG0L_DSTHSPOL_Pos            (18UL)                    /*!< DSTHSPOL (Bit 18)                                     */
#define DMA_CFG0L_DSTHSPOL_Msk            (0x40000UL)               /*!< DSTHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG0L_SRCHSPOL_Pos            (19UL)                    /*!< SRCHSPOL (Bit 19)                                     */
#define DMA_CFG0L_SRCHSPOL_Msk            (0x80000UL)               /*!< SRCHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG0L_MAXABRST_Pos            (20UL)                    /*!< MAXABRST (Bit 20)                                     */
#define DMA_CFG0L_MAXABRST_Msk            (0x3ff00000UL)            /*!< MAXABRST (Bitfield-Mask: 0x3ff)                       */
#define DMA_CFG0L_RELOADSRC_Pos           (30UL)                    /*!< RELOADSRC (Bit 30)                                    */
#define DMA_CFG0L_RELOADSRC_Msk           (0x40000000UL)            /*!< RELOADSRC (Bitfield-Mask: 0x01)                       */
#define DMA_CFG0L_RELOADDST_Pos           (31UL)                    /*!< RELOADDST (Bit 31)                                    */
#define DMA_CFG0L_RELOADDST_Msk           (0x80000000UL)            /*!< RELOADDST (Bitfield-Mask: 0x01)                       */
/* =========================================================  CFG1L  ========================================================= */
#define DMA_CFG1L_INACTIVE_Pos            (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMA_CFG1L_INACTIVE_Msk            (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG1L_SRCPCTLOVER_Pos         (1UL)                     /*!< SRCPCTLOVER (Bit 1)                                   */
#define DMA_CFG1L_SRCPCTLOVER_Msk         (0x2UL)                   /*!< SRCPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG1L_DSTPCTLOVER_Pos         (2UL)                     /*!< DSTPCTLOVER (Bit 2)                                   */
#define DMA_CFG1L_DSTPCTLOVER_Msk         (0x4UL)                   /*!< DSTPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG1L_CHPRIOR_Pos             (4UL)                     /*!< CHPRIOR (Bit 4)                                       */
#define DMA_CFG1L_CHPRIOR_Msk             (0xf0UL)                  /*!< CHPRIOR (Bitfield-Mask: 0x0f)                         */
#define DMA_CFG1L_CHSUSP_Pos              (8UL)                     /*!< CHSUSP (Bit 8)                                        */
#define DMA_CFG1L_CHSUSP_Msk              (0x100UL)                 /*!< CHSUSP (Bitfield-Mask: 0x01)                          */
#define DMA_CFG1L_FIFOEMPTY_Pos           (9UL)                     /*!< FIFOEMPTY (Bit 9)                                     */
#define DMA_CFG1L_FIFOEMPTY_Msk           (0x200UL)                 /*!< FIFOEMPTY (Bitfield-Mask: 0x01)                       */
#define DMA_CFG1L_HSSELDST_Pos            (10UL)                    /*!< HSSELDST (Bit 10)                                     */
#define DMA_CFG1L_HSSELDST_Msk            (0x400UL)                 /*!< HSSELDST (Bitfield-Mask: 0x01)                        */
#define DMA_CFG1L_HSSELSRC_Pos            (11UL)                    /*!< HSSELSRC (Bit 11)                                     */
#define DMA_CFG1L_HSSELSRC_Msk            (0x800UL)                 /*!< HSSELSRC (Bitfield-Mask: 0x01)                        */
#define DMA_CFG1L_DSTHSPOL_Pos            (18UL)                    /*!< DSTHSPOL (Bit 18)                                     */
#define DMA_CFG1L_DSTHSPOL_Msk            (0x40000UL)               /*!< DSTHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG1L_SRCHSPOL_Pos            (19UL)                    /*!< SRCHSPOL (Bit 19)                                     */
#define DMA_CFG1L_SRCHSPOL_Msk            (0x80000UL)               /*!< SRCHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG1L_MAXABRST_Pos            (20UL)                    /*!< MAXABRST (Bit 20)                                     */
#define DMA_CFG1L_MAXABRST_Msk            (0x3ff00000UL)            /*!< MAXABRST (Bitfield-Mask: 0x3ff)                       */
#define DMA_CFG1L_RELOADSRC_Pos           (30UL)                    /*!< RELOADSRC (Bit 30)                                    */
#define DMA_CFG1L_RELOADSRC_Msk           (0x40000000UL)            /*!< RELOADSRC (Bitfield-Mask: 0x01)                       */
#define DMA_CFG1L_RELOADDST_Pos           (31UL)                    /*!< RELOADDST (Bit 31)                                    */
#define DMA_CFG1L_RELOADDST_Msk           (0x80000000UL)            /*!< RELOADDST (Bitfield-Mask: 0x01)                       */
/* =========================================================  CFG2L  ========================================================= */
#define DMA_CFG2L_INACTIVE_Pos            (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMA_CFG2L_INACTIVE_Msk            (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG2L_SRCPCTLOVER_Pos         (1UL)                     /*!< SRCPCTLOVER (Bit 1)                                   */
#define DMA_CFG2L_SRCPCTLOVER_Msk         (0x2UL)                   /*!< SRCPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG2L_DSTPCTLOVER_Pos         (2UL)                     /*!< DSTPCTLOVER (Bit 2)                                   */
#define DMA_CFG2L_DSTPCTLOVER_Msk         (0x4UL)                   /*!< DSTPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG2L_CHPRIOR_Pos             (4UL)                     /*!< CHPRIOR (Bit 4)                                       */
#define DMA_CFG2L_CHPRIOR_Msk             (0xf0UL)                  /*!< CHPRIOR (Bitfield-Mask: 0x0f)                         */
#define DMA_CFG2L_CHSUSP_Pos              (8UL)                     /*!< CHSUSP (Bit 8)                                        */
#define DMA_CFG2L_CHSUSP_Msk              (0x100UL)                 /*!< CHSUSP (Bitfield-Mask: 0x01)                          */
#define DMA_CFG2L_FIFOEMPTY_Pos           (9UL)                     /*!< FIFOEMPTY (Bit 9)                                     */
#define DMA_CFG2L_FIFOEMPTY_Msk           (0x200UL)                 /*!< FIFOEMPTY (Bitfield-Mask: 0x01)                       */
#define DMA_CFG2L_HSSELDST_Pos            (10UL)                    /*!< HSSELDST (Bit 10)                                     */
#define DMA_CFG2L_HSSELDST_Msk            (0x400UL)                 /*!< HSSELDST (Bitfield-Mask: 0x01)                        */
#define DMA_CFG2L_HSSELSRC_Pos            (11UL)                    /*!< HSSELSRC (Bit 11)                                     */
#define DMA_CFG2L_HSSELSRC_Msk            (0x800UL)                 /*!< HSSELSRC (Bitfield-Mask: 0x01)                        */
#define DMA_CFG2L_DSTHSPOL_Pos            (18UL)                    /*!< DSTHSPOL (Bit 18)                                     */
#define DMA_CFG2L_DSTHSPOL_Msk            (0x40000UL)               /*!< DSTHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG2L_SRCHSPOL_Pos            (19UL)                    /*!< SRCHSPOL (Bit 19)                                     */
#define DMA_CFG2L_SRCHSPOL_Msk            (0x80000UL)               /*!< SRCHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG2L_MAXABRST_Pos            (20UL)                    /*!< MAXABRST (Bit 20)                                     */
#define DMA_CFG2L_MAXABRST_Msk            (0x3ff00000UL)            /*!< MAXABRST (Bitfield-Mask: 0x3ff)                       */
#define DMA_CFG2L_RELOADSRC_Pos           (30UL)                    /*!< RELOADSRC (Bit 30)                                    */
#define DMA_CFG2L_RELOADSRC_Msk           (0x40000000UL)            /*!< RELOADSRC (Bitfield-Mask: 0x01)                       */
#define DMA_CFG2L_RELOADDST_Pos           (31UL)                    /*!< RELOADDST (Bit 31)                                    */
#define DMA_CFG2L_RELOADDST_Msk           (0x80000000UL)            /*!< RELOADDST (Bitfield-Mask: 0x01)                       */
/* =========================================================  CFG3L  ========================================================= */
#define DMA_CFG3L_INACTIVE_Pos            (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMA_CFG3L_INACTIVE_Msk            (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG3L_SRCPCTLOVER_Pos         (1UL)                     /*!< SRCPCTLOVER (Bit 1)                                   */
#define DMA_CFG3L_SRCPCTLOVER_Msk         (0x2UL)                   /*!< SRCPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG3L_DSTPCTLOVER_Pos         (2UL)                     /*!< DSTPCTLOVER (Bit 2)                                   */
#define DMA_CFG3L_DSTPCTLOVER_Msk         (0x4UL)                   /*!< DSTPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG3L_CHPRIOR_Pos             (4UL)                     /*!< CHPRIOR (Bit 4)                                       */
#define DMA_CFG3L_CHPRIOR_Msk             (0xf0UL)                  /*!< CHPRIOR (Bitfield-Mask: 0x0f)                         */
#define DMA_CFG3L_CHSUSP_Pos              (8UL)                     /*!< CHSUSP (Bit 8)                                        */
#define DMA_CFG3L_CHSUSP_Msk              (0x100UL)                 /*!< CHSUSP (Bitfield-Mask: 0x01)                          */
#define DMA_CFG3L_FIFOEMPTY_Pos           (9UL)                     /*!< FIFOEMPTY (Bit 9)                                     */
#define DMA_CFG3L_FIFOEMPTY_Msk           (0x200UL)                 /*!< FIFOEMPTY (Bitfield-Mask: 0x01)                       */
#define DMA_CFG3L_HSSELDST_Pos            (10UL)                    /*!< HSSELDST (Bit 10)                                     */
#define DMA_CFG3L_HSSELDST_Msk            (0x400UL)                 /*!< HSSELDST (Bitfield-Mask: 0x01)                        */
#define DMA_CFG3L_HSSELSRC_Pos            (11UL)                    /*!< HSSELSRC (Bit 11)                                     */
#define DMA_CFG3L_HSSELSRC_Msk            (0x800UL)                 /*!< HSSELSRC (Bitfield-Mask: 0x01)                        */
#define DMA_CFG3L_DSTHSPOL_Pos            (18UL)                    /*!< DSTHSPOL (Bit 18)                                     */
#define DMA_CFG3L_DSTHSPOL_Msk            (0x40000UL)               /*!< DSTHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG3L_SRCHSPOL_Pos            (19UL)                    /*!< SRCHSPOL (Bit 19)                                     */
#define DMA_CFG3L_SRCHSPOL_Msk            (0x80000UL)               /*!< SRCHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG3L_MAXABRST_Pos            (20UL)                    /*!< MAXABRST (Bit 20)                                     */
#define DMA_CFG3L_MAXABRST_Msk            (0x3ff00000UL)            /*!< MAXABRST (Bitfield-Mask: 0x3ff)                       */
#define DMA_CFG3L_RELOADSRC_Pos           (30UL)                    /*!< RELOADSRC (Bit 30)                                    */
#define DMA_CFG3L_RELOADSRC_Msk           (0x40000000UL)            /*!< RELOADSRC (Bitfield-Mask: 0x01)                       */
#define DMA_CFG3L_RELOADDST_Pos           (31UL)                    /*!< RELOADDST (Bit 31)                                    */
#define DMA_CFG3L_RELOADDST_Msk           (0x80000000UL)            /*!< RELOADDST (Bitfield-Mask: 0x01)                       */
/* =========================================================  CFG4L  ========================================================= */
#define DMA_CFG4L_INACTIVE_Pos            (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMA_CFG4L_INACTIVE_Msk            (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG4L_SRCPCTLOVER_Pos         (1UL)                     /*!< SRCPCTLOVER (Bit 1)                                   */
#define DMA_CFG4L_SRCPCTLOVER_Msk         (0x2UL)                   /*!< SRCPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG4L_DSTPCTLOVER_Pos         (2UL)                     /*!< DSTPCTLOVER (Bit 2)                                   */
#define DMA_CFG4L_DSTPCTLOVER_Msk         (0x4UL)                   /*!< DSTPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG4L_CHPRIOR_Pos             (4UL)                     /*!< CHPRIOR (Bit 4)                                       */
#define DMA_CFG4L_CHPRIOR_Msk             (0xf0UL)                  /*!< CHPRIOR (Bitfield-Mask: 0x0f)                         */
#define DMA_CFG4L_CHSUSP_Pos              (8UL)                     /*!< CHSUSP (Bit 8)                                        */
#define DMA_CFG4L_CHSUSP_Msk              (0x100UL)                 /*!< CHSUSP (Bitfield-Mask: 0x01)                          */
#define DMA_CFG4L_FIFOEMPTY_Pos           (9UL)                     /*!< FIFOEMPTY (Bit 9)                                     */
#define DMA_CFG4L_FIFOEMPTY_Msk           (0x200UL)                 /*!< FIFOEMPTY (Bitfield-Mask: 0x01)                       */
#define DMA_CFG4L_HSSELDST_Pos            (10UL)                    /*!< HSSELDST (Bit 10)                                     */
#define DMA_CFG4L_HSSELDST_Msk            (0x400UL)                 /*!< HSSELDST (Bitfield-Mask: 0x01)                        */
#define DMA_CFG4L_HSSELSRC_Pos            (11UL)                    /*!< HSSELSRC (Bit 11)                                     */
#define DMA_CFG4L_HSSELSRC_Msk            (0x800UL)                 /*!< HSSELSRC (Bitfield-Mask: 0x01)                        */
#define DMA_CFG4L_DSTHSPOL_Pos            (18UL)                    /*!< DSTHSPOL (Bit 18)                                     */
#define DMA_CFG4L_DSTHSPOL_Msk            (0x40000UL)               /*!< DSTHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG4L_SRCHSPOL_Pos            (19UL)                    /*!< SRCHSPOL (Bit 19)                                     */
#define DMA_CFG4L_SRCHSPOL_Msk            (0x80000UL)               /*!< SRCHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG4L_MAXABRST_Pos            (20UL)                    /*!< MAXABRST (Bit 20)                                     */
#define DMA_CFG4L_MAXABRST_Msk            (0x3ff00000UL)            /*!< MAXABRST (Bitfield-Mask: 0x3ff)                       */
#define DMA_CFG4L_RELOADSRC_Pos           (30UL)                    /*!< RELOADSRC (Bit 30)                                    */
#define DMA_CFG4L_RELOADSRC_Msk           (0x40000000UL)            /*!< RELOADSRC (Bitfield-Mask: 0x01)                       */
#define DMA_CFG4L_RELOADDST_Pos           (31UL)                    /*!< RELOADDST (Bit 31)                                    */
#define DMA_CFG4L_RELOADDST_Msk           (0x80000000UL)            /*!< RELOADDST (Bitfield-Mask: 0x01)                       */
/* =========================================================  CFG5L  ========================================================= */
#define DMA_CFG5L_INACTIVE_Pos            (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMA_CFG5L_INACTIVE_Msk            (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG5L_SRCPCTLOVER_Pos         (1UL)                     /*!< SRCPCTLOVER (Bit 1)                                   */
#define DMA_CFG5L_SRCPCTLOVER_Msk         (0x2UL)                   /*!< SRCPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG5L_DSTPCTLOVER_Pos         (2UL)                     /*!< DSTPCTLOVER (Bit 2)                                   */
#define DMA_CFG5L_DSTPCTLOVER_Msk         (0x4UL)                   /*!< DSTPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG5L_CHPRIOR_Pos             (4UL)                     /*!< CHPRIOR (Bit 4)                                       */
#define DMA_CFG5L_CHPRIOR_Msk             (0xf0UL)                  /*!< CHPRIOR (Bitfield-Mask: 0x0f)                         */
#define DMA_CFG5L_CHSUSP_Pos              (8UL)                     /*!< CHSUSP (Bit 8)                                        */
#define DMA_CFG5L_CHSUSP_Msk              (0x100UL)                 /*!< CHSUSP (Bitfield-Mask: 0x01)                          */
#define DMA_CFG5L_FIFOEMPTY_Pos           (9UL)                     /*!< FIFOEMPTY (Bit 9)                                     */
#define DMA_CFG5L_FIFOEMPTY_Msk           (0x200UL)                 /*!< FIFOEMPTY (Bitfield-Mask: 0x01)                       */
#define DMA_CFG5L_HSSELDST_Pos            (10UL)                    /*!< HSSELDST (Bit 10)                                     */
#define DMA_CFG5L_HSSELDST_Msk            (0x400UL)                 /*!< HSSELDST (Bitfield-Mask: 0x01)                        */
#define DMA_CFG5L_HSSELSRC_Pos            (11UL)                    /*!< HSSELSRC (Bit 11)                                     */
#define DMA_CFG5L_HSSELSRC_Msk            (0x800UL)                 /*!< HSSELSRC (Bitfield-Mask: 0x01)                        */
#define DMA_CFG5L_DSTHSPOL_Pos            (18UL)                    /*!< DSTHSPOL (Bit 18)                                     */
#define DMA_CFG5L_DSTHSPOL_Msk            (0x40000UL)               /*!< DSTHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG5L_SRCHSPOL_Pos            (19UL)                    /*!< SRCHSPOL (Bit 19)                                     */
#define DMA_CFG5L_SRCHSPOL_Msk            (0x80000UL)               /*!< SRCHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG5L_MAXABRST_Pos            (20UL)                    /*!< MAXABRST (Bit 20)                                     */
#define DMA_CFG5L_MAXABRST_Msk            (0x3ff00000UL)            /*!< MAXABRST (Bitfield-Mask: 0x3ff)                       */
#define DMA_CFG5L_RELOADSRC_Pos           (30UL)                    /*!< RELOADSRC (Bit 30)                                    */
#define DMA_CFG5L_RELOADSRC_Msk           (0x40000000UL)            /*!< RELOADSRC (Bitfield-Mask: 0x01)                       */
#define DMA_CFG5L_RELOADDST_Pos           (31UL)                    /*!< RELOADDST (Bit 31)                                    */
#define DMA_CFG5L_RELOADDST_Msk           (0x80000000UL)            /*!< RELOADDST (Bitfield-Mask: 0x01)                       */
/* =========================================================  CFG6L  ========================================================= */
#define DMA_CFG6L_INACTIVE_Pos            (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMA_CFG6L_INACTIVE_Msk            (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG6L_SRCPCTLOVER_Pos         (1UL)                     /*!< SRCPCTLOVER (Bit 1)                                   */
#define DMA_CFG6L_SRCPCTLOVER_Msk         (0x2UL)                   /*!< SRCPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG6L_DSTPCTLOVER_Pos         (2UL)                     /*!< DSTPCTLOVER (Bit 2)                                   */
#define DMA_CFG6L_DSTPCTLOVER_Msk         (0x4UL)                   /*!< DSTPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG6L_CHPRIOR_Pos             (4UL)                     /*!< CHPRIOR (Bit 4)                                       */
#define DMA_CFG6L_CHPRIOR_Msk             (0xf0UL)                  /*!< CHPRIOR (Bitfield-Mask: 0x0f)                         */
#define DMA_CFG6L_CHSUSP_Pos              (8UL)                     /*!< CHSUSP (Bit 8)                                        */
#define DMA_CFG6L_CHSUSP_Msk              (0x100UL)                 /*!< CHSUSP (Bitfield-Mask: 0x01)                          */
#define DMA_CFG6L_FIFOEMPTY_Pos           (9UL)                     /*!< FIFOEMPTY (Bit 9)                                     */
#define DMA_CFG6L_FIFOEMPTY_Msk           (0x200UL)                 /*!< FIFOEMPTY (Bitfield-Mask: 0x01)                       */
#define DMA_CFG6L_HSSELDST_Pos            (10UL)                    /*!< HSSELDST (Bit 10)                                     */
#define DMA_CFG6L_HSSELDST_Msk            (0x400UL)                 /*!< HSSELDST (Bitfield-Mask: 0x01)                        */
#define DMA_CFG6L_HSSELSRC_Pos            (11UL)                    /*!< HSSELSRC (Bit 11)                                     */
#define DMA_CFG6L_HSSELSRC_Msk            (0x800UL)                 /*!< HSSELSRC (Bitfield-Mask: 0x01)                        */
#define DMA_CFG6L_DSTHSPOL_Pos            (18UL)                    /*!< DSTHSPOL (Bit 18)                                     */
#define DMA_CFG6L_DSTHSPOL_Msk            (0x40000UL)               /*!< DSTHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG6L_SRCHSPOL_Pos            (19UL)                    /*!< SRCHSPOL (Bit 19)                                     */
#define DMA_CFG6L_SRCHSPOL_Msk            (0x80000UL)               /*!< SRCHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG6L_MAXABRST_Pos            (20UL)                    /*!< MAXABRST (Bit 20)                                     */
#define DMA_CFG6L_MAXABRST_Msk            (0x3ff00000UL)            /*!< MAXABRST (Bitfield-Mask: 0x3ff)                       */
#define DMA_CFG6L_RELOADSRC_Pos           (30UL)                    /*!< RELOADSRC (Bit 30)                                    */
#define DMA_CFG6L_RELOADSRC_Msk           (0x40000000UL)            /*!< RELOADSRC (Bitfield-Mask: 0x01)                       */
#define DMA_CFG6L_RELOADDST_Pos           (31UL)                    /*!< RELOADDST (Bit 31)                                    */
#define DMA_CFG6L_RELOADDST_Msk           (0x80000000UL)            /*!< RELOADDST (Bitfield-Mask: 0x01)                       */
/* =========================================================  CFG7L  ========================================================= */
#define DMA_CFG7L_INACTIVE_Pos            (0UL)                     /*!< INACTIVE (Bit 0)                                      */
#define DMA_CFG7L_INACTIVE_Msk            (0x1UL)                   /*!< INACTIVE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG7L_SRCPCTLOVER_Pos         (1UL)                     /*!< SRCPCTLOVER (Bit 1)                                   */
#define DMA_CFG7L_SRCPCTLOVER_Msk         (0x2UL)                   /*!< SRCPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG7L_DSTPCTLOVER_Pos         (2UL)                     /*!< DSTPCTLOVER (Bit 2)                                   */
#define DMA_CFG7L_DSTPCTLOVER_Msk         (0x4UL)                   /*!< DSTPCTLOVER (Bitfield-Mask: 0x01)                     */
#define DMA_CFG7L_CHPRIOR_Pos             (4UL)                     /*!< CHPRIOR (Bit 4)                                       */
#define DMA_CFG7L_CHPRIOR_Msk             (0xf0UL)                  /*!< CHPRIOR (Bitfield-Mask: 0x0f)                         */
#define DMA_CFG7L_CHSUSP_Pos              (8UL)                     /*!< CHSUSP (Bit 8)                                        */
#define DMA_CFG7L_CHSUSP_Msk              (0x100UL)                 /*!< CHSUSP (Bitfield-Mask: 0x01)                          */
#define DMA_CFG7L_FIFOEMPTY_Pos           (9UL)                     /*!< FIFOEMPTY (Bit 9)                                     */
#define DMA_CFG7L_FIFOEMPTY_Msk           (0x200UL)                 /*!< FIFOEMPTY (Bitfield-Mask: 0x01)                       */
#define DMA_CFG7L_HSSELDST_Pos            (10UL)                    /*!< HSSELDST (Bit 10)                                     */
#define DMA_CFG7L_HSSELDST_Msk            (0x400UL)                 /*!< HSSELDST (Bitfield-Mask: 0x01)                        */
#define DMA_CFG7L_HSSELSRC_Pos            (11UL)                    /*!< HSSELSRC (Bit 11)                                     */
#define DMA_CFG7L_HSSELSRC_Msk            (0x800UL)                 /*!< HSSELSRC (Bitfield-Mask: 0x01)                        */
#define DMA_CFG7L_DSTHSPOL_Pos            (18UL)                    /*!< DSTHSPOL (Bit 18)                                     */
#define DMA_CFG7L_DSTHSPOL_Msk            (0x40000UL)               /*!< DSTHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG7L_SRCHSPOL_Pos            (19UL)                    /*!< SRCHSPOL (Bit 19)                                     */
#define DMA_CFG7L_SRCHSPOL_Msk            (0x80000UL)               /*!< SRCHSPOL (Bitfield-Mask: 0x01)                        */
#define DMA_CFG7L_MAXABRST_Pos            (20UL)                    /*!< MAXABRST (Bit 20)                                     */
#define DMA_CFG7L_MAXABRST_Msk            (0x3ff00000UL)            /*!< MAXABRST (Bitfield-Mask: 0x3ff)                       */
#define DMA_CFG7L_RELOADSRC_Pos           (30UL)                    /*!< RELOADSRC (Bit 30)                                    */
#define DMA_CFG7L_RELOADSRC_Msk           (0x40000000UL)            /*!< RELOADSRC (Bitfield-Mask: 0x01)                       */
#define DMA_CFG7L_RELOADDST_Pos           (31UL)                    /*!< RELOADDST (Bit 31)                                    */
#define DMA_CFG7L_RELOADDST_Msk           (0x80000000UL)            /*!< RELOADDST (Bitfield-Mask: 0x01)                       */
/* =========================================================  CFG0H  ========================================================= */
#define DMA_CFG0H_FCMODE_Pos              (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMA_CFG0H_FCMODE_Msk              (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
#define DMA_CFG0H_FIFOMODE_Pos            (1UL)                     /*!< FIFOMODE (Bit 1)                                      */
#define DMA_CFG0H_FIFOMODE_Msk            (0x2UL)                   /*!< FIFOMODE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG0H_PROTCTL_Pos             (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMA_CFG0H_PROTCTL_Msk             (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMA_CFG0H_SRCPER_Pos              (7UL)                     /*!< SRCPER (Bit 7)                                        */
#define DMA_CFG0H_SRCPER_Msk              (0x780UL)                 /*!< SRCPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG0H_DSTPER_Pos              (11UL)                    /*!< DSTPER (Bit 11)                                       */
#define DMA_CFG0H_DSTPER_Msk              (0x7800UL)                /*!< DSTPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG0H_EXTSRCPER1_Pos          (15UL)                    /*!< EXTSRCPER1 (Bit 15)                                   */
#define DMA_CFG0H_EXTSRCPER1_Msk          (0x8000UL)                /*!< EXTSRCPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG0H_EXTDSTPER1_Pos          (16UL)                    /*!< EXTDSTPER1 (Bit 16)                                   */
#define DMA_CFG0H_EXTDSTPER1_Msk          (0x10000UL)               /*!< EXTDSTPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG0H_EXTSRCPER2_Pos          (17UL)                    /*!< EXTSRCPER2 (Bit 17)                                   */
#define DMA_CFG0H_EXTSRCPER2_Msk          (0x20000UL)               /*!< EXTSRCPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG0H_EXTDSTPER2_Pos          (18UL)                    /*!< EXTDSTPER2 (Bit 18)                                   */
#define DMA_CFG0H_EXTDSTPER2_Msk          (0x40000UL)               /*!< EXTDSTPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG0H_EXTSRCPER3_Pos          (19UL)                    /*!< EXTSRCPER3 (Bit 19)                                   */
#define DMA_CFG0H_EXTSRCPER3_Msk          (0x80000UL)               /*!< EXTSRCPER3 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG0H_EXTDSTPER3_Pos          (20UL)                    /*!< EXTDSTPER3 (Bit 20)                                   */
#define DMA_CFG0H_EXTDSTPER3_Msk          (0x100000UL)              /*!< EXTDSTPER3 (Bitfield-Mask: 0x01)                      */
/* =========================================================  CFG1H  ========================================================= */
#define DMA_CFG1H_FCMODE_Pos              (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMA_CFG1H_FCMODE_Msk              (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
#define DMA_CFG1H_FIFOMODE_Pos            (1UL)                     /*!< FIFOMODE (Bit 1)                                      */
#define DMA_CFG1H_FIFOMODE_Msk            (0x2UL)                   /*!< FIFOMODE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG1H_PROTCTL_Pos             (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMA_CFG1H_PROTCTL_Msk             (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMA_CFG1H_SRCPER_Pos              (7UL)                     /*!< SRCPER (Bit 7)                                        */
#define DMA_CFG1H_SRCPER_Msk              (0x780UL)                 /*!< SRCPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG1H_DSTPER_Pos              (11UL)                    /*!< DSTPER (Bit 11)                                       */
#define DMA_CFG1H_DSTPER_Msk              (0x7800UL)                /*!< DSTPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG1H_EXTSRCPER1_Pos          (15UL)                    /*!< EXTSRCPER1 (Bit 15)                                   */
#define DMA_CFG1H_EXTSRCPER1_Msk          (0x8000UL)                /*!< EXTSRCPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG1H_EXTDSTPER1_Pos          (16UL)                    /*!< EXTDSTPER1 (Bit 16)                                   */
#define DMA_CFG1H_EXTDSTPER1_Msk          (0x10000UL)               /*!< EXTDSTPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG1H_EXTSRCPER2_Pos          (17UL)                    /*!< EXTSRCPER2 (Bit 17)                                   */
#define DMA_CFG1H_EXTSRCPER2_Msk          (0x20000UL)               /*!< EXTSRCPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG1H_EXTDSTPER2_Pos          (18UL)                    /*!< EXTDSTPER2 (Bit 18)                                   */
#define DMA_CFG1H_EXTDSTPER2_Msk          (0x40000UL)               /*!< EXTDSTPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG1H_EXTSRCPER3_Pos          (19UL)                    /*!< EXTSRCPER3 (Bit 19)                                   */
#define DMA_CFG1H_EXTSRCPER3_Msk          (0x80000UL)               /*!< EXTSRCPER3 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG1H_EXTDSTPER3_Pos          (20UL)                    /*!< EXTDSTPER3 (Bit 20)                                   */
#define DMA_CFG1H_EXTDSTPER3_Msk          (0x100000UL)              /*!< EXTDSTPER3 (Bitfield-Mask: 0x01)                      */
/* =========================================================  CFG2H  ========================================================= */
#define DMA_CFG2H_FCMODE_Pos              (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMA_CFG2H_FCMODE_Msk              (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
#define DMA_CFG2H_FIFOMODE_Pos            (1UL)                     /*!< FIFOMODE (Bit 1)                                      */
#define DMA_CFG2H_FIFOMODE_Msk            (0x2UL)                   /*!< FIFOMODE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG2H_PROTCTL_Pos             (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMA_CFG2H_PROTCTL_Msk             (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMA_CFG2H_SRCPER_Pos              (7UL)                     /*!< SRCPER (Bit 7)                                        */
#define DMA_CFG2H_SRCPER_Msk              (0x780UL)                 /*!< SRCPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG2H_DSTPER_Pos              (11UL)                    /*!< DSTPER (Bit 11)                                       */
#define DMA_CFG2H_DSTPER_Msk              (0x7800UL)                /*!< DSTPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG2H_EXTSRCPER1_Pos          (15UL)                    /*!< EXTSRCPER1 (Bit 15)                                   */
#define DMA_CFG2H_EXTSRCPER1_Msk          (0x8000UL)                /*!< EXTSRCPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG2H_EXTDSTPER1_Pos          (16UL)                    /*!< EXTDSTPER1 (Bit 16)                                   */
#define DMA_CFG2H_EXTDSTPER1_Msk          (0x10000UL)               /*!< EXTDSTPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG2H_EXTSRCPER2_Pos          (17UL)                    /*!< EXTSRCPER2 (Bit 17)                                   */
#define DMA_CFG2H_EXTSRCPER2_Msk          (0x20000UL)               /*!< EXTSRCPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG2H_EXTDSTPER2_Pos          (18UL)                    /*!< EXTDSTPER2 (Bit 18)                                   */
#define DMA_CFG2H_EXTDSTPER2_Msk          (0x40000UL)               /*!< EXTDSTPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG2H_EXTSRCPER3_Pos          (19UL)                    /*!< EXTSRCPER3 (Bit 19)                                   */
#define DMA_CFG2H_EXTSRCPER3_Msk          (0x80000UL)               /*!< EXTSRCPER3 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG2H_EXTDSTPER3_Pos          (20UL)                    /*!< EXTDSTPER3 (Bit 20)                                   */
#define DMA_CFG2H_EXTDSTPER3_Msk          (0x100000UL)              /*!< EXTDSTPER3 (Bitfield-Mask: 0x01)                      */
/* =========================================================  CFG3H  ========================================================= */
#define DMA_CFG3H_FCMODE_Pos              (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMA_CFG3H_FCMODE_Msk              (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
#define DMA_CFG3H_FIFOMODE_Pos            (1UL)                     /*!< FIFOMODE (Bit 1)                                      */
#define DMA_CFG3H_FIFOMODE_Msk            (0x2UL)                   /*!< FIFOMODE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG3H_PROTCTL_Pos             (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMA_CFG3H_PROTCTL_Msk             (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMA_CFG3H_SRCPER_Pos              (7UL)                     /*!< SRCPER (Bit 7)                                        */
#define DMA_CFG3H_SRCPER_Msk              (0x780UL)                 /*!< SRCPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG3H_DSTPER_Pos              (11UL)                    /*!< DSTPER (Bit 11)                                       */
#define DMA_CFG3H_DSTPER_Msk              (0x7800UL)                /*!< DSTPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG3H_EXTSRCPER1_Pos          (15UL)                    /*!< EXTSRCPER1 (Bit 15)                                   */
#define DMA_CFG3H_EXTSRCPER1_Msk          (0x8000UL)                /*!< EXTSRCPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG3H_EXTDSTPER1_Pos          (16UL)                    /*!< EXTDSTPER1 (Bit 16)                                   */
#define DMA_CFG3H_EXTDSTPER1_Msk          (0x10000UL)               /*!< EXTDSTPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG3H_EXTSRCPER2_Pos          (17UL)                    /*!< EXTSRCPER2 (Bit 17)                                   */
#define DMA_CFG3H_EXTSRCPER2_Msk          (0x20000UL)               /*!< EXTSRCPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG3H_EXTDSTPER2_Pos          (18UL)                    /*!< EXTDSTPER2 (Bit 18)                                   */
#define DMA_CFG3H_EXTDSTPER2_Msk          (0x40000UL)               /*!< EXTDSTPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG3H_EXTSRCPER3_Pos          (19UL)                    /*!< EXTSRCPER3 (Bit 19)                                   */
#define DMA_CFG3H_EXTSRCPER3_Msk          (0x80000UL)               /*!< EXTSRCPER3 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG3H_EXTDSTPER3_Pos          (20UL)                    /*!< EXTDSTPER3 (Bit 20)                                   */
#define DMA_CFG3H_EXTDSTPER3_Msk          (0x100000UL)              /*!< EXTDSTPER3 (Bitfield-Mask: 0x01)                      */
/* =========================================================  CFG4H  ========================================================= */
#define DMA_CFG4H_FCMODE_Pos              (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMA_CFG4H_FCMODE_Msk              (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
#define DMA_CFG4H_FIFOMODE_Pos            (1UL)                     /*!< FIFOMODE (Bit 1)                                      */
#define DMA_CFG4H_FIFOMODE_Msk            (0x2UL)                   /*!< FIFOMODE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG4H_PROTCTL_Pos             (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMA_CFG4H_PROTCTL_Msk             (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMA_CFG4H_SRCPER_Pos              (7UL)                     /*!< SRCPER (Bit 7)                                        */
#define DMA_CFG4H_SRCPER_Msk              (0x780UL)                 /*!< SRCPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG4H_DSTPER_Pos              (11UL)                    /*!< DSTPER (Bit 11)                                       */
#define DMA_CFG4H_DSTPER_Msk              (0x7800UL)                /*!< DSTPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG4H_EXTSRCPER1_Pos          (15UL)                    /*!< EXTSRCPER1 (Bit 15)                                   */
#define DMA_CFG4H_EXTSRCPER1_Msk          (0x8000UL)                /*!< EXTSRCPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG4H_EXTDSTPER1_Pos          (16UL)                    /*!< EXTDSTPER1 (Bit 16)                                   */
#define DMA_CFG4H_EXTDSTPER1_Msk          (0x10000UL)               /*!< EXTDSTPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG4H_EXTSRCPER2_Pos          (17UL)                    /*!< EXTSRCPER2 (Bit 17)                                   */
#define DMA_CFG4H_EXTSRCPER2_Msk          (0x20000UL)               /*!< EXTSRCPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG4H_EXTDSTPER2_Pos          (18UL)                    /*!< EXTDSTPER2 (Bit 18)                                   */
#define DMA_CFG4H_EXTDSTPER2_Msk          (0x40000UL)               /*!< EXTDSTPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG4H_EXTSRCPER3_Pos          (19UL)                    /*!< EXTSRCPER3 (Bit 19)                                   */
#define DMA_CFG4H_EXTSRCPER3_Msk          (0x80000UL)               /*!< EXTSRCPER3 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG4H_EXTDSTPER3_Pos          (20UL)                    /*!< EXTDSTPER3 (Bit 20)                                   */
#define DMA_CFG4H_EXTDSTPER3_Msk          (0x100000UL)              /*!< EXTDSTPER3 (Bitfield-Mask: 0x01)                      */
/* =========================================================  CFG5H  ========================================================= */
#define DMA_CFG5H_FCMODE_Pos              (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMA_CFG5H_FCMODE_Msk              (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
#define DMA_CFG5H_FIFOMODE_Pos            (1UL)                     /*!< FIFOMODE (Bit 1)                                      */
#define DMA_CFG5H_FIFOMODE_Msk            (0x2UL)                   /*!< FIFOMODE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG5H_PROTCTL_Pos             (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMA_CFG5H_PROTCTL_Msk             (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMA_CFG5H_SRCPER_Pos              (7UL)                     /*!< SRCPER (Bit 7)                                        */
#define DMA_CFG5H_SRCPER_Msk              (0x780UL)                 /*!< SRCPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG5H_DSTPER_Pos              (11UL)                    /*!< DSTPER (Bit 11)                                       */
#define DMA_CFG5H_DSTPER_Msk              (0x7800UL)                /*!< DSTPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG5H_EXTSRCPER1_Pos          (15UL)                    /*!< EXTSRCPER1 (Bit 15)                                   */
#define DMA_CFG5H_EXTSRCPER1_Msk          (0x8000UL)                /*!< EXTSRCPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG5H_EXTDSTPER1_Pos          (16UL)                    /*!< EXTDSTPER1 (Bit 16)                                   */
#define DMA_CFG5H_EXTDSTPER1_Msk          (0x10000UL)               /*!< EXTDSTPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG5H_EXTSRCPER2_Pos          (17UL)                    /*!< EXTSRCPER2 (Bit 17)                                   */
#define DMA_CFG5H_EXTSRCPER2_Msk          (0x20000UL)               /*!< EXTSRCPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG5H_EXTDSTPER2_Pos          (18UL)                    /*!< EXTDSTPER2 (Bit 18)                                   */
#define DMA_CFG5H_EXTDSTPER2_Msk          (0x40000UL)               /*!< EXTDSTPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG5H_EXTSRCPER3_Pos          (19UL)                    /*!< EXTSRCPER3 (Bit 19)                                   */
#define DMA_CFG5H_EXTSRCPER3_Msk          (0x80000UL)               /*!< EXTSRCPER3 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG5H_EXTDSTPER3_Pos          (20UL)                    /*!< EXTDSTPER3 (Bit 20)                                   */
#define DMA_CFG5H_EXTDSTPER3_Msk          (0x100000UL)              /*!< EXTDSTPER3 (Bitfield-Mask: 0x01)                      */
/* =========================================================  CFG6H  ========================================================= */
#define DMA_CFG6H_FCMODE_Pos              (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMA_CFG6H_FCMODE_Msk              (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
#define DMA_CFG6H_FIFOMODE_Pos            (1UL)                     /*!< FIFOMODE (Bit 1)                                      */
#define DMA_CFG6H_FIFOMODE_Msk            (0x2UL)                   /*!< FIFOMODE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG6H_PROTCTL_Pos             (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMA_CFG6H_PROTCTL_Msk             (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMA_CFG6H_SRCPER_Pos              (7UL)                     /*!< SRCPER (Bit 7)                                        */
#define DMA_CFG6H_SRCPER_Msk              (0x780UL)                 /*!< SRCPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG6H_DSTPER_Pos              (11UL)                    /*!< DSTPER (Bit 11)                                       */
#define DMA_CFG6H_DSTPER_Msk              (0x7800UL)                /*!< DSTPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG6H_EXTSRCPER1_Pos          (15UL)                    /*!< EXTSRCPER1 (Bit 15)                                   */
#define DMA_CFG6H_EXTSRCPER1_Msk          (0x8000UL)                /*!< EXTSRCPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG6H_EXTDSTPER1_Pos          (16UL)                    /*!< EXTDSTPER1 (Bit 16)                                   */
#define DMA_CFG6H_EXTDSTPER1_Msk          (0x10000UL)               /*!< EXTDSTPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG6H_EXTSRCPER2_Pos          (17UL)                    /*!< EXTSRCPER2 (Bit 17)                                   */
#define DMA_CFG6H_EXTSRCPER2_Msk          (0x20000UL)               /*!< EXTSRCPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG6H_EXTDSTPER2_Pos          (18UL)                    /*!< EXTDSTPER2 (Bit 18)                                   */
#define DMA_CFG6H_EXTDSTPER2_Msk          (0x40000UL)               /*!< EXTDSTPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG6H_EXTSRCPER3_Pos          (19UL)                    /*!< EXTSRCPER3 (Bit 19)                                   */
#define DMA_CFG6H_EXTSRCPER3_Msk          (0x80000UL)               /*!< EXTSRCPER3 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG6H_EXTDSTPER3_Pos          (20UL)                    /*!< EXTDSTPER3 (Bit 20)                                   */
#define DMA_CFG6H_EXTDSTPER3_Msk          (0x100000UL)              /*!< EXTDSTPER3 (Bitfield-Mask: 0x01)                      */
/* =========================================================  CFG7H  ========================================================= */
#define DMA_CFG7H_FCMODE_Pos              (0UL)                     /*!< FCMODE (Bit 0)                                        */
#define DMA_CFG7H_FCMODE_Msk              (0x1UL)                   /*!< FCMODE (Bitfield-Mask: 0x01)                          */
#define DMA_CFG7H_FIFOMODE_Pos            (1UL)                     /*!< FIFOMODE (Bit 1)                                      */
#define DMA_CFG7H_FIFOMODE_Msk            (0x2UL)                   /*!< FIFOMODE (Bitfield-Mask: 0x01)                        */
#define DMA_CFG7H_PROTCTL_Pos             (3UL)                     /*!< PROTCTL (Bit 3)                                       */
#define DMA_CFG7H_PROTCTL_Msk             (0x8UL)                   /*!< PROTCTL (Bitfield-Mask: 0x01)                         */
#define DMA_CFG7H_SRCPER_Pos              (7UL)                     /*!< SRCPER (Bit 7)                                        */
#define DMA_CFG7H_SRCPER_Msk              (0x780UL)                 /*!< SRCPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG7H_DSTPER_Pos              (11UL)                    /*!< DSTPER (Bit 11)                                       */
#define DMA_CFG7H_DSTPER_Msk              (0x7800UL)                /*!< DSTPER (Bitfield-Mask: 0x0f)                          */
#define DMA_CFG7H_EXTSRCPER1_Pos          (15UL)                    /*!< EXTSRCPER1 (Bit 15)                                   */
#define DMA_CFG7H_EXTSRCPER1_Msk          (0x8000UL)                /*!< EXTSRCPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG7H_EXTDSTPER1_Pos          (16UL)                    /*!< EXTDSTPER1 (Bit 16)                                   */
#define DMA_CFG7H_EXTDSTPER1_Msk          (0x10000UL)               /*!< EXTDSTPER1 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG7H_EXTSRCPER2_Pos          (17UL)                    /*!< EXTSRCPER2 (Bit 17)                                   */
#define DMA_CFG7H_EXTSRCPER2_Msk          (0x20000UL)               /*!< EXTSRCPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG7H_EXTDSTPER2_Pos          (18UL)                    /*!< EXTDSTPER2 (Bit 18)                                   */
#define DMA_CFG7H_EXTDSTPER2_Msk          (0x40000UL)               /*!< EXTDSTPER2 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG7H_EXTSRCPER3_Pos          (19UL)                    /*!< EXTSRCPER3 (Bit 19)                                   */
#define DMA_CFG7H_EXTSRCPER3_Msk          (0x80000UL)               /*!< EXTSRCPER3 (Bitfield-Mask: 0x01)                      */
#define DMA_CFG7H_EXTDSTPER3_Pos          (20UL)                    /*!< EXTDSTPER3 (Bit 20)                                   */
#define DMA_CFG7H_EXTDSTPER3_Msk          (0x100000UL)              /*!< EXTDSTPER3 (Bitfield-Mask: 0x01)                      */
/* =========================================================  SGR0L  ========================================================= */
#define DMA_SGR0L_SGI_Pos                 (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMA_SGR0L_SGI_Msk                 (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
#define DMA_SGR0L_SGC_Pos                 (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMA_SGR0L_SGC_Msk                 (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  SGR1L  ========================================================= */
#define DMA_SGR1L_SGI_Pos                 (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMA_SGR1L_SGI_Msk                 (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
#define DMA_SGR1L_SGC_Pos                 (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMA_SGR1L_SGC_Msk                 (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  SGR2L  ========================================================= */
#define DMA_SGR2L_SGI_Pos                 (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMA_SGR2L_SGI_Msk                 (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
#define DMA_SGR2L_SGC_Pos                 (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMA_SGR2L_SGC_Msk                 (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  SGR3L  ========================================================= */
#define DMA_SGR3L_SGI_Pos                 (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMA_SGR3L_SGI_Msk                 (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
#define DMA_SGR3L_SGC_Pos                 (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMA_SGR3L_SGC_Msk                 (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  SGR4L  ========================================================= */
#define DMA_SGR4L_SGI_Pos                 (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMA_SGR4L_SGI_Msk                 (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
#define DMA_SGR4L_SGC_Pos                 (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMA_SGR4L_SGC_Msk                 (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  SGR5L  ========================================================= */
#define DMA_SGR5L_SGI_Pos                 (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMA_SGR5L_SGI_Msk                 (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
#define DMA_SGR5L_SGC_Pos                 (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMA_SGR5L_SGC_Msk                 (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  SGR6L  ========================================================= */
#define DMA_SGR6L_SGI_Pos                 (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMA_SGR6L_SGI_Msk                 (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
#define DMA_SGR6L_SGC_Pos                 (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMA_SGR6L_SGC_Msk                 (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  SGR7L  ========================================================= */
#define DMA_SGR7L_SGI_Pos                 (0UL)                     /*!< SGI (Bit 0)                                           */
#define DMA_SGR7L_SGI_Msk                 (0xfffffUL)               /*!< SGI (Bitfield-Mask: 0xfffff)                          */
#define DMA_SGR7L_SGC_Pos                 (20UL)                    /*!< SGC (Bit 20)                                          */
#define DMA_SGR7L_SGC_Msk                 (0xfff00000UL)            /*!< SGC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  SGR0H  ========================================================= */
#define DMA_SGR0H_SGSN_Pos                (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMA_SGR0H_SGSN_Msk                (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
#define DMA_SGR0H_BLKTS_Pos               (16UL)                    /*!< BLKTS (Bit 16)                                        */
#define DMA_SGR0H_BLKTS_Msk               (0xffff0000UL)            /*!< BLKTS (Bitfield-Mask: 0xffff)                         */
/* =========================================================  SGR1H  ========================================================= */
#define DMA_SGR1H_SGSN_Pos                (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMA_SGR1H_SGSN_Msk                (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
#define DMA_SGR1H_BLKTS_Pos               (16UL)                    /*!< BLKTS (Bit 16)                                        */
#define DMA_SGR1H_BLKTS_Msk               (0xffff0000UL)            /*!< BLKTS (Bitfield-Mask: 0xffff)                         */
/* =========================================================  SGR2H  ========================================================= */
#define DMA_SGR2H_SGSN_Pos                (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMA_SGR2H_SGSN_Msk                (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
#define DMA_SGR2H_BLKTS_Pos               (16UL)                    /*!< BLKTS (Bit 16)                                        */
#define DMA_SGR2H_BLKTS_Msk               (0xffff0000UL)            /*!< BLKTS (Bitfield-Mask: 0xffff)                         */
/* =========================================================  SGR3H  ========================================================= */
#define DMA_SGR3H_SGSN_Pos                (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMA_SGR3H_SGSN_Msk                (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
#define DMA_SGR3H_BLKTS_Pos               (16UL)                    /*!< BLKTS (Bit 16)                                        */
#define DMA_SGR3H_BLKTS_Msk               (0xffff0000UL)            /*!< BLKTS (Bitfield-Mask: 0xffff)                         */
/* =========================================================  SGR4H  ========================================================= */
#define DMA_SGR4H_SGSN_Pos                (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMA_SGR4H_SGSN_Msk                (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
#define DMA_SGR4H_BLKTS_Pos               (16UL)                    /*!< BLKTS (Bit 16)                                        */
#define DMA_SGR4H_BLKTS_Msk               (0xffff0000UL)            /*!< BLKTS (Bitfield-Mask: 0xffff)                         */
/* =========================================================  SGR5H  ========================================================= */
#define DMA_SGR5H_SGSN_Pos                (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMA_SGR5H_SGSN_Msk                (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
#define DMA_SGR5H_BLKTS_Pos               (16UL)                    /*!< BLKTS (Bit 16)                                        */
#define DMA_SGR5H_BLKTS_Msk               (0xffff0000UL)            /*!< BLKTS (Bitfield-Mask: 0xffff)                         */
/* =========================================================  SGR6H  ========================================================= */
#define DMA_SGR6H_SGSN_Pos                (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMA_SGR6H_SGSN_Msk                (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
#define DMA_SGR6H_BLKTS_Pos               (16UL)                    /*!< BLKTS (Bit 16)                                        */
#define DMA_SGR6H_BLKTS_Msk               (0xffff0000UL)            /*!< BLKTS (Bitfield-Mask: 0xffff)                         */
/* =========================================================  SGR7H  ========================================================= */
#define DMA_SGR7H_SGSN_Pos                (0UL)                     /*!< SGSN (Bit 0)                                          */
#define DMA_SGR7H_SGSN_Msk                (0xffffUL)                /*!< SGSN (Bitfield-Mask: 0xffff)                          */
#define DMA_SGR7H_BLKTS_Pos               (16UL)                    /*!< BLKTS (Bit 16)                                        */
#define DMA_SGR7H_BLKTS_Msk               (0xffff0000UL)            /*!< BLKTS (Bitfield-Mask: 0xffff)                         */
/* =========================================================  DSR0L  ========================================================= */
#define DMA_DSR0L_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR0L_DSI_Msk                 (0xfffffUL)               /*!< DSI (Bitfield-Mask: 0xfffff)                          */
#define DMA_DSR0L_DSC_Pos                 (20UL)                    /*!< DSC (Bit 20)                                          */
#define DMA_DSR0L_DSC_Msk                 (0xfff00000UL)            /*!< DSC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  DSR1L  ========================================================= */
#define DMA_DSR1L_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR1L_DSI_Msk                 (0xfffffUL)               /*!< DSI (Bitfield-Mask: 0xfffff)                          */
#define DMA_DSR1L_DSC_Pos                 (20UL)                    /*!< DSC (Bit 20)                                          */
#define DMA_DSR1L_DSC_Msk                 (0xfff00000UL)            /*!< DSC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  DSR2L  ========================================================= */
#define DMA_DSR2L_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR2L_DSI_Msk                 (0xfffffUL)               /*!< DSI (Bitfield-Mask: 0xfffff)                          */
#define DMA_DSR2L_DSC_Pos                 (20UL)                    /*!< DSC (Bit 20)                                          */
#define DMA_DSR2L_DSC_Msk                 (0xfff00000UL)            /*!< DSC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  DSR3L  ========================================================= */
#define DMA_DSR3L_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR3L_DSI_Msk                 (0xfffffUL)               /*!< DSI (Bitfield-Mask: 0xfffff)                          */
#define DMA_DSR3L_DSC_Pos                 (20UL)                    /*!< DSC (Bit 20)                                          */
#define DMA_DSR3L_DSC_Msk                 (0xfff00000UL)            /*!< DSC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  DSR4L  ========================================================= */
#define DMA_DSR4L_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR4L_DSI_Msk                 (0xfffffUL)               /*!< DSI (Bitfield-Mask: 0xfffff)                          */
#define DMA_DSR4L_DSC_Pos                 (20UL)                    /*!< DSC (Bit 20)                                          */
#define DMA_DSR4L_DSC_Msk                 (0xfff00000UL)            /*!< DSC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  DSR5L  ========================================================= */
#define DMA_DSR5L_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR5L_DSI_Msk                 (0xfffffUL)               /*!< DSI (Bitfield-Mask: 0xfffff)                          */
#define DMA_DSR5L_DSC_Pos                 (20UL)                    /*!< DSC (Bit 20)                                          */
#define DMA_DSR5L_DSC_Msk                 (0xfff00000UL)            /*!< DSC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  DSR6L  ========================================================= */
#define DMA_DSR6L_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR6L_DSI_Msk                 (0xfffffUL)               /*!< DSI (Bitfield-Mask: 0xfffff)                          */
#define DMA_DSR6L_DSC_Pos                 (20UL)                    /*!< DSC (Bit 20)                                          */
#define DMA_DSR6L_DSC_Msk                 (0xfff00000UL)            /*!< DSC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  DSR7L  ========================================================= */
#define DMA_DSR7L_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR7L_DSI_Msk                 (0xfffffUL)               /*!< DSI (Bitfield-Mask: 0xfffff)                          */
#define DMA_DSR7L_DSC_Pos                 (20UL)                    /*!< DSC (Bit 20)                                          */
#define DMA_DSR7L_DSC_Msk                 (0xfff00000UL)            /*!< DSC (Bitfield-Mask: 0xfff)                            */
/* =========================================================  DSR0H  ========================================================= */
#define DMA_DSR0H_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR0H_DSI_Msk                 (0x1fUL)                  /*!< DSI (Bitfield-Mask: 0x1f)                             */
/* =========================================================  DSR1H  ========================================================= */
#define DMA_DSR1H_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR1H_DSI_Msk                 (0x1fUL)                  /*!< DSI (Bitfield-Mask: 0x1f)                             */
/* =========================================================  DSR2H  ========================================================= */
#define DMA_DSR2H_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR2H_DSI_Msk                 (0x1fUL)                  /*!< DSI (Bitfield-Mask: 0x1f)                             */
/* =========================================================  DSR3H  ========================================================= */
#define DMA_DSR3H_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR3H_DSI_Msk                 (0x1fUL)                  /*!< DSI (Bitfield-Mask: 0x1f)                             */
/* =========================================================  DSR4H  ========================================================= */
#define DMA_DSR4H_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR4H_DSI_Msk                 (0x1fUL)                  /*!< DSI (Bitfield-Mask: 0x1f)                             */
/* =========================================================  DSR5H  ========================================================= */
#define DMA_DSR5H_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR5H_DSI_Msk                 (0x1fUL)                  /*!< DSI (Bitfield-Mask: 0x1f)                             */
/* =========================================================  DSR6H  ========================================================= */
#define DMA_DSR6H_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR6H_DSI_Msk                 (0x1fUL)                  /*!< DSI (Bitfield-Mask: 0x1f)                             */
/* =========================================================  DSR7H  ========================================================= */
#define DMA_DSR7H_DSI_Pos                 (0UL)                     /*!< DSI (Bit 0)                                           */
#define DMA_DSR7H_DSI_Msk                 (0x1fUL)                  /*!< DSI (Bitfield-Mask: 0x1f)                             */
/* ========================================================  RAWTFR  ========================================================= */
/* =======================================================  RAWBLOCK  ======================================================== */
/* ======================================================  RAWSRCTRAN  ======================================================= */
/* ======================================================  RAWDSTTRAN  ======================================================= */
/* ========================================================  RAWERR  ========================================================= */
/* ========================================================  STSTFR  ========================================================= */
/* =======================================================  STSBLOCK  ======================================================== */
/* ======================================================  STSSRCTRAN  ======================================================= */
/* ======================================================  STSDSTTRAN  ======================================================= */
/* ========================================================  STSERR  ========================================================= */
/* ========================================================  MSKTFRL  ======================================================== */
/* ========================================================  MSKTFRH  ======================================================== */
/* =======================================================  MSKBLOCKL  ======================================================= */
/* =======================================================  MSKBLOCKH  ======================================================= */
/* ======================================================  MSKSRCTRANL  ====================================================== */
/* ======================================================  MSKSRCTRANH  ====================================================== */
/* ======================================================  MSKDSTTRANL  ====================================================== */
/* ======================================================  MSKDSTTRANH  ====================================================== */
/* ========================================================  MSKERRL  ======================================================== */
/* ========================================================  MSKERRH  ======================================================== */
/* ========================================================  CLRTFR  ========================================================= */
/* =======================================================  CLRBLOCK  ======================================================== */
/* ======================================================  CLRSRCTRAN  ======================================================= */
/* ======================================================  CLRDSTTRAN  ======================================================= */
/* ========================================================  CLRERR  ========================================================= */
/* ========================================================  INTSTS  ========================================================= */
#define DMA_INTSTS_TFR_Pos                (0UL)                     /*!< TFR (Bit 0)                                           */
#define DMA_INTSTS_TFR_Msk                (0x1UL)                   /*!< TFR (Bitfield-Mask: 0x01)                             */
#define DMA_INTSTS_BLOCK_Pos              (1UL)                     /*!< BLOCK (Bit 1)                                         */
#define DMA_INTSTS_BLOCK_Msk              (0x2UL)                   /*!< BLOCK (Bitfield-Mask: 0x01)                           */
#define DMA_INTSTS_SRCT_Pos               (2UL)                     /*!< SRCT (Bit 2)                                          */
#define DMA_INTSTS_SRCT_Msk               (0x4UL)                   /*!< SRCT (Bitfield-Mask: 0x01)                            */
#define DMA_INTSTS_DSTT_Pos               (3UL)                     /*!< DSTT (Bit 3)                                          */
#define DMA_INTSTS_DSTT_Msk               (0x8UL)                   /*!< DSTT (Bitfield-Mask: 0x01)                            */
#define DMA_INTSTS_ERR_Pos                (4UL)                     /*!< ERR (Bit 4)                                           */
#define DMA_INTSTS_ERR_Msk                (0x10UL)                  /*!< ERR (Bitfield-Mask: 0x01)                             */
/* =========================================================  CONF  ========================================================== */
#define DMA_CONF_EN_Pos                   (0UL)                     /*!< EN (Bit 0)                                            */
#define DMA_CONF_EN_Msk                   (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
/* =========================================================  CHEN  ========================================================== */
#define DMA_CHEN_CHEN_Pos                 (0UL)                     /*!< CHEN (Bit 0)                                          */
#define DMA_CHEN_CHEN_Msk                 (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01)                            */


/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define WDT_CTRL_EN_Pos                   (0UL)                     /*!< EN (Bit 0)                                            */
#define WDT_CTRL_EN_Msk                   (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define WDT_CTRL_RSTEN_Pos                (1UL)                     /*!< RSTEN (Bit 1)                                         */
#define WDT_CTRL_RSTEN_Msk                (0x2UL)                   /*!< RSTEN (Bitfield-Mask: 0x01)                           */
#define WDT_CTRL_RELOAD_Pos               (2UL)                     /*!< RELOAD (Bit 2)                                        */
#define WDT_CTRL_RELOAD_Msk               (0x4UL)                   /*!< RELOAD (Bitfield-Mask: 0x01)                          */
#define WDT_CTRL_CLRRSTFLAG_Pos           (3UL)                     /*!< CLRRSTFLAG (Bit 3)                                    */
#define WDT_CTRL_CLRRSTFLAG_Msk           (0x8UL)                   /*!< CLRRSTFLAG (Bitfield-Mask: 0x01)                      */
/* ==========================================================  STS  ========================================================== */
#define WDT_STS_RSTFLAG_Pos               (0UL)                     /*!< RSTFLAG (Bit 0)                                       */
#define WDT_STS_RSTFLAG_Msk               (0x1UL)                   /*!< RSTFLAG (Bitfield-Mask: 0x01)                         */
/* ==========================================================  CNT  ========================================================== */
/* ==========================================================  DIV  ========================================================== */
/* =========================================================  INTEN  ========================================================= */
#define WDT_INTEN_WDTINTEN_Pos            (0UL)                     /*!< WDTINTEN (Bit 0)                                      */
#define WDT_INTEN_WDTINTEN_Msk            (0x1UL)                   /*!< WDTINTEN (Bitfield-Mask: 0x01)                        */


/* =========================================================================================================================== */
/* ================                                          PWRBTN                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define PWRBTN_CTRL_EN_Pos                (0UL)                     /*!< EN (Bit 0)                                            */
#define PWRBTN_CTRL_EN_Msk                (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define PWRBTN_CTRL_RSTEN_Pos             (1UL)                     /*!< RSTEN (Bit 1)                                         */
#define PWRBTN_CTRL_RSTEN_Msk             (0x2UL)                   /*!< RSTEN (Bitfield-Mask: 0x01)                           */
#define PWRBTN_CTRL_RELOAD_Pos            (2UL)                     /*!< RELOAD (Bit 2)                                        */
#define PWRBTN_CTRL_RELOAD_Msk            (0x4UL)                   /*!< RELOAD (Bitfield-Mask: 0x01)                          */
#define PWRBTN_CTRL_CLRRSTFLAG_Pos        (3UL)                     /*!< CLRRSTFLAG (Bit 3)                                    */
#define PWRBTN_CTRL_CLRRSTFLAG_Msk        (0x8UL)                   /*!< CLRRSTFLAG (Bitfield-Mask: 0x01)                      */
/* ==========================================================  STS  ========================================================== */
#define PWRBTN_STS_RSTFLAG_Pos            (0UL)                     /*!< RSTFLAG (Bit 0)                                       */
#define PWRBTN_STS_RSTFLAG_Msk            (0x1UL)                   /*!< RSTFLAG (Bitfield-Mask: 0x01)                         */
/* ==========================================================  CNT  ========================================================== */
#define PWRBTN_CNT_CNT_Pos                (0UL)                     /*!< CNT (Bit 0)                                           */
#define PWRBTN_CNT_CNT_Msk                (0xffUL)                  /*!< CNT (Bitfield-Mask: 0xff)                             */
/* ==========================================================  DIV  ========================================================== */
#define PWRBTN_DIV_DIV_Pos                (0UL)                     /*!< DIV (Bit 0)                                           */
#define PWRBTN_DIV_DIV_Msk                (0xffffUL)                /*!< DIV (Bitfield-Mask: 0xffff)                           */
/* =========================================================  INTEN  ========================================================= */
#define PWRBTN_INTEN_WDTINTEN_Pos         (0UL)                     /*!< WDTINTEN (Bit 0)                                      */
#define PWRBTN_INTEN_WDTINTEN_Msk         (0x1UL)                   /*!< WDTINTEN (Bitfield-Mask: 0x01)                        */
/* =========================================================  CONF  ========================================================== */
#define PWRBTN_CONF_EN_Pos                (0UL)                     /*!< EN (Bit 0)                                            */
#define PWRBTN_CONF_EN_Msk                (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define PWRBTN_CONF_TRIGMD_Pos            (1UL)                     /*!< TRIGMD (Bit 1)                                        */
#define PWRBTN_CONF_TRIGMD_Msk            (0x2UL)                   /*!< TRIGMD (Bitfield-Mask: 0x01)                          */
#define PWRBTN_CONF_RSTOUTPOL_Pos         (2UL)                     /*!< RSTOUTPOL (Bit 2)                                     */
#define PWRBTN_CONF_RSTOUTPOL_Msk         (0x4UL)                   /*!< RSTOUTPOL (Bitfield-Mask: 0x01)                       */
#define PWRBTN_CONF_RSTPULSEWIDTH_Pos     (16UL)                    /*!< RSTPULSEWIDTH (Bit 16)                                */
#define PWRBTN_CONF_RSTPULSEWIDTH_Msk     (0xffff0000UL)            /*!< RSTPULSEWIDTH (Bitfield-Mask: 0xffff)                 */


/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  SEC  ========================================================== */
/* =======================================================  SECALARM  ======================================================== */
/* ==========================================================  MIN  ========================================================== */
/* =======================================================  MINALARM  ======================================================== */
/* ==========================================================  HR  =========================================================== */
#define RTC_HR_VAL_Pos                    (0UL)                     /*!< VAL (Bit 0)                                           */
#define RTC_HR_VAL_Msk                    (0x3fUL)                  /*!< VAL (Bitfield-Mask: 0x3f)                             */
#define RTC_HR_AMPM_Pos                   (7UL)                     /*!< AMPM (Bit 7)                                          */
#define RTC_HR_AMPM_Msk                   (0x80UL)                  /*!< AMPM (Bitfield-Mask: 0x01)                            */
/* ========================================================  HRALARM  ======================================================== */
#define RTC_HRALARM_VAL_Pos               (0UL)                     /*!< VAL (Bit 0)                                           */
#define RTC_HRALARM_VAL_Msk               (0x3fUL)                  /*!< VAL (Bitfield-Mask: 0x3f)                             */
#define RTC_HRALARM_AMPM_Pos              (7UL)                     /*!< AMPM (Bit 7)                                          */
#define RTC_HRALARM_AMPM_Msk              (0x80UL)                  /*!< AMPM (Bitfield-Mask: 0x01)                            */
/* ========================================================  DAYWEEK  ======================================================== */
/* =======================================================  DAYMONTH  ======================================================== */
/* =========================================================  MONTH  ========================================================= */
/* =========================================================  YEAR  ========================================================== */
/* =========================================================  CTRL0  ========================================================= */
#define RTC_CTRL0_RATESEL_Pos             (0UL)                     /*!< RATESEL (Bit 0)                                       */
#define RTC_CTRL0_RATESEL_Msk             (0xfUL)                   /*!< RATESEL (Bitfield-Mask: 0x0f)                         */
#define RTC_CTRL0_DIVCTL_Pos              (4UL)                     /*!< DIVCTL (Bit 4)                                        */
#define RTC_CTRL0_DIVCTL_Msk              (0x70UL)                  /*!< DIVCTL (Bitfield-Mask: 0x07)                          */
#define RTC_CTRL0_UIP_Pos                 (7UL)                     /*!< UIP (Bit 7)                                           */
#define RTC_CTRL0_UIP_Msk                 (0x80UL)                  /*!< UIP (Bitfield-Mask: 0x01)                             */
/* =========================================================  CTRL1  ========================================================= */
#define RTC_CTRL1_DLS_Pos                 (0UL)                     /*!< DLS (Bit 0)                                           */
#define RTC_CTRL1_DLS_Msk                 (0x1UL)                   /*!< DLS (Bitfield-Mask: 0x01)                             */
#define RTC_CTRL1_HRMODE_Pos              (1UL)                     /*!< HRMODE (Bit 1)                                        */
#define RTC_CTRL1_HRMODE_Msk              (0x2UL)                   /*!< HRMODE (Bitfield-Mask: 0x01)                          */
#define RTC_CTRL1_DATEMODE_Pos            (2UL)                     /*!< DATEMODE (Bit 2)                                      */
#define RTC_CTRL1_DATEMODE_Msk            (0x4UL)                   /*!< DATEMODE (Bitfield-Mask: 0x01)                        */
#define RTC_CTRL1_UIE_Pos                 (4UL)                     /*!< UIE (Bit 4)                                           */
#define RTC_CTRL1_UIE_Msk                 (0x10UL)                  /*!< UIE (Bitfield-Mask: 0x01)                             */
#define RTC_CTRL1_AIE_Pos                 (5UL)                     /*!< AIE (Bit 5)                                           */
#define RTC_CTRL1_AIE_Msk                 (0x20UL)                  /*!< AIE (Bitfield-Mask: 0x01)                             */
#define RTC_CTRL1_PIE_Pos                 (6UL)                     /*!< PIE (Bit 6)                                           */
#define RTC_CTRL1_PIE_Msk                 (0x40UL)                  /*!< PIE (Bitfield-Mask: 0x01)                             */
#define RTC_CTRL1_SETMODE_Pos             (7UL)                     /*!< SETMODE (Bit 7)                                       */
#define RTC_CTRL1_SETMODE_Msk             (0x80UL)                  /*!< SETMODE (Bitfield-Mask: 0x01)                         */
/* =========================================================  CTRL2  ========================================================= */
#define RTC_CTRL2_UIF_Pos                 (4UL)                     /*!< UIF (Bit 4)                                           */
#define RTC_CTRL2_UIF_Msk                 (0x10UL)                  /*!< UIF (Bitfield-Mask: 0x01)                             */
#define RTC_CTRL2_AIF_Pos                 (5UL)                     /*!< AIF (Bit 5)                                           */
#define RTC_CTRL2_AIF_Msk                 (0x20UL)                  /*!< AIF (Bitfield-Mask: 0x01)                             */
#define RTC_CTRL2_PIF_Pos                 (6UL)                     /*!< PIF (Bit 6)                                           */
#define RTC_CTRL2_PIF_Msk                 (0x40UL)                  /*!< PIF (Bitfield-Mask: 0x01)                             */
#define RTC_CTRL2_IRQF_Pos                (7UL)                     /*!< IRQF (Bit 7)                                          */
#define RTC_CTRL2_IRQF_Msk                (0x80UL)                  /*!< IRQF (Bitfield-Mask: 0x01)                            */
/* =====================================================  DAYWEEKALARM  ====================================================== */
/* =====================================================  DAYMONTHALARM  ===================================================== */
/* =========================================================  DLSFW  ========================================================= */
#define RTC_DLSFW_DSTMONTH_Pos            (0UL)                     /*!< DSTMONTH (Bit 0)                                      */
#define RTC_DLSFW_DSTMONTH_Msk            (0xffUL)                  /*!< DSTMONTH (Bitfield-Mask: 0xff)                        */
#define RTC_DLSFW_DSTDAYWEEK_Pos          (8UL)                     /*!< DSTDAYWEEK (Bit 8)                                    */
#define RTC_DLSFW_DSTDAYWEEK_Msk          (0x700UL)                 /*!< DSTDAYWEEK (Bitfield-Mask: 0x07)                      */
#define RTC_DLSFW_DSTWEEK_Pos             (16UL)                    /*!< DSTWEEK (Bit 16)                                      */
#define RTC_DLSFW_DSTWEEK_Msk             (0x70000UL)               /*!< DSTWEEK (Bitfield-Mask: 0x07)                         */
#define RTC_DLSFW_DSTHR_Pos               (24UL)                    /*!< DSTHR (Bit 24)                                        */
#define RTC_DLSFW_DSTHR_Msk               (0x7f000000UL)            /*!< DSTHR (Bitfield-Mask: 0x7f)                           */
#define RTC_DLSFW_DSTAMPMSEL_Pos          (31UL)                    /*!< DSTAMPMSEL (Bit 31)                                   */
#define RTC_DLSFW_DSTAMPMSEL_Msk          (0x80000000UL)            /*!< DSTAMPMSEL (Bitfield-Mask: 0x01)                      */
/* =========================================================  DLSBW  ========================================================= */
#define RTC_DLSBW_DSTMONTH_Pos            (0UL)                     /*!< DSTMONTH (Bit 0)                                      */
#define RTC_DLSBW_DSTMONTH_Msk            (0xffUL)                  /*!< DSTMONTH (Bitfield-Mask: 0xff)                        */
#define RTC_DLSBW_DSTDAYWEEK_Pos          (8UL)                     /*!< DSTDAYWEEK (Bit 8)                                    */
#define RTC_DLSBW_DSTDAYWEEK_Msk          (0x700UL)                 /*!< DSTDAYWEEK (Bitfield-Mask: 0x07)                      */
#define RTC_DLSBW_DSTWEEK_Pos             (16UL)                    /*!< DSTWEEK (Bit 16)                                      */
#define RTC_DLSBW_DSTWEEK_Msk             (0x70000UL)               /*!< DSTWEEK (Bitfield-Mask: 0x07)                         */
#define RTC_DLSBW_DSTHR_Pos               (24UL)                    /*!< DSTHR (Bit 24)                                        */
#define RTC_DLSBW_DSTHR_Msk               (0x7f000000UL)            /*!< DSTHR (Bitfield-Mask: 0x7f)                           */
#define RTC_DLSBW_DSTAMPMSEL_Pos          (31UL)                    /*!< DSTAMPMSEL (Bit 31)                                   */
#define RTC_DLSBW_DSTAMPMSEL_Msk          (0x80000000UL)            /*!< DSTAMPMSEL (Bitfield-Mask: 0x01)                      */
/* =========================================================  WEEK  ========================================================== */


/* =========================================================================================================================== */
/* ================                                          SLWTMR                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  LDCNT  ========================================================= */
/* ==========================================================  CNT  ========================================================== */
/* =========================================================  CTRL  ========================================================== */
#define SLWTMR_CTRL_EN_Pos                (0UL)                     /*!< EN (Bit 0)                                            */
#define SLWTMR_CTRL_EN_Msk                (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define SLWTMR_CTRL_MDSEL_Pos             (1UL)                     /*!< MDSEL (Bit 1)                                         */
#define SLWTMR_CTRL_MDSEL_Msk             (0x2UL)                   /*!< MDSEL (Bitfield-Mask: 0x01)                           */
#define SLWTMR_CTRL_INTEN_Pos             (2UL)                     /*!< INTEN (Bit 2)                                         */
#define SLWTMR_CTRL_INTEN_Msk             (0x4UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  INTSTS  ========================================================= */
#define SLWTMR_INTSTS_STS_Pos             (0UL)                     /*!< STS (Bit 0)                                           */
#define SLWTMR_INTSTS_STS_Msk             (0x1UL)                   /*!< STS (Bitfield-Mask: 0x01)                             */


/* =========================================================================================================================== */
/* ================                                          TIMER32                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  LDCNT  ========================================================= */
/* ==========================================================  CNT  ========================================================== */
/* =========================================================  CTRL  ========================================================== */
#define TIMER32_CTRL_EN_Pos               (0UL)                     /*!< EN (Bit 0)                                            */
#define TIMER32_CTRL_EN_Msk               (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define TIMER32_CTRL_MDSEL_Pos            (1UL)                     /*!< MDSEL (Bit 1)                                         */
#define TIMER32_CTRL_MDSEL_Msk            (0x2UL)                   /*!< MDSEL (Bitfield-Mask: 0x01)                           */
#define TIMER32_CTRL_INTMSK_Pos           (2UL)                     /*!< INTMSK (Bit 2)                                        */
#define TIMER32_CTRL_INTMSK_Msk           (0x4UL)                   /*!< INTMSK (Bitfield-Mask: 0x01)                          */
/* ========================================================  INTCLR  ========================================================= */
/* ========================================================  INTSTS  ========================================================= */
#define TIMER32_INTSTS_STS_Pos            (0UL)                     /*!< STS (Bit 0)                                           */
#define TIMER32_INTSTS_STS_Msk            (0x1UL)                   /*!< STS (Bitfield-Mask: 0x01)                             */


/* =========================================================================================================================== */
/* ================                                          RTOSTMR                                          ================ */
/* =========================================================================================================================== */

/* =========================================================  LDCNT  ========================================================= */
/* ==========================================================  CNT  ========================================================== */
/* =========================================================  CTRL  ========================================================== */
#define RTOSTMR_CTRL_EN_Pos               (0UL)                     /*!< EN (Bit 0)                                            */
#define RTOSTMR_CTRL_EN_Msk               (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define RTOSTMR_CTRL_MDSEL_Pos            (1UL)                     /*!< MDSEL (Bit 1)                                         */
#define RTOSTMR_CTRL_MDSEL_Msk            (0x2UL)                   /*!< MDSEL (Bitfield-Mask: 0x01)                           */
#define RTOSTMR_CTRL_INTEN_Pos            (2UL)                     /*!< INTEN (Bit 2)                                         */
#define RTOSTMR_CTRL_INTEN_Msk            (0x4UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  INTSTS  ========================================================= */
#define RTOSTMR_INTSTS_STS_Pos            (0UL)                     /*!< STS (Bit 0)                                           */
#define RTOSTMR_INTSTS_STS_Msk            (0x1UL)                   /*!< STS (Bitfield-Mask: 0x01)                             */


/* =========================================================================================================================== */
/* ================                                            I2C                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CON  ========================================================== */
#define I2C_CON_MATSER_Pos                (0UL)                     /*!< MATSER (Bit 0)                                        */
#define I2C_CON_MATSER_Msk                (0x1UL)                   /*!< MATSER (Bitfield-Mask: 0x01)                          */
#define I2C_CON_SPEED_Pos                 (1UL)                     /*!< SPEED (Bit 1)                                         */
#define I2C_CON_SPEED_Msk                 (0x6UL)                   /*!< SPEED (Bitfield-Mask: 0x03)                           */
#define I2C_CON_SLV10BIT_Pos              (3UL)                     /*!< SLV10BIT (Bit 3)                                      */
#define I2C_CON_SLV10BIT_Msk              (0x8UL)                   /*!< SLV10BIT (Bitfield-Mask: 0x01)                        */
#define I2C_CON_MST10BIT_Pos              (4UL)                     /*!< MST10BIT (Bit 4)                                      */
#define I2C_CON_MST10BIT_Msk              (0x10UL)                  /*!< MST10BIT (Bitfield-Mask: 0x01)                        */
#define I2C_CON_RESTREN_Pos               (5UL)                     /*!< RESTREN (Bit 5)                                       */
#define I2C_CON_RESTREN_Msk               (0x20UL)                  /*!< RESTREN (Bitfield-Mask: 0x01)                         */
#define I2C_CON_SLVDISABLE_Pos            (6UL)                     /*!< SLVDISABLE (Bit 6)                                    */
#define I2C_CON_SLVDISABLE_Msk            (0x40UL)                  /*!< SLVDISABLE (Bitfield-Mask: 0x01)                      */
#define I2C_CON_STPDET_Pos                (7UL)                     /*!< STPDET (Bit 7)                                        */
#define I2C_CON_STPDET_Msk                (0x80UL)                  /*!< STPDET (Bitfield-Mask: 0x01)                          */
#define I2C_CON_TXEMPTYCTRL_Pos           (8UL)                     /*!< TXEMPTYCTRL (Bit 8)                                   */
#define I2C_CON_TXEMPTYCTRL_Msk           (0x100UL)                 /*!< TXEMPTYCTRL (Bitfield-Mask: 0x01)                     */
#define I2C_CON_RXFULLHLDC_Pos            (9UL)                     /*!< RXFULLHLDC (Bit 9)                                    */
#define I2C_CON_RXFULLHLDC_Msk            (0x200UL)                 /*!< RXFULLHLDC (Bitfield-Mask: 0x01)                      */
#define I2C_CON_STPMSTACTIVE_Pos          (10UL)                    /*!< STPMSTACTIVE (Bit 10)                                 */
#define I2C_CON_STPMSTACTIVE_Msk          (0x400UL)                 /*!< STPMSTACTIVE (Bitfield-Mask: 0x01)                    */
#define I2C_CON_BUSCLRCTRL_Pos            (11UL)                    /*!< BUSCLRCTRL (Bit 11)                                   */
#define I2C_CON_BUSCLRCTRL_Msk            (0x800UL)                 /*!< BUSCLRCTRL (Bitfield-Mask: 0x01)                      */
#define I2C_CON_OPSARCTRL_Pos             (16UL)                    /*!< OPSARCTRL (Bit 16)                                    */
#define I2C_CON_OPSARCTRL_Msk             (0x10000UL)               /*!< OPSARCTRL (Bitfield-Mask: 0x01)                       */
#define I2C_CON_SMBSLVQUICKEN_Pos         (17UL)                    /*!< SMBSLVQUICKEN (Bit 17)                                */
#define I2C_CON_SMBSLVQUICKEN_Msk         (0x20000UL)               /*!< SMBSLVQUICKEN (Bitfield-Mask: 0x01)                   */
#define I2C_CON_SMBARPEN_Pos              (18UL)                    /*!< SMBARPEN (Bit 18)                                     */
#define I2C_CON_SMBARPEN_Msk              (0x40000UL)               /*!< SMBARPEN (Bitfield-Mask: 0x01)                        */
#define I2C_CON_SMBSLVADDREN_Pos          (19UL)                    /*!< SMBSLVADDREN (Bit 19)                                 */
#define I2C_CON_SMBSLVADDREN_Msk          (0x80000UL)               /*!< SMBSLVADDREN (Bitfield-Mask: 0x01)                    */
#define I2C_CON_SMBSLVADDR2EN_Pos         (20UL)                    /*!< SMBSLVADDR2EN (Bit 20)                                */
#define I2C_CON_SMBSLVADDR2EN_Msk         (0x100000UL)              /*!< SMBSLVADDR2EN (Bitfield-Mask: 0x01)                   */
#define I2C_CON_SMBSLVADDR3EN_Pos         (21UL)                    /*!< SMBSLVADDR3EN (Bit 21)                                */
#define I2C_CON_SMBSLVADDR3EN_Msk         (0x200000UL)              /*!< SMBSLVADDR3EN (Bitfield-Mask: 0x01)                   */
#define I2C_CON_SMBSLVADDR4EN_Pos         (22UL)                    /*!< SMBSLVADDR4EN (Bit 22)                                */
#define I2C_CON_SMBSLVADDR4EN_Msk         (0x400000UL)              /*!< SMBSLVADDR4EN (Bitfield-Mask: 0x01)                   */
#define I2C_CON_SMBSAR2ARPEN_Pos          (23UL)                    /*!< SMBSAR2ARPEN (Bit 23)                                 */
#define I2C_CON_SMBSAR2ARPEN_Msk          (0x800000UL)              /*!< SMBSAR2ARPEN (Bitfield-Mask: 0x01)                    */
#define I2C_CON_SMBSAR3ARPEN_Pos          (24UL)                    /*!< SMBSAR3ARPEN (Bit 24)                                 */
#define I2C_CON_SMBSAR3ARPEN_Msk          (0x1000000UL)             /*!< SMBSAR3ARPEN (Bitfield-Mask: 0x01)                    */
#define I2C_CON_SMBSAR4ARPEN_Pos          (25UL)                    /*!< SMBSAR4ARPEN (Bit 25)                                 */
#define I2C_CON_SMBSAR4ARPEN_Msk          (0x2000000UL)             /*!< SMBSAR4ARPEN (Bitfield-Mask: 0x01)                    */
/* ==========================================================  TAR  ========================================================== */
#define I2C_TAR_TAR_Pos                   (0UL)                     /*!< TAR (Bit 0)                                           */
#define I2C_TAR_TAR_Msk                   (0x3ffUL)                 /*!< TAR (Bitfield-Mask: 0x3ff)                            */
#define I2C_TAR_GCORSTA_Pos               (10UL)                    /*!< GCORSTA (Bit 10)                                      */
#define I2C_TAR_GCORSTA_Msk               (0x400UL)                 /*!< GCORSTA (Bitfield-Mask: 0x01)                         */
#define I2C_TAR_SPECIAL_Pos               (11UL)                    /*!< SPECIAL (Bit 11)                                      */
#define I2C_TAR_SPECIAL_Msk               (0x800UL)                 /*!< SPECIAL (Bitfield-Mask: 0x01)                         */
#define I2C_TAR_MST10ADDR_Pos             (12UL)                    /*!< MST10ADDR (Bit 12)                                    */
#define I2C_TAR_MST10ADDR_Msk             (0x1000UL)                /*!< MST10ADDR (Bitfield-Mask: 0x01)                       */
#define I2C_TAR_DEVICEID_Pos              (13UL)                    /*!< DEVICEID (Bit 13)                                     */
#define I2C_TAR_DEVICEID_Msk              (0x2000UL)                /*!< DEVICEID (Bitfield-Mask: 0x01)                        */
#define I2C_TAR_SMBQUICKCMD_Pos           (16UL)                    /*!< SMBQUICKCMD (Bit 16)                                  */
#define I2C_TAR_SMBQUICKCMD_Msk           (0x10000UL)               /*!< SMBQUICKCMD (Bitfield-Mask: 0x01)                     */
/* ==========================================================  SAR  ========================================================== */
#define I2C_SAR_SAR_Pos                   (0UL)                     /*!< SAR (Bit 0)                                           */
#define I2C_SAR_SAR_Msk                   (0x3ffUL)                 /*!< SAR (Bitfield-Mask: 0x3ff)                            */
/* ========================================================  HSMADDR  ======================================================== */
#define I2C_HSMADDR_HSMAR_Pos             (0UL)                     /*!< HSMAR (Bit 0)                                         */
#define I2C_HSMADDR_HSMAR_Msk             (0x7UL)                   /*!< HSMAR (Bitfield-Mask: 0x07)                           */
/* ========================================================  DATACMD  ======================================================== */
#define I2C_DATACMD_DATA_Pos              (0UL)                     /*!< DATA (Bit 0)                                          */
#define I2C_DATACMD_DATA_Msk              (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
#define I2C_DATACMD_CMD_Pos               (8UL)                     /*!< CMD (Bit 8)                                           */
#define I2C_DATACMD_CMD_Msk               (0x100UL)                 /*!< CMD (Bitfield-Mask: 0x01)                             */
#define I2C_DATACMD_STOP_Pos              (9UL)                     /*!< STOP (Bit 9)                                          */
#define I2C_DATACMD_STOP_Msk              (0x200UL)                 /*!< STOP (Bitfield-Mask: 0x01)                            */
#define I2C_DATACMD_RESTART_Pos           (10UL)                    /*!< RESTART (Bit 10)                                      */
#define I2C_DATACMD_RESTART_Msk           (0x400UL)                 /*!< RESTART (Bitfield-Mask: 0x01)                         */
#define I2C_DATACMD_FIRSTDATA_Pos         (11UL)                    /*!< FIRSTDATA (Bit 11)                                    */
#define I2C_DATACMD_FIRSTDATA_Msk         (0x800UL)                 /*!< FIRSTDATA (Bitfield-Mask: 0x01)                       */
/* ========================================================  SCLHCNT  ======================================================== */
#define I2C_SCLHCNT_HCNT_Pos              (0UL)                     /*!< HCNT (Bit 0)                                          */
#define I2C_SCLHCNT_HCNT_Msk              (0xffffUL)                /*!< HCNT (Bitfield-Mask: 0xffff)                          */
/* ======================================================  UFMSCLHCNT  ======================================================= */
#define I2C_UFMSCLHCNT_UFMHCNT_Pos        (0UL)                     /*!< UFMHCNT (Bit 0)                                       */
#define I2C_UFMSCLHCNT_UFMHCNT_Msk        (0xffffUL)                /*!< UFMHCNT (Bitfield-Mask: 0xffff)                       */
/* ========================================================  SCLLCNT  ======================================================== */
#define I2C_SCLLCNT_LCNT_Pos              (0UL)                     /*!< LCNT (Bit 0)                                          */
#define I2C_SCLLCNT_LCNT_Msk              (0xffffUL)                /*!< LCNT (Bitfield-Mask: 0xffff)                          */
/* ======================================================  UFMSCLLCNT  ======================================================= */
#define I2C_UFMSCLLCNT_UFMLCNT_Pos        (0UL)                     /*!< UFMLCNT (Bit 0)                                       */
#define I2C_UFMSCLLCNT_UFMLCNT_Msk        (0xffffUL)                /*!< UFMLCNT (Bitfield-Mask: 0xffff)                       */
/* =======================================================  FSSCLHCNT  ======================================================= */
#define I2C_FSSCLHCNT_HCNT_Pos            (0UL)                     /*!< HCNT (Bit 0)                                          */
#define I2C_FSSCLHCNT_HCNT_Msk            (0xffffUL)                /*!< HCNT (Bitfield-Mask: 0xffff)                          */
/* ======================================================  UFMTBUFCNT  ======================================================= */
#define I2C_UFMTBUFCNT_TBUFCNT_Pos        (0UL)                     /*!< TBUFCNT (Bit 0)                                       */
#define I2C_UFMTBUFCNT_TBUFCNT_Msk        (0xffffUL)                /*!< TBUFCNT (Bitfield-Mask: 0xffff)                       */
/* =======================================================  FSSCLLCNT  ======================================================= */
#define I2C_FSSCLLCNT_LCNT_Pos            (0UL)                     /*!< LCNT (Bit 0)                                          */
#define I2C_FSSCLLCNT_LCNT_Msk            (0xffffUL)                /*!< LCNT (Bitfield-Mask: 0xffff)                          */
/* =======================================================  HSSCLHCNT  ======================================================= */
#define I2C_HSSCLHCNT_HCNT_Pos            (0UL)                     /*!< HCNT (Bit 0)                                          */
#define I2C_HSSCLHCNT_HCNT_Msk            (0xffffUL)                /*!< HCNT (Bitfield-Mask: 0xffff)                          */
/* =======================================================  HSSCLLCNT  ======================================================= */
#define I2C_HSSCLLCNT_LCNT_Pos            (0UL)                     /*!< LCNT (Bit 0)                                          */
#define I2C_HSSCLLCNT_LCNT_Msk            (0xffffUL)                /*!< LCNT (Bitfield-Mask: 0xffff)                          */
/* ========================================================  INTSTAT  ======================================================== */
#define I2C_INTSTAT_RXUNDER_Pos           (0UL)                     /*!< RXUNDER (Bit 0)                                       */
#define I2C_INTSTAT_RXUNDER_Msk           (0x1UL)                   /*!< RXUNDER (Bitfield-Mask: 0x01)                         */
#define I2C_INTSTAT_RXOVER_Pos            (1UL)                     /*!< RXOVER (Bit 1)                                        */
#define I2C_INTSTAT_RXOVER_Msk            (0x2UL)                   /*!< RXOVER (Bitfield-Mask: 0x01)                          */
#define I2C_INTSTAT_RXFULL_Pos            (2UL)                     /*!< RXFULL (Bit 2)                                        */
#define I2C_INTSTAT_RXFULL_Msk            (0x4UL)                   /*!< RXFULL (Bitfield-Mask: 0x01)                          */
#define I2C_INTSTAT_TXOVER_Pos            (3UL)                     /*!< TXOVER (Bit 3)                                        */
#define I2C_INTSTAT_TXOVER_Msk            (0x8UL)                   /*!< TXOVER (Bitfield-Mask: 0x01)                          */
#define I2C_INTSTAT_TXEMPTY_Pos           (4UL)                     /*!< TXEMPTY (Bit 4)                                       */
#define I2C_INTSTAT_TXEMPTY_Msk           (0x10UL)                  /*!< TXEMPTY (Bitfield-Mask: 0x01)                         */
#define I2C_INTSTAT_RDREQ_Pos             (5UL)                     /*!< RDREQ (Bit 5)                                         */
#define I2C_INTSTAT_RDREQ_Msk             (0x20UL)                  /*!< RDREQ (Bitfield-Mask: 0x01)                           */
#define I2C_INTSTAT_TXABRT_Pos            (6UL)                     /*!< TXABRT (Bit 6)                                        */
#define I2C_INTSTAT_TXABRT_Msk            (0x40UL)                  /*!< TXABRT (Bitfield-Mask: 0x01)                          */
#define I2C_INTSTAT_RXDONE_Pos            (7UL)                     /*!< RXDONE (Bit 7)                                        */
#define I2C_INTSTAT_RXDONE_Msk            (0x80UL)                  /*!< RXDONE (Bitfield-Mask: 0x01)                          */
#define I2C_INTSTAT_ACTIVITY_Pos          (8UL)                     /*!< ACTIVITY (Bit 8)                                      */
#define I2C_INTSTAT_ACTIVITY_Msk          (0x100UL)                 /*!< ACTIVITY (Bitfield-Mask: 0x01)                        */
#define I2C_INTSTAT_STOPDET_Pos           (9UL)                     /*!< STOPDET (Bit 9)                                       */
#define I2C_INTSTAT_STOPDET_Msk           (0x200UL)                 /*!< STOPDET (Bitfield-Mask: 0x01)                         */
#define I2C_INTSTAT_STARTDET_Pos          (10UL)                    /*!< STARTDET (Bit 10)                                     */
#define I2C_INTSTAT_STARTDET_Msk          (0x400UL)                 /*!< STARTDET (Bitfield-Mask: 0x01)                        */
#define I2C_INTSTAT_GENCALL_Pos           (11UL)                    /*!< GENCALL (Bit 11)                                      */
#define I2C_INTSTAT_GENCALL_Msk           (0x800UL)                 /*!< GENCALL (Bitfield-Mask: 0x01)                         */
#define I2C_INTSTAT_RESTARTDET_Pos        (12UL)                    /*!< RESTARTDET (Bit 12)                                   */
#define I2C_INTSTAT_RESTARTDET_Msk        (0x1000UL)                /*!< RESTARTDET (Bitfield-Mask: 0x01)                      */
#define I2C_INTSTAT_MSTONHOLD_Pos         (13UL)                    /*!< MSTONHOLD (Bit 13)                                    */
#define I2C_INTSTAT_MSTONHOLD_Msk         (0x2000UL)                /*!< MSTONHOLD (Bitfield-Mask: 0x01)                       */
#define I2C_INTSTAT_SCLSTUCKLOW_Pos       (14UL)                    /*!< SCLSTUCKLOW (Bit 14)                                  */
#define I2C_INTSTAT_SCLSTUCKLOW_Msk       (0x4000UL)                /*!< SCLSTUCKLOW (Bitfield-Mask: 0x01)                     */
#define I2C_INTSTAT_WRREQ_Pos             (15UL)                    /*!< WRREQ (Bit 15)                                        */
#define I2C_INTSTAT_WRREQ_Msk             (0x8000UL)                /*!< WRREQ (Bitfield-Mask: 0x01)                           */
#define I2C_INTSTAT_SLVADDR1TAG_Pos       (16UL)                    /*!< SLVADDR1TAG (Bit 16)                                  */
#define I2C_INTSTAT_SLVADDR1TAG_Msk       (0x10000UL)               /*!< SLVADDR1TAG (Bitfield-Mask: 0x01)                     */
#define I2C_INTSTAT_SLVADDR2TAG_Pos       (17UL)                    /*!< SLVADDR2TAG (Bit 17)                                  */
#define I2C_INTSTAT_SLVADDR2TAG_Msk       (0x20000UL)               /*!< SLVADDR2TAG (Bitfield-Mask: 0x01)                     */
#define I2C_INTSTAT_SLVADDR3TAG_Pos       (18UL)                    /*!< SLVADDR3TAG (Bit 18)                                  */
#define I2C_INTSTAT_SLVADDR3TAG_Msk       (0x40000UL)               /*!< SLVADDR3TAG (Bitfield-Mask: 0x01)                     */
#define I2C_INTSTAT_SLVADDR4TAG_Pos       (19UL)                    /*!< SLVADDR4TAG (Bit 19)                                  */
#define I2C_INTSTAT_SLVADDR4TAG_Msk       (0x80000UL)               /*!< SLVADDR4TAG (Bitfield-Mask: 0x01)                     */
/* ========================================================  INTMASK  ======================================================== */
#define I2C_INTMASK_RXUNDER_Pos           (0UL)                     /*!< RXUNDER (Bit 0)                                       */
#define I2C_INTMASK_RXUNDER_Msk           (0x1UL)                   /*!< RXUNDER (Bitfield-Mask: 0x01)                         */
#define I2C_INTMASK_RXOVER_Pos            (1UL)                     /*!< RXOVER (Bit 1)                                        */
#define I2C_INTMASK_RXOVER_Msk            (0x2UL)                   /*!< RXOVER (Bitfield-Mask: 0x01)                          */
#define I2C_INTMASK_RXFULL_Pos            (2UL)                     /*!< RXFULL (Bit 2)                                        */
#define I2C_INTMASK_RXFULL_Msk            (0x4UL)                   /*!< RXFULL (Bitfield-Mask: 0x01)                          */
#define I2C_INTMASK_TXOVER_Pos            (3UL)                     /*!< TXOVER (Bit 3)                                        */
#define I2C_INTMASK_TXOVER_Msk            (0x8UL)                   /*!< TXOVER (Bitfield-Mask: 0x01)                          */
#define I2C_INTMASK_TXEMPTY_Pos           (4UL)                     /*!< TXEMPTY (Bit 4)                                       */
#define I2C_INTMASK_TXEMPTY_Msk           (0x10UL)                  /*!< TXEMPTY (Bitfield-Mask: 0x01)                         */
#define I2C_INTMASK_RDREQ_Pos             (5UL)                     /*!< RDREQ (Bit 5)                                         */
#define I2C_INTMASK_RDREQ_Msk             (0x20UL)                  /*!< RDREQ (Bitfield-Mask: 0x01)                           */
#define I2C_INTMASK_TXABRT_Pos            (6UL)                     /*!< TXABRT (Bit 6)                                        */
#define I2C_INTMASK_TXABRT_Msk            (0x40UL)                  /*!< TXABRT (Bitfield-Mask: 0x01)                          */
#define I2C_INTMASK_RXDONE_Pos            (7UL)                     /*!< RXDONE (Bit 7)                                        */
#define I2C_INTMASK_RXDONE_Msk            (0x80UL)                  /*!< RXDONE (Bitfield-Mask: 0x01)                          */
#define I2C_INTMASK_ACTIVITY_Pos          (8UL)                     /*!< ACTIVITY (Bit 8)                                      */
#define I2C_INTMASK_ACTIVITY_Msk          (0x100UL)                 /*!< ACTIVITY (Bitfield-Mask: 0x01)                        */
#define I2C_INTMASK_STOPDET_Pos           (9UL)                     /*!< STOPDET (Bit 9)                                       */
#define I2C_INTMASK_STOPDET_Msk           (0x200UL)                 /*!< STOPDET (Bitfield-Mask: 0x01)                         */
#define I2C_INTMASK_STARTDET_Pos          (10UL)                    /*!< STARTDET (Bit 10)                                     */
#define I2C_INTMASK_STARTDET_Msk          (0x400UL)                 /*!< STARTDET (Bitfield-Mask: 0x01)                        */
#define I2C_INTMASK_GENCALL_Pos           (11UL)                    /*!< GENCALL (Bit 11)                                      */
#define I2C_INTMASK_GENCALL_Msk           (0x800UL)                 /*!< GENCALL (Bitfield-Mask: 0x01)                         */
#define I2C_INTMASK_RESTARTDET_Pos        (12UL)                    /*!< RESTARTDET (Bit 12)                                   */
#define I2C_INTMASK_RESTARTDET_Msk        (0x1000UL)                /*!< RESTARTDET (Bitfield-Mask: 0x01)                      */
#define I2C_INTMASK_MSTONHOLD_Pos         (13UL)                    /*!< MSTONHOLD (Bit 13)                                    */
#define I2C_INTMASK_MSTONHOLD_Msk         (0x2000UL)                /*!< MSTONHOLD (Bitfield-Mask: 0x01)                       */
#define I2C_INTMASK_SCLSTUCKLOW_Pos       (14UL)                    /*!< SCLSTUCKLOW (Bit 14)                                  */
#define I2C_INTMASK_SCLSTUCKLOW_Msk       (0x4000UL)                /*!< SCLSTUCKLOW (Bitfield-Mask: 0x01)                     */
#define I2C_INTMASK_WRREQ_Pos             (15UL)                    /*!< WRREQ (Bit 15)                                        */
#define I2C_INTMASK_WRREQ_Msk             (0x8000UL)                /*!< WRREQ (Bitfield-Mask: 0x01)                           */
#define I2C_INTMASK_SLVADDR1TAG_Pos       (16UL)                    /*!< SLVADDR1TAG (Bit 16)                                  */
#define I2C_INTMASK_SLVADDR1TAG_Msk       (0x10000UL)               /*!< SLVADDR1TAG (Bitfield-Mask: 0x01)                     */
#define I2C_INTMASK_SLVADDR2TAG_Pos       (17UL)                    /*!< SLVADDR2TAG (Bit 17)                                  */
#define I2C_INTMASK_SLVADDR2TAG_Msk       (0x20000UL)               /*!< SLVADDR2TAG (Bitfield-Mask: 0x01)                     */
#define I2C_INTMASK_SLVADDR3TAG_Pos       (18UL)                    /*!< SLVADDR3TAG (Bit 18)                                  */
#define I2C_INTMASK_SLVADDR3TAG_Msk       (0x40000UL)               /*!< SLVADDR3TAG (Bitfield-Mask: 0x01)                     */
#define I2C_INTMASK_SLVADDR4TAG_Pos       (19UL)                    /*!< SLVADDR4TAG (Bit 19)                                  */
#define I2C_INTMASK_SLVADDR4TAG_Msk       (0x80000UL)               /*!< SLVADDR4TAG (Bitfield-Mask: 0x01)                     */
/* ======================================================  RAWINTSTAT  ======================================================= */
#define I2C_RAWINTSTAT_RXUNDER_Pos        (0UL)                     /*!< RXUNDER (Bit 0)                                       */
#define I2C_RAWINTSTAT_RXUNDER_Msk        (0x1UL)                   /*!< RXUNDER (Bitfield-Mask: 0x01)                         */
#define I2C_RAWINTSTAT_RXOVER_Pos         (1UL)                     /*!< RXOVER (Bit 1)                                        */
#define I2C_RAWINTSTAT_RXOVER_Msk         (0x2UL)                   /*!< RXOVER (Bitfield-Mask: 0x01)                          */
#define I2C_RAWINTSTAT_RXFULL_Pos         (2UL)                     /*!< RXFULL (Bit 2)                                        */
#define I2C_RAWINTSTAT_RXFULL_Msk         (0x4UL)                   /*!< RXFULL (Bitfield-Mask: 0x01)                          */
#define I2C_RAWINTSTAT_TXOVER_Pos         (3UL)                     /*!< TXOVER (Bit 3)                                        */
#define I2C_RAWINTSTAT_TXOVER_Msk         (0x8UL)                   /*!< TXOVER (Bitfield-Mask: 0x01)                          */
#define I2C_RAWINTSTAT_TXEMPTY_Pos        (4UL)                     /*!< TXEMPTY (Bit 4)                                       */
#define I2C_RAWINTSTAT_TXEMPTY_Msk        (0x10UL)                  /*!< TXEMPTY (Bitfield-Mask: 0x01)                         */
#define I2C_RAWINTSTAT_RDREQ_Pos          (5UL)                     /*!< RDREQ (Bit 5)                                         */
#define I2C_RAWINTSTAT_RDREQ_Msk          (0x20UL)                  /*!< RDREQ (Bitfield-Mask: 0x01)                           */
#define I2C_RAWINTSTAT_TXABRT_Pos         (6UL)                     /*!< TXABRT (Bit 6)                                        */
#define I2C_RAWINTSTAT_TXABRT_Msk         (0x40UL)                  /*!< TXABRT (Bitfield-Mask: 0x01)                          */
#define I2C_RAWINTSTAT_RXDONE_Pos         (7UL)                     /*!< RXDONE (Bit 7)                                        */
#define I2C_RAWINTSTAT_RXDONE_Msk         (0x80UL)                  /*!< RXDONE (Bitfield-Mask: 0x01)                          */
#define I2C_RAWINTSTAT_ACTIVITY_Pos       (8UL)                     /*!< ACTIVITY (Bit 8)                                      */
#define I2C_RAWINTSTAT_ACTIVITY_Msk       (0x100UL)                 /*!< ACTIVITY (Bitfield-Mask: 0x01)                        */
#define I2C_RAWINTSTAT_STOPDET_Pos        (9UL)                     /*!< STOPDET (Bit 9)                                       */
#define I2C_RAWINTSTAT_STOPDET_Msk        (0x200UL)                 /*!< STOPDET (Bitfield-Mask: 0x01)                         */
#define I2C_RAWINTSTAT_STARTDET_Pos       (10UL)                    /*!< STARTDET (Bit 10)                                     */
#define I2C_RAWINTSTAT_STARTDET_Msk       (0x400UL)                 /*!< STARTDET (Bitfield-Mask: 0x01)                        */
#define I2C_RAWINTSTAT_GENCALL_Pos        (11UL)                    /*!< GENCALL (Bit 11)                                      */
#define I2C_RAWINTSTAT_GENCALL_Msk        (0x800UL)                 /*!< GENCALL (Bitfield-Mask: 0x01)                         */
#define I2C_RAWINTSTAT_RESTARTDET_Pos     (12UL)                    /*!< RESTARTDET (Bit 12)                                   */
#define I2C_RAWINTSTAT_RESTARTDET_Msk     (0x1000UL)                /*!< RESTARTDET (Bitfield-Mask: 0x01)                      */
#define I2C_RAWINTSTAT_MSTONHOLD_Pos      (13UL)                    /*!< MSTONHOLD (Bit 13)                                    */
#define I2C_RAWINTSTAT_MSTONHOLD_Msk      (0x2000UL)                /*!< MSTONHOLD (Bitfield-Mask: 0x01)                       */
#define I2C_RAWINTSTAT_SCLSTUCKLOW_Pos    (14UL)                    /*!< SCLSTUCKLOW (Bit 14)                                  */
#define I2C_RAWINTSTAT_SCLSTUCKLOW_Msk    (0x4000UL)                /*!< SCLSTUCKLOW (Bitfield-Mask: 0x01)                     */
#define I2C_RAWINTSTAT_WRREQ_Pos          (15UL)                    /*!< WRREQ (Bit 15)                                        */
#define I2C_RAWINTSTAT_WRREQ_Msk          (0x8000UL)                /*!< WRREQ (Bitfield-Mask: 0x01)                           */
#define I2C_RAWINTSTAT_SLVADDR1TAG_Pos    (16UL)                    /*!< SLVADDR1TAG (Bit 16)                                  */
#define I2C_RAWINTSTAT_SLVADDR1TAG_Msk    (0x10000UL)               /*!< SLVADDR1TAG (Bitfield-Mask: 0x01)                     */
#define I2C_RAWINTSTAT_SLVADDR2TAG_Pos    (17UL)                    /*!< SLVADDR2TAG (Bit 17)                                  */
#define I2C_RAWINTSTAT_SLVADDR2TAG_Msk    (0x20000UL)               /*!< SLVADDR2TAG (Bitfield-Mask: 0x01)                     */
#define I2C_RAWINTSTAT_SLVADDR3TAG_Pos    (18UL)                    /*!< SLVADDR3TAG (Bit 18)                                  */
#define I2C_RAWINTSTAT_SLVADDR3TAG_Msk    (0x40000UL)               /*!< SLVADDR3TAG (Bitfield-Mask: 0x01)                     */
#define I2C_RAWINTSTAT_SLVADDR4TAG_Pos    (19UL)                    /*!< SLVADDR4TAG (Bit 19)                                  */
#define I2C_RAWINTSTAT_SLVADDR4TAG_Msk    (0x80000UL)               /*!< SLVADDR4TAG (Bitfield-Mask: 0x01)                     */
/* =========================================================  RXTL  ========================================================== */
#define I2C_RXTL_THRES_Pos                (0UL)                     /*!< THRES (Bit 0)                                         */
#define I2C_RXTL_THRES_Msk                (0xffUL)                  /*!< THRES (Bitfield-Mask: 0xff)                           */
/* =========================================================  TXTL  ========================================================== */
#define I2C_TXTL_THRES_Pos                (0UL)                     /*!< THRES (Bit 0)                                         */
#define I2C_TXTL_THRES_Msk                (0xffUL)                  /*!< THRES (Bitfield-Mask: 0xff)                           */
/* ========================================================  CLRINT  ========================================================= */
/* ======================================================  CLRRXUNDER  ======================================================= */
/* =======================================================  CLRRXOVER  ======================================================= */
/* =======================================================  CLRTXOVER  ======================================================= */
/* =======================================================  CLRRDREQ  ======================================================== */
/* =======================================================  CLRTXABRT  ======================================================= */
/* =======================================================  CLRRXDONE  ======================================================= */
/* ======================================================  CLRACTIVITY  ====================================================== */
/* ======================================================  CLRSTOPDET  ======================================================= */
/* ======================================================  CLRSTARTDET  ====================================================== */
/* ======================================================  CLRGENCALL  ======================================================= */
/* ========================================================  ENABLE  ========================================================= */
#define I2C_ENABLE_EN_Pos                 (0UL)                     /*!< EN (Bit 0)                                            */
#define I2C_ENABLE_EN_Msk                 (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define I2C_ENABLE_ABORT_Pos              (1UL)                     /*!< ABORT (Bit 1)                                         */
#define I2C_ENABLE_ABORT_Msk              (0x2UL)                   /*!< ABORT (Bitfield-Mask: 0x01)                           */
#define I2C_ENABLE_TXCMDBLOCK_Pos         (2UL)                     /*!< TXCMDBLOCK (Bit 2)                                    */
#define I2C_ENABLE_TXCMDBLOCK_Msk         (0x4UL)                   /*!< TXCMDBLOCK (Bitfield-Mask: 0x01)                      */
#define I2C_ENABLE_SDARECOVEN_Pos         (3UL)                     /*!< SDARECOVEN (Bit 3)                                    */
#define I2C_ENABLE_SDARECOVEN_Msk         (0x8UL)                   /*!< SDARECOVEN (Bitfield-Mask: 0x01)                      */
#define I2C_ENABLE_SMBCLKRST_Pos          (16UL)                    /*!< SMBCLKRST (Bit 16)                                    */
#define I2C_ENABLE_SMBCLKRST_Msk          (0x10000UL)               /*!< SMBCLKRST (Bitfield-Mask: 0x01)                       */
#define I2C_ENABLE_SMBSUSPENDEN_Pos       (17UL)                    /*!< SMBSUSPENDEN (Bit 17)                                 */
#define I2C_ENABLE_SMBSUSPENDEN_Msk       (0x20000UL)               /*!< SMBSUSPENDEN (Bitfield-Mask: 0x01)                    */
#define I2C_ENABLE_SMBALERTEN_Pos         (18UL)                    /*!< SMBALERTEN (Bit 18)                                   */
#define I2C_ENABLE_SMBALERTEN_Msk         (0x40000UL)               /*!< SMBALERTEN (Bitfield-Mask: 0x01)                      */
#define I2C_ENABLE_SAREN_Pos              (19UL)                    /*!< SAREN (Bit 19)                                        */
#define I2C_ENABLE_SAREN_Msk              (0x80000UL)               /*!< SAREN (Bitfield-Mask: 0x01)                           */
#define I2C_ENABLE_SAR2EN_Pos             (20UL)                    /*!< SAR2EN (Bit 20)                                       */
#define I2C_ENABLE_SAR2EN_Msk             (0x100000UL)              /*!< SAR2EN (Bitfield-Mask: 0x01)                          */
#define I2C_ENABLE_SAR3EN_Pos             (21UL)                    /*!< SAR3EN (Bit 21)                                       */
#define I2C_ENABLE_SAR3EN_Msk             (0x200000UL)              /*!< SAR3EN (Bitfield-Mask: 0x01)                          */
#define I2C_ENABLE_SAR4EN_Pos             (22UL)                    /*!< SAR4EN (Bit 22)                                       */
#define I2C_ENABLE_SAR4EN_Msk             (0x400000UL)              /*!< SAR4EN (Bitfield-Mask: 0x01)                          */
/* ========================================================  STATUS  ========================================================= */
#define I2C_STATUS_ACTIVITY_Pos           (0UL)                     /*!< ACTIVITY (Bit 0)                                      */
#define I2C_STATUS_ACTIVITY_Msk           (0x1UL)                   /*!< ACTIVITY (Bitfield-Mask: 0x01)                        */
#define I2C_STATUS_TFNF_Pos               (1UL)                     /*!< TFNF (Bit 1)                                          */
#define I2C_STATUS_TFNF_Msk               (0x2UL)                   /*!< TFNF (Bitfield-Mask: 0x01)                            */
#define I2C_STATUS_TFE_Pos                (2UL)                     /*!< TFE (Bit 2)                                           */
#define I2C_STATUS_TFE_Msk                (0x4UL)                   /*!< TFE (Bitfield-Mask: 0x01)                             */
#define I2C_STATUS_RFNE_Pos               (3UL)                     /*!< RFNE (Bit 3)                                          */
#define I2C_STATUS_RFNE_Msk               (0x8UL)                   /*!< RFNE (Bitfield-Mask: 0x01)                            */
#define I2C_STATUS_RFF_Pos                (4UL)                     /*!< RFF (Bit 4)                                           */
#define I2C_STATUS_RFF_Msk                (0x10UL)                  /*!< RFF (Bitfield-Mask: 0x01)                             */
#define I2C_STATUS_MSTACTIVITY_Pos        (5UL)                     /*!< MSTACTIVITY (Bit 5)                                   */
#define I2C_STATUS_MSTACTIVITY_Msk        (0x20UL)                  /*!< MSTACTIVITY (Bitfield-Mask: 0x01)                     */
#define I2C_STATUS_SLVACTIVITY_Pos        (6UL)                     /*!< SLVACTIVITY (Bit 6)                                   */
#define I2C_STATUS_SLVACTIVITY_Msk        (0x40UL)                  /*!< SLVACTIVITY (Bitfield-Mask: 0x01)                     */
#define I2C_STATUS_MSTHOLDTXEMPTY_Pos     (7UL)                     /*!< MSTHOLDTXEMPTY (Bit 7)                                */
#define I2C_STATUS_MSTHOLDTXEMPTY_Msk     (0x80UL)                  /*!< MSTHOLDTXEMPTY (Bitfield-Mask: 0x01)                  */
#define I2C_STATUS_MSTHOLDRXFULL_Pos      (8UL)                     /*!< MSTHOLDRXFULL (Bit 8)                                 */
#define I2C_STATUS_MSTHOLDRXFULL_Msk      (0x100UL)                 /*!< MSTHOLDRXFULL (Bitfield-Mask: 0x01)                   */
#define I2C_STATUS_SLVHOLDTXEMPTY_Pos     (9UL)                     /*!< SLVHOLDTXEMPTY (Bit 9)                                */
#define I2C_STATUS_SLVHOLDTXEMPTY_Msk     (0x200UL)                 /*!< SLVHOLDTXEMPTY (Bitfield-Mask: 0x01)                  */
#define I2C_STATUS_SLVHOLDRXFULL_Pos      (10UL)                    /*!< SLVHOLDRXFULL (Bit 10)                                */
#define I2C_STATUS_SLVHOLDRXFULL_Msk      (0x400UL)                 /*!< SLVHOLDRXFULL (Bitfield-Mask: 0x01)                   */
#define I2C_STATUS_SDANOTRECOV_Pos        (11UL)                    /*!< SDANOTRECOV (Bit 11)                                  */
#define I2C_STATUS_SDANOTRECOV_Msk        (0x800UL)                 /*!< SDANOTRECOV (Bitfield-Mask: 0x01)                     */
#define I2C_STATUS_SLVSARDATACLKSTRETCH_Pos (12UL)                  /*!< SLVSARDATACLKSTRETCH (Bit 12)                         */
#define I2C_STATUS_SLVSARDATACLKSTRETCH_Msk (0x1000UL)              /*!< SLVSARDATACLKSTRETCH (Bitfield-Mask: 0x01)            */
/* =========================================================  TXFLR  ========================================================= */
/* =========================================================  RXFLR  ========================================================= */
/* ========================================================  SDAHOLD  ======================================================== */
#define I2C_SDAHOLD_SDATXHOLD_Pos         (0UL)                     /*!< SDATXHOLD (Bit 0)                                     */
#define I2C_SDAHOLD_SDATXHOLD_Msk         (0xffffUL)                /*!< SDATXHOLD (Bitfield-Mask: 0xffff)                     */
#define I2C_SDAHOLD_SDARXHOLD_Pos         (16UL)                    /*!< SDARXHOLD (Bit 16)                                    */
#define I2C_SDAHOLD_SDARXHOLD_Msk         (0xff0000UL)              /*!< SDARXHOLD (Bitfield-Mask: 0xff)                       */
/* =======================================================  TXABRTSRC  ======================================================= */
#define I2C_TXABRTSRC_ADDR7BNACK_Pos      (0UL)                     /*!< ADDR7BNACK (Bit 0)                                    */
#define I2C_TXABRTSRC_ADDR7BNACK_Msk      (0x1UL)                   /*!< ADDR7BNACK (Bitfield-Mask: 0x01)                      */
#define I2C_TXABRTSRC_ADDR10BNACK1_Pos    (1UL)                     /*!< ADDR10BNACK1 (Bit 1)                                  */
#define I2C_TXABRTSRC_ADDR10BNACK1_Msk    (0x2UL)                   /*!< ADDR10BNACK1 (Bitfield-Mask: 0x01)                    */
#define I2C_TXABRTSRC_ADDR10BNACK2_Pos    (2UL)                     /*!< ADDR10BNACK2 (Bit 2)                                  */
#define I2C_TXABRTSRC_ADDR10BNACK2_Msk    (0x4UL)                   /*!< ADDR10BNACK2 (Bitfield-Mask: 0x01)                    */
#define I2C_TXABRTSRC_TXDATANACK_Pos      (3UL)                     /*!< TXDATANACK (Bit 3)                                    */
#define I2C_TXABRTSRC_TXDATANACK_Msk      (0x8UL)                   /*!< TXDATANACK (Bitfield-Mask: 0x01)                      */
#define I2C_TXABRTSRC_GCALLNACK_Pos       (4UL)                     /*!< GCALLNACK (Bit 4)                                     */
#define I2C_TXABRTSRC_GCALLNACK_Msk       (0x10UL)                  /*!< GCALLNACK (Bitfield-Mask: 0x01)                       */
#define I2C_TXABRTSRC_GCALLREAD_Pos       (5UL)                     /*!< GCALLREAD (Bit 5)                                     */
#define I2C_TXABRTSRC_GCALLREAD_Msk       (0x20UL)                  /*!< GCALLREAD (Bitfield-Mask: 0x01)                       */
#define I2C_TXABRTSRC_HSACKDET_Pos        (6UL)                     /*!< HSACKDET (Bit 6)                                      */
#define I2C_TXABRTSRC_HSACKDET_Msk        (0x40UL)                  /*!< HSACKDET (Bitfield-Mask: 0x01)                        */
#define I2C_TXABRTSRC_SBYTEACKET_Pos      (7UL)                     /*!< SBYTEACKET (Bit 7)                                    */
#define I2C_TXABRTSRC_SBYTEACKET_Msk      (0x80UL)                  /*!< SBYTEACKET (Bitfield-Mask: 0x01)                      */
#define I2C_TXABRTSRC_HSNORSTRT_Pos       (8UL)                     /*!< HSNORSTRT (Bit 8)                                     */
#define I2C_TXABRTSRC_HSNORSTRT_Msk       (0x100UL)                 /*!< HSNORSTRT (Bitfield-Mask: 0x01)                       */
#define I2C_TXABRTSRC_SBYTENORSTRT_Pos    (9UL)                     /*!< SBYTENORSTRT (Bit 9)                                  */
#define I2C_TXABRTSRC_SBYTENORSTRT_Msk    (0x200UL)                 /*!< SBYTENORSTRT (Bitfield-Mask: 0x01)                    */
#define I2C_TXABRTSRC_ADDR10BRDNORSTRT_Pos (10UL)                   /*!< ADDR10BRDNORSTRT (Bit 10)                             */
#define I2C_TXABRTSRC_ADDR10BRDNORSTRT_Msk (0x400UL)                /*!< ADDR10BRDNORSTRT (Bitfield-Mask: 0x01)                */
#define I2C_TXABRTSRC_MASTERIDS_Pos       (11UL)                    /*!< MASTERIDS (Bit 11)                                    */
#define I2C_TXABRTSRC_MASTERIDS_Msk       (0x800UL)                 /*!< MASTERIDS (Bitfield-Mask: 0x01)                       */
#define I2C_TXABRTSRC_ARBLOST_Pos         (12UL)                    /*!< ARBLOST (Bit 12)                                      */
#define I2C_TXABRTSRC_ARBLOST_Msk         (0x1000UL)                /*!< ARBLOST (Bitfield-Mask: 0x01)                         */
#define I2C_TXABRTSRC_SLVFLUSHTXFIFO_Pos  (13UL)                    /*!< SLVFLUSHTXFIFO (Bit 13)                               */
#define I2C_TXABRTSRC_SLVFLUSHTXFIFO_Msk  (0x2000UL)                /*!< SLVFLUSHTXFIFO (Bitfield-Mask: 0x01)                  */
#define I2C_TXABRTSRC_SLVARBLOST_Pos      (14UL)                    /*!< SLVARBLOST (Bit 14)                                   */
#define I2C_TXABRTSRC_SLVARBLOST_Msk      (0x4000UL)                /*!< SLVARBLOST (Bitfield-Mask: 0x01)                      */
#define I2C_TXABRTSRC_SLVRDINTX_Pos       (15UL)                    /*!< SLVRDINTX (Bit 15)                                    */
#define I2C_TXABRTSRC_SLVRDINTX_Msk       (0x8000UL)                /*!< SLVRDINTX (Bitfield-Mask: 0x01)                       */
#define I2C_TXABRTSRC_USRABRT_Pos         (16UL)                    /*!< USRABRT (Bit 16)                                      */
#define I2C_TXABRTSRC_USRABRT_Msk         (0x10000UL)               /*!< USRABRT (Bitfield-Mask: 0x01)                         */
#define I2C_TXABRTSRC_SDASTUCKLOW_Pos     (17UL)                    /*!< SDASTUCKLOW (Bit 17)                                  */
#define I2C_TXABRTSRC_SDASTUCKLOW_Msk     (0x20000UL)               /*!< SDASTUCKLOW (Bitfield-Mask: 0x01)                     */
#define I2C_TXABRTSRC_DEVNACK_Pos         (18UL)                    /*!< DEVNACK (Bit 18)                                      */
#define I2C_TXABRTSRC_DEVNACK_Msk         (0x40000UL)               /*!< DEVNACK (Bitfield-Mask: 0x01)                         */
#define I2C_TXABRTSRC_DEVSLVADDRNACK_Pos  (19UL)                    /*!< DEVSLVADDRNACK (Bit 19)                               */
#define I2C_TXABRTSRC_DEVSLVADDRNACK_Msk  (0x80000UL)               /*!< DEVSLVADDRNACK (Bitfield-Mask: 0x01)                  */
#define I2C_TXABRTSRC_DEVWRITE_Pos        (20UL)                    /*!< DEVWRITE (Bit 20)                                     */
#define I2C_TXABRTSRC_DEVWRITE_Msk        (0x100000UL)              /*!< DEVWRITE (Bitfield-Mask: 0x01)                        */
#define I2C_TXABRTSRC_TXFLUSHCNT_Pos      (23UL)                    /*!< TXFLUSHCNT (Bit 23)                                   */
#define I2C_TXABRTSRC_TXFLUSHCNT_Msk      (0xff800000UL)            /*!< TXFLUSHCNT (Bitfield-Mask: 0x1ff)                     */
/* ====================================================  SLVDATANACKONLY  ==================================================== */
#define I2C_SLVDATANACKONLY_NACK_Pos      (0UL)                     /*!< NACK (Bit 0)                                          */
#define I2C_SLVDATANACKONLY_NACK_Msk      (0x1UL)                   /*!< NACK (Bitfield-Mask: 0x01)                            */
/* =========================================================  DMACR  ========================================================= */
#define I2C_DMACR_RDMAE_Pos               (0UL)                     /*!< RDMAE (Bit 0)                                         */
#define I2C_DMACR_RDMAE_Msk               (0x1UL)                   /*!< RDMAE (Bitfield-Mask: 0x01)                           */
#define I2C_DMACR_TDMAE_Pos               (1UL)                     /*!< TDMAE (Bit 1)                                         */
#define I2C_DMACR_TDMAE_Msk               (0x2UL)                   /*!< TDMAE (Bitfield-Mask: 0x01)                           */
/* ========================================================  DMATDLR  ======================================================== */
/* ========================================================  DMARDLR  ======================================================== */
/* =======================================================  SDASETUP  ======================================================== */
#define I2C_SDASETUP_SETUP_Pos            (0UL)                     /*!< SETUP (Bit 0)                                         */
#define I2C_SDASETUP_SETUP_Msk            (0xffUL)                  /*!< SETUP (Bitfield-Mask: 0xff)                           */
/* ======================================================  ACKGENCALL  ======================================================= */
#define I2C_ACKGENCALL_ACK_Pos            (0UL)                     /*!< ACK (Bit 0)                                           */
#define I2C_ACKGENCALL_ACK_Msk            (0x1UL)                   /*!< ACK (Bitfield-Mask: 0x01)                             */
/* =========================================================  ENSTS  ========================================================= */
#define I2C_ENSTS_ENABLE_Pos              (0UL)                     /*!< ENABLE (Bit 0)                                        */
#define I2C_ENSTS_ENABLE_Msk              (0x1UL)                   /*!< ENABLE (Bitfield-Mask: 0x01)                          */
#define I2C_ENSTS_SLVDISBUSY_Pos          (1UL)                     /*!< SLVDISBUSY (Bit 1)                                    */
#define I2C_ENSTS_SLVDISBUSY_Msk          (0x2UL)                   /*!< SLVDISBUSY (Bitfield-Mask: 0x01)                      */
#define I2C_ENSTS_SLVRXDATALOST_Pos       (2UL)                     /*!< SLVRXDATALOST (Bit 2)                                 */
#define I2C_ENSTS_SLVRXDATALOST_Msk       (0x4UL)                   /*!< SLVRXDATALOST (Bitfield-Mask: 0x01)                   */
/* ========================================================  SPKLEN  ========================================================= */
#define I2C_SPKLEN_LEN_Pos                (0UL)                     /*!< LEN (Bit 0)                                           */
#define I2C_SPKLEN_LEN_Msk                (0xffUL)                  /*!< LEN (Bitfield-Mask: 0xff)                             */
/* =======================================================  HSSPKLEN  ======================================================== */
#define I2C_HSSPKLEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define I2C_HSSPKLEN_LEN_Msk              (0xffUL)                  /*!< LEN (Bitfield-Mask: 0xff)                             */
/* =====================================================  CLRRESTARTDET  ===================================================== */
/* =======================================================  SCLLOWTO  ======================================================== */
/* =======================================================  SDALOWTO  ======================================================== */
/* ====================================================  CLRSCLSTUCKDET  ===================================================== */
/* =======================================================  DEVICEID  ======================================================== */
#define I2C_DEVICEID_ID_Pos               (0UL)                     /*!< ID (Bit 0)                                            */
#define I2C_DEVICEID_ID_Msk               (0xffffffUL)              /*!< ID (Bitfield-Mask: 0xffffff)                          */
/* =====================================================  SMBCLKLOWSEXT  ===================================================== */
/* =====================================================  SMBCLKLOWMEXT  ===================================================== */
/* ==================================================  SMBTHIGHMAXIDLECNT  =================================================== */
#define I2C_SMBTHIGHMAXIDLECNT_CNT_Pos    (0UL)                     /*!< CNT (Bit 0)                                           */
#define I2C_SMBTHIGHMAXIDLECNT_CNT_Msk    (0xffffUL)                /*!< CNT (Bitfield-Mask: 0xffff)                           */
/* ======================================================  SMBINTSTAT  ======================================================= */
#define I2C_SMBINTSTAT_SLVCLKEXTTO_Pos    (0UL)                     /*!< SLVCLKEXTTO (Bit 0)                                   */
#define I2C_SMBINTSTAT_SLVCLKEXTTO_Msk    (0x1UL)                   /*!< SLVCLKEXTTO (Bitfield-Mask: 0x01)                     */
#define I2C_SMBINTSTAT_MSTCLKEXTTO_Pos    (1UL)                     /*!< MSTCLKEXTTO (Bit 1)                                   */
#define I2C_SMBINTSTAT_MSTCLKEXTTO_Msk    (0x2UL)                   /*!< MSTCLKEXTTO (Bitfield-Mask: 0x01)                     */
#define I2C_SMBINTSTAT_QUICKCMDDET_Pos    (2UL)                     /*!< QUICKCMDDET (Bit 2)                                   */
#define I2C_SMBINTSTAT_QUICKCMDDET_Msk    (0x4UL)                   /*!< QUICKCMDDET (Bitfield-Mask: 0x01)                     */
#define I2C_SMBINTSTAT_HOSTNTFYMSTDET_Pos (3UL)                     /*!< HOSTNTFYMSTDET (Bit 3)                                */
#define I2C_SMBINTSTAT_HOSTNTFYMSTDET_Msk (0x8UL)                   /*!< HOSTNTFYMSTDET (Bitfield-Mask: 0x01)                  */
#define I2C_SMBINTSTAT_ARPPREPARECMDDET_Pos (4UL)                   /*!< ARPPREPARECMDDET (Bit 4)                              */
#define I2C_SMBINTSTAT_ARPPREPARECMDDET_Msk (0x10UL)                /*!< ARPPREPARECMDDET (Bitfield-Mask: 0x01)                */
#define I2C_SMBINTSTAT_ARPRSTCMDDET_Pos   (5UL)                     /*!< ARPRSTCMDDET (Bit 5)                                  */
#define I2C_SMBINTSTAT_ARPRSTCMDDET_Msk   (0x20UL)                  /*!< ARPRSTCMDDET (Bitfield-Mask: 0x01)                    */
#define I2C_SMBINTSTAT_ARPGETUDIDCMDDET_Pos (6UL)                   /*!< ARPGETUDIDCMDDET (Bit 6)                              */
#define I2C_SMBINTSTAT_ARPGETUDIDCMDDET_Msk (0x40UL)                /*!< ARPGETUDIDCMDDET (Bitfield-Mask: 0x01)                */
#define I2C_SMBINTSTAT_ARPASSGNADDRCMDDET_Pos (7UL)                 /*!< ARPASSGNADDRCMDDET (Bit 7)                            */
#define I2C_SMBINTSTAT_ARPASSGNADDRCMDDET_Msk (0x80UL)              /*!< ARPASSGNADDRCMDDET (Bitfield-Mask: 0x01)              */
#define I2C_SMBINTSTAT_SLVRXPECNACK_Pos   (8UL)                     /*!< SLVRXPECNACK (Bit 8)                                  */
#define I2C_SMBINTSTAT_SLVRXPECNACK_Msk   (0x100UL)                 /*!< SLVRXPECNACK (Bitfield-Mask: 0x01)                    */
#define I2C_SMBINTSTAT_SMBSUSPENDDET_Pos  (9UL)                     /*!< SMBSUSPENDDET (Bit 9)                                 */
#define I2C_SMBINTSTAT_SMBSUSPENDDET_Msk  (0x200UL)                 /*!< SMBSUSPENDDET (Bitfield-Mask: 0x01)                   */
#define I2C_SMBINTSTAT_SMBALERTDET_Pos    (10UL)                    /*!< SMBALERTDET (Bit 10)                                  */
#define I2C_SMBINTSTAT_SMBALERTDET_Msk    (0x400UL)                 /*!< SMBALERTDET (Bitfield-Mask: 0x01)                     */
/* ======================================================  SMBINTMASK  ======================================================= */
#define I2C_SMBINTMASK_SLVCLKEXTTO_Pos    (0UL)                     /*!< SLVCLKEXTTO (Bit 0)                                   */
#define I2C_SMBINTMASK_SLVCLKEXTTO_Msk    (0x1UL)                   /*!< SLVCLKEXTTO (Bitfield-Mask: 0x01)                     */
#define I2C_SMBINTMASK_MSTCLKEXTTO_Pos    (1UL)                     /*!< MSTCLKEXTTO (Bit 1)                                   */
#define I2C_SMBINTMASK_MSTCLKEXTTO_Msk    (0x2UL)                   /*!< MSTCLKEXTTO (Bitfield-Mask: 0x01)                     */
#define I2C_SMBINTMASK_QUICKCMDDET_Pos    (2UL)                     /*!< QUICKCMDDET (Bit 2)                                   */
#define I2C_SMBINTMASK_QUICKCMDDET_Msk    (0x4UL)                   /*!< QUICKCMDDET (Bitfield-Mask: 0x01)                     */
#define I2C_SMBINTMASK_HOSTNTFYMSTDET_Pos (3UL)                     /*!< HOSTNTFYMSTDET (Bit 3)                                */
#define I2C_SMBINTMASK_HOSTNTFYMSTDET_Msk (0x8UL)                   /*!< HOSTNTFYMSTDET (Bitfield-Mask: 0x01)                  */
#define I2C_SMBINTMASK_ARPPREPARECMDDET_Pos (4UL)                   /*!< ARPPREPARECMDDET (Bit 4)                              */
#define I2C_SMBINTMASK_ARPPREPARECMDDET_Msk (0x10UL)                /*!< ARPPREPARECMDDET (Bitfield-Mask: 0x01)                */
#define I2C_SMBINTMASK_ARPRSTCMDDET_Pos   (5UL)                     /*!< ARPRSTCMDDET (Bit 5)                                  */
#define I2C_SMBINTMASK_ARPRSTCMDDET_Msk   (0x20UL)                  /*!< ARPRSTCMDDET (Bitfield-Mask: 0x01)                    */
#define I2C_SMBINTMASK_ARPGETUDIDCMDDET_Pos (6UL)                   /*!< ARPGETUDIDCMDDET (Bit 6)                              */
#define I2C_SMBINTMASK_ARPGETUDIDCMDDET_Msk (0x40UL)                /*!< ARPGETUDIDCMDDET (Bitfield-Mask: 0x01)                */
#define I2C_SMBINTMASK_ARPASSGNADDRCMDDET_Pos (7UL)                 /*!< ARPASSGNADDRCMDDET (Bit 7)                            */
#define I2C_SMBINTMASK_ARPASSGNADDRCMDDET_Msk (0x80UL)              /*!< ARPASSGNADDRCMDDET (Bitfield-Mask: 0x01)              */
#define I2C_SMBINTMASK_SLVRXPECNACK_Pos   (8UL)                     /*!< SLVRXPECNACK (Bit 8)                                  */
#define I2C_SMBINTMASK_SLVRXPECNACK_Msk   (0x100UL)                 /*!< SLVRXPECNACK (Bitfield-Mask: 0x01)                    */
#define I2C_SMBINTMASK_SMBSUSPENDDET_Pos  (9UL)                     /*!< SMBSUSPENDDET (Bit 9)                                 */
#define I2C_SMBINTMASK_SMBSUSPENDDET_Msk  (0x200UL)                 /*!< SMBSUSPENDDET (Bitfield-Mask: 0x01)                   */
#define I2C_SMBINTMASK_SMBALERTDET_Pos    (10UL)                    /*!< SMBALERTDET (Bit 10)                                  */
#define I2C_SMBINTMASK_SMBALERTDET_Msk    (0x400UL)                 /*!< SMBALERTDET (Bitfield-Mask: 0x01)                     */
/* =====================================================  SMBRAWINTSTAT  ===================================================== */
#define I2C_SMBRAWINTSTAT_SLVCLKEXTTO_Pos (0UL)                     /*!< SLVCLKEXTTO (Bit 0)                                   */
#define I2C_SMBRAWINTSTAT_SLVCLKEXTTO_Msk (0x1UL)                   /*!< SLVCLKEXTTO (Bitfield-Mask: 0x01)                     */
#define I2C_SMBRAWINTSTAT_MSTCLKEXTTO_Pos (1UL)                     /*!< MSTCLKEXTTO (Bit 1)                                   */
#define I2C_SMBRAWINTSTAT_MSTCLKEXTTO_Msk (0x2UL)                   /*!< MSTCLKEXTTO (Bitfield-Mask: 0x01)                     */
#define I2C_SMBRAWINTSTAT_QUICKCMDDET_Pos (2UL)                     /*!< QUICKCMDDET (Bit 2)                                   */
#define I2C_SMBRAWINTSTAT_QUICKCMDDET_Msk (0x4UL)                   /*!< QUICKCMDDET (Bitfield-Mask: 0x01)                     */
#define I2C_SMBRAWINTSTAT_HOSTNTFYMSTDET_Pos (3UL)                  /*!< HOSTNTFYMSTDET (Bit 3)                                */
#define I2C_SMBRAWINTSTAT_HOSTNTFYMSTDET_Msk (0x8UL)                /*!< HOSTNTFYMSTDET (Bitfield-Mask: 0x01)                  */
#define I2C_SMBRAWINTSTAT_ARPPREPARECMDDET_Pos (4UL)                /*!< ARPPREPARECMDDET (Bit 4)                              */
#define I2C_SMBRAWINTSTAT_ARPPREPARECMDDET_Msk (0x10UL)             /*!< ARPPREPARECMDDET (Bitfield-Mask: 0x01)                */
#define I2C_SMBRAWINTSTAT_ARPRSTCMDDET_Pos (5UL)                    /*!< ARPRSTCMDDET (Bit 5)                                  */
#define I2C_SMBRAWINTSTAT_ARPRSTCMDDET_Msk (0x20UL)                 /*!< ARPRSTCMDDET (Bitfield-Mask: 0x01)                    */
#define I2C_SMBRAWINTSTAT_ARPGETUDIDCMDDET_Pos (6UL)                /*!< ARPGETUDIDCMDDET (Bit 6)                              */
#define I2C_SMBRAWINTSTAT_ARPGETUDIDCMDDET_Msk (0x40UL)             /*!< ARPGETUDIDCMDDET (Bitfield-Mask: 0x01)                */
#define I2C_SMBRAWINTSTAT_ARPASSGNADDRCMDDET_Pos (7UL)              /*!< ARPASSGNADDRCMDDET (Bit 7)                            */
#define I2C_SMBRAWINTSTAT_ARPASSGNADDRCMDDET_Msk (0x80UL)           /*!< ARPASSGNADDRCMDDET (Bitfield-Mask: 0x01)              */
#define I2C_SMBRAWINTSTAT_SLVRXPECNACK_Pos (8UL)                    /*!< SLVRXPECNACK (Bit 8)                                  */
#define I2C_SMBRAWINTSTAT_SLVRXPECNACK_Msk (0x100UL)                /*!< SLVRXPECNACK (Bitfield-Mask: 0x01)                    */
#define I2C_SMBRAWINTSTAT_SMBSUSPENDDET_Pos (9UL)                   /*!< SMBSUSPENDDET (Bit 9)                                 */
#define I2C_SMBRAWINTSTAT_SMBSUSPENDDET_Msk (0x200UL)               /*!< SMBSUSPENDDET (Bitfield-Mask: 0x01)                   */
#define I2C_SMBRAWINTSTAT_SMBALERTDET_Pos (10UL)                    /*!< SMBALERTDET (Bit 10)                                  */
#define I2C_SMBRAWINTSTAT_SMBALERTDET_Msk (0x400UL)                 /*!< SMBALERTDET (Bitfield-Mask: 0x01)                     */
/* =======================================================  CLRSMBINT  ======================================================= */
/* =========================================================  OPSAR  ========================================================= */
#define I2C_OPSAR_SAR_Pos                 (0UL)                     /*!< SAR (Bit 0)                                           */
#define I2C_OPSAR_SAR_Msk                 (0x7fUL)                  /*!< SAR (Bitfield-Mask: 0x7f)                             */
/* =======================================================  SMBUDIDW0  ======================================================= */
/* =======================================================  SMBUDIDW1  ======================================================= */
/* =======================================================  SMBUDIDW2  ======================================================= */
/* =======================================================  SMBUDIDW3  ======================================================= */
/* =======================================================  REGTORST  ======================================================== */
/* ======================================================  COMPPARAM1  ======================================================= */
/* ========================================================  COMPVER  ======================================================== */
/* =======================================================  COMPTYPE  ======================================================== */
/* =========================================================  SAR2  ========================================================== */
#define I2C_SAR2_SAR_Pos                  (0UL)                     /*!< SAR (Bit 0)                                           */
#define I2C_SAR2_SAR_Msk                  (0x3ffUL)                 /*!< SAR (Bitfield-Mask: 0x3ff)                            */
/* =========================================================  SAR3  ========================================================== */
#define I2C_SAR3_SAR_Pos                  (0UL)                     /*!< SAR (Bit 0)                                           */
#define I2C_SAR3_SAR_Msk                  (0x3ffUL)                 /*!< SAR (Bitfield-Mask: 0x3ff)                            */
/* =========================================================  SAR4  ========================================================== */
#define I2C_SAR4_SAR_Pos                  (0UL)                     /*!< SAR (Bit 0)                                           */
#define I2C_SAR4_SAR_Msk                  (0x3ffUL)                 /*!< SAR (Bitfield-Mask: 0x3ff)                            */
/* =======================================================  CLRWRREQ  ======================================================== */
/* =====================================================  CLRSLVADDRTAG  ===================================================== */
/* =====================================================  SAR2SMBUDIDW0  ===================================================== */
/* =====================================================  SAR2SMBUDIDW1  ===================================================== */
/* =====================================================  SAR2SMBUDIDW2  ===================================================== */
/* =====================================================  SAR2SMBUDIDW3  ===================================================== */
/* =====================================================  SAR3SMBUDIDW0  ===================================================== */
/* =====================================================  SAR3SMBUDIDW1  ===================================================== */
/* =====================================================  SAR3SMBUDIDW2  ===================================================== */
/* =====================================================  SAR3SMBUDIDW3  ===================================================== */
/* =====================================================  SAR4SMBUDIDW0  ===================================================== */
/* =====================================================  SAR4SMBUDIDW1  ===================================================== */
/* =====================================================  SAR4SMBUDIDW2  ===================================================== */
/* =====================================================  SAR4SMBUDIDW3  ===================================================== */


/* =========================================================================================================================== */
/* ================                                           I3C0                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define I3C0_CTRL_RST_Pos                 (31UL)                    /*!< RST (Bit 31)                                          */
#define I3C0_CTRL_RST_Msk                 (0x80000000UL)            /*!< RST (Bitfield-Mask: 0x01)                             */
#define I3C0_CTRL_DMAEN_Pos               (30UL)                    /*!< DMAEN (Bit 30)                                        */
#define I3C0_CTRL_DMAEN_Msk               (0x40000000UL)            /*!< DMAEN (Bitfield-Mask: 0x01)                           */
#define I3C0_CTRL_MSTMONTEN_Pos           (28UL)                    /*!< MSTMONTEN (Bit 28)                                    */
#define I3C0_CTRL_MSTMONTEN_Msk           (0x10000000UL)            /*!< MSTMONTEN (Bitfield-Mask: 0x01)                       */
#define I3C0_CTRL_RFIFORST_Pos            (27UL)                    /*!< RFIFORST (Bit 27)                                     */
#define I3C0_CTRL_RFIFORST_Msk            (0x8000000UL)             /*!< RFIFORST (Bitfield-Mask: 0x01)                        */
#define I3C0_CTRL_TFIFORST_Pos            (26UL)                    /*!< TFIFORST (Bit 26)                                     */
#define I3C0_CTRL_TFIFORST_Msk            (0x4000000UL)             /*!< TFIFORST (Bitfield-Mask: 0x01)                        */
#define I3C0_CTRL_DMARSEL_Pos             (25UL)                    /*!< DMARSEL (Bit 25)                                      */
#define I3C0_CTRL_DMARSEL_Msk             (0x2000000UL)             /*!< DMARSEL (Bitfield-Mask: 0x01)                         */
#define I3C0_CTRL_DMAWSEL_Pos             (24UL)                    /*!< DMAWSEL (Bit 24)                                      */
#define I3C0_CTRL_DMAWSEL_Msk             (0x1000000UL)             /*!< DMAWSEL (Bitfield-Mask: 0x01)                         */
#define I3C0_CTRL_DYADDREN_Pos            (23UL)                    /*!< DYADDREN (Bit 23)                                     */
#define I3C0_CTRL_DYADDREN_Msk            (0x800000UL)              /*!< DYADDREN (Bitfield-Mask: 0x01)                        */
#define I3C0_CTRL_STLSCL_Pos              (21UL)                    /*!< STLSCL (Bit 21)                                       */
#define I3C0_CTRL_STLSCL_Msk              (0x200000UL)              /*!< STLSCL (Bitfield-Mask: 0x01)                          */
#define I3C0_CTRL_SDASPKSUPEN_Pos         (19UL)                    /*!< SDASPKSUPEN (Bit 19)                                  */
#define I3C0_CTRL_SDASPKSUPEN_Msk         (0x80000UL)               /*!< SDASPKSUPEN (Bitfield-Mask: 0x01)                     */
#define I3C0_CTRL_SCLSPKSUPEN_Pos         (18UL)                    /*!< SCLSPKSUPEN (Bit 18)                                  */
#define I3C0_CTRL_SCLSPKSUPEN_Msk         (0x40000UL)               /*!< SCLSPKSUPEN (Bitfield-Mask: 0x01)                     */
#define I3C0_CTRL_PTCSEL_Pos              (16UL)                    /*!< PTCSEL (Bit 16)                                       */
#define I3C0_CTRL_PTCSEL_Msk              (0x30000UL)               /*!< PTCSEL (Bitfield-Mask: 0x03)                          */
#define I3C0_CTRL_DRCMDEN_Pos             (12UL)                    /*!< DRCMDEN (Bit 12)                                      */
#define I3C0_CTRL_DRCMDEN_Msk             (0x1000UL)                /*!< DRCMDEN (Bitfield-Mask: 0x01)                         */
#define I3C0_CTRL_ADDRMSEL_Pos            (8UL)                     /*!< ADDRMSEL (Bit 8)                                      */
#define I3C0_CTRL_ADDRMSEL_Msk            (0x100UL)                 /*!< ADDRMSEL (Bitfield-Mask: 0x01)                        */
#define I3C0_CTRL_ACKIBIEN_Pos            (7UL)                     /*!< ACKIBIEN (Bit 7)                                      */
#define I3C0_CTRL_ACKIBIEN_Msk            (0x80UL)                  /*!< ACKIBIEN (Bitfield-Mask: 0x01)                        */
#define I3C0_CTRL_INTEN_Pos               (6UL)                     /*!< INTEN (Bit 6)                                         */
#define I3C0_CTRL_INTEN_Msk               (0x40UL)                  /*!< INTEN (Bitfield-Mask: 0x01)                           */
#define I3C0_CTRL_MSTSLVSEL_Pos           (1UL)                     /*!< MSTSLVSEL (Bit 1)                                     */
#define I3C0_CTRL_MSTSLVSEL_Msk           (0x2UL)                   /*!< MSTSLVSEL (Bitfield-Mask: 0x01)                       */
#define I3C0_CTRL_EN_Pos                  (0UL)                     /*!< EN (Bit 0)                                            */
#define I3C0_CTRL_EN_Msk                  (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
/* ========================================================  CLKDIV  ========================================================= */
#define I3C0_CLKDIV_SCLDIV_Pos            (8UL)                     /*!< SCLDIV (Bit 8)                                        */
#define I3C0_CLKDIV_SCLDIV_Msk            (0xff00UL)                /*!< SCLDIV (Bitfield-Mask: 0xff)                          */
#define I3C0_CLKDIV_SDADIV_Pos            (0UL)                     /*!< SDADIV (Bit 0)                                        */
#define I3C0_CLKDIV_SDADIV_Msk            (0xffUL)                  /*!< SDADIV (Bitfield-Mask: 0xff)                          */
/* ========================================================  MSTSTA  ========================================================= */
#define I3C0_MSTSTA_BUSY_Pos              (31UL)                    /*!< BUSY (Bit 31)                                         */
#define I3C0_MSTSTA_BUSY_Msk              (0x80000000UL)            /*!< BUSY (Bitfield-Mask: 0x01)                            */
#define I3C0_MSTSTA_SDAINVAL_Pos          (20UL)                    /*!< SDAINVAL (Bit 20)                                     */
#define I3C0_MSTSTA_SDAINVAL_Msk          (0x100000UL)              /*!< SDAINVAL (Bitfield-Mask: 0x01)                        */
#define I3C0_MSTSTA_SCLINVAL_Pos          (19UL)                    /*!< SCLINVAL (Bit 19)                                     */
#define I3C0_MSTSTA_SCLINVAL_Msk          (0x80000UL)               /*!< SCLINVAL (Bitfield-Mask: 0x01)                        */
#define I3C0_MSTSTA_GETIBI_Pos            (17UL)                    /*!< GETIBI (Bit 17)                                       */
#define I3C0_MSTSTA_GETIBI_Msk            (0x20000UL)               /*!< GETIBI (Bitfield-Mask: 0x01)                          */
#define I3C0_MSTSTA_HJINT_Pos             (15UL)                    /*!< HJINT (Bit 15)                                        */
#define I3C0_MSTSTA_HJINT_Msk             (0x8000UL)                /*!< HJINT (Bitfield-Mask: 0x01)                           */
#define I3C0_MSTSTA_STOPDET_Pos           (14UL)                    /*!< STOPDET (Bit 14)                                      */
#define I3C0_MSTSTA_STOPDET_Msk           (0x4000UL)                /*!< STOPDET (Bitfield-Mask: 0x01)                         */
#define I3C0_MSTSTA_STARTDET_Pos          (13UL)                    /*!< STARTDET (Bit 13)                                     */
#define I3C0_MSTSTA_STARTDET_Msk          (0x2000UL)                /*!< STARTDET (Bitfield-Mask: 0x01)                        */
#define I3C0_MSTSTA_DADDRNACK_Pos         (11UL)                    /*!< DADDRNACK (Bit 11)                                    */
#define I3C0_MSTSTA_DADDRNACK_Msk         (0x800UL)                 /*!< DADDRNACK (Bitfield-Mask: 0x01)                       */
#define I3C0_MSTSTA_CCCNACK_Pos           (10UL)                    /*!< CCCNACK (Bit 10)                                      */
#define I3C0_MSTSTA_CCCNACK_Msk           (0x400UL)                 /*!< CCCNACK (Bitfield-Mask: 0x01)                         */
#define I3C0_MSTSTA_I2CNACK_Pos           (9UL)                     /*!< I2CNACK (Bit 9)                                       */
#define I3C0_MSTSTA_I2CNACK_Msk           (0x200UL)                 /*!< I2CNACK (Bitfield-Mask: 0x01)                         */
#define I3C0_MSTSTA_DADDRNUMOV_Pos        (8UL)                     /*!< DADDRNUMOV (Bit 8)                                    */
#define I3C0_MSTSTA_DADDRNUMOV_Msk        (0x100UL)                 /*!< DADDRNUMOV (Bitfield-Mask: 0x01)                      */
#define I3C0_MSTSTA_RXFULL_Pos            (7UL)                     /*!< RXFULL (Bit 7)                                        */
#define I3C0_MSTSTA_RXFULL_Msk            (0x80UL)                  /*!< RXFULL (Bitfield-Mask: 0x01)                          */
#define I3C0_MSTSTA_RXNOTEMPTY_Pos        (6UL)                     /*!< RXNOTEMPTY (Bit 6)                                    */
#define I3C0_MSTSTA_RXNOTEMPTY_Msk        (0x40UL)                  /*!< RXNOTEMPTY (Bitfield-Mask: 0x01)                      */
#define I3C0_MSTSTA_TXFULL_Pos            (5UL)                     /*!< TXFULL (Bit 5)                                        */
#define I3C0_MSTSTA_TXFULL_Msk            (0x20UL)                  /*!< TXFULL (Bitfield-Mask: 0x01)                          */
#define I3C0_MSTSTA_TXEMPTY_Pos           (4UL)                     /*!< TXEMPTY (Bit 4)                                       */
#define I3C0_MSTSTA_TXEMPTY_Msk           (0x10UL)                  /*!< TXEMPTY (Bitfield-Mask: 0x01)                         */
#define I3C0_MSTSTA_SCLARBLOST_Pos        (3UL)                     /*!< SCLARBLOST (Bit 3)                                    */
#define I3C0_MSTSTA_SCLARBLOST_Msk        (0x8UL)                   /*!< SCLARBLOST (Bitfield-Mask: 0x01)                      */
#define I3C0_MSTSTA_SDAARBLOST_Pos        (2UL)                     /*!< SDAARBLOST (Bit 2)                                    */
#define I3C0_MSTSTA_SDAARBLOST_Msk        (0x4UL)                   /*!< SDAARBLOST (Bitfield-Mask: 0x01)                      */
#define I3C0_MSTSTA_TOINTPENG_Pos         (1UL)                     /*!< TOINTPENG (Bit 1)                                     */
#define I3C0_MSTSTA_TOINTPENG_Msk         (0x2UL)                   /*!< TOINTPENG (Bitfield-Mask: 0x01)                       */
#define I3C0_MSTSTA_INTPENG_Pos           (0UL)                     /*!< INTPENG (Bit 0)                                       */
#define I3C0_MSTSTA_INTPENG_Msk           (0x1UL)                   /*!< INTPENG (Bitfield-Mask: 0x01)                         */
/* ==========================================================  TO  =========================================================== */
#define I3C0_TO_TOCNT_Pos                 (0UL)                     /*!< TOCNT (Bit 0)                                         */
#define I3C0_TO_TOCNT_Msk                 (0xffffffUL)              /*!< TOCNT (Bitfield-Mask: 0xffffff)                       */
/* =========================================================  DBUF  ========================================================== */
/* ========================================================  SLVADDR  ======================================================== */
#define I3C0_SLVADDR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define I3C0_SLVADDR_ADDR_Msk             (0xffffUL)                /*!< ADDR (Bitfield-Mask: 0xffff)                          */
/* =========================================================  DNUM  ========================================================== */
#define I3C0_DNUM_WRNUM_Pos               (0UL)                     /*!< WRNUM (Bit 0)                                         */
#define I3C0_DNUM_WRNUM_Msk               (0xffffUL)                /*!< WRNUM (Bitfield-Mask: 0xffff)                         */
#define I3C0_DNUM_RDNUM_Pos               (16UL)                    /*!< RDNUM (Bit 16)                                        */
#define I3C0_DNUM_RDNUM_Msk               (0xffff0000UL)            /*!< RDNUM (Bitfield-Mask: 0xffff)                         */
/* ========================================================  DIRCMD  ========================================================= */
/* ========================================================  INTMASK  ======================================================== */
#define I3C0_INTMASK_GETIBIMSK_Pos        (17UL)                    /*!< GETIBIMSK (Bit 17)                                    */
#define I3C0_INTMASK_GETIBIMSK_Msk        (0x20000UL)               /*!< GETIBIMSK (Bitfield-Mask: 0x01)                       */
#define I3C0_INTMASK_HJINTMSK_Pos         (15UL)                    /*!< HJINTMSK (Bit 15)                                     */
#define I3C0_INTMASK_HJINTMSK_Msk         (0x8000UL)                /*!< HJINTMSK (Bitfield-Mask: 0x01)                        */
#define I3C0_INTMASK_STOPDETINTMSK_Pos    (14UL)                    /*!< STOPDETINTMSK (Bit 14)                                */
#define I3C0_INTMASK_STOPDETINTMSK_Msk    (0x4000UL)                /*!< STOPDETINTMSK (Bitfield-Mask: 0x01)                   */
#define I3C0_INTMASK_STARTDEINTMSK_Pos    (13UL)                    /*!< STARTDEINTMSK (Bit 13)                                */
#define I3C0_INTMASK_STARTDEINTMSK_Msk    (0x2000UL)                /*!< STARTDEINTMSK (Bitfield-Mask: 0x01)                   */
#define I3C0_INTMASK_DADDRNACKINTMSK_Pos  (11UL)                    /*!< DADDRNACKINTMSK (Bit 11)                              */
#define I3C0_INTMASK_DADDRNACKINTMSK_Msk  (0x800UL)                 /*!< DADDRNACKINTMSK (Bitfield-Mask: 0x01)                 */
#define I3C0_INTMASK_CCCNACKINTMSK_Pos    (10UL)                    /*!< CCCNACKINTMSK (Bit 10)                                */
#define I3C0_INTMASK_CCCNACKINTMSK_Msk    (0x400UL)                 /*!< CCCNACKINTMSK (Bitfield-Mask: 0x01)                   */
#define I3C0_INTMASK_I2CNACKINTMSK_Pos    (9UL)                     /*!< I2CNACKINTMSK (Bit 9)                                 */
#define I3C0_INTMASK_I2CNACKINTMSK_Msk    (0x200UL)                 /*!< I2CNACKINTMSK (Bitfield-Mask: 0x01)                   */
#define I3C0_INTMASK_DADDRNUMOVINTMSK_Pos (8UL)                     /*!< DADDRNUMOVINTMSK (Bit 8)                              */
#define I3C0_INTMASK_DADDRNUMOVINTMSK_Msk (0x100UL)                 /*!< DADDRNUMOVINTMSK (Bitfield-Mask: 0x01)                */
#define I3C0_INTMASK_RXFULLINTMSK_Pos     (7UL)                     /*!< RXFULLINTMSK (Bit 7)                                  */
#define I3C0_INTMASK_RXFULLINTMSK_Msk     (0x80UL)                  /*!< RXFULLINTMSK (Bitfield-Mask: 0x01)                    */
#define I3C0_INTMASK_RXNOTEMPTYINTMSK_Pos (6UL)                     /*!< RXNOTEMPTYINTMSK (Bit 6)                              */
#define I3C0_INTMASK_RXNOTEMPTYINTMSK_Msk (0x40UL)                  /*!< RXNOTEMPTYINTMSK (Bitfield-Mask: 0x01)                */
#define I3C0_INTMASK_TXFULLINTMSK_Pos     (5UL)                     /*!< TXFULLINTMSK (Bit 5)                                  */
#define I3C0_INTMASK_TXFULLINTMSK_Msk     (0x20UL)                  /*!< TXFULLINTMSK (Bitfield-Mask: 0x01)                    */
#define I3C0_INTMASK_TXEMPTYINTMSK_Pos    (4UL)                     /*!< TXEMPTYINTMSK (Bit 4)                                 */
#define I3C0_INTMASK_TXEMPTYINTMSK_Msk    (0x10UL)                  /*!< TXEMPTYINTMSK (Bitfield-Mask: 0x01)                   */
#define I3C0_INTMASK_SCLARBLOSTINTMSK_Pos (3UL)                     /*!< SCLARBLOSTINTMSK (Bit 3)                              */
#define I3C0_INTMASK_SCLARBLOSTINTMSK_Msk (0x8UL)                   /*!< SCLARBLOSTINTMSK (Bitfield-Mask: 0x01)                */
#define I3C0_INTMASK_SDAARBLOSTINTMSK_Pos (2UL)                     /*!< SDAARBLOSTINTMSK (Bit 2)                              */
#define I3C0_INTMASK_SDAARBLOSTINTMSK_Msk (0x4UL)                   /*!< SDAARBLOSTINTMSK (Bitfield-Mask: 0x01)                */
#define I3C0_INTMASK_TOINTPENGMSK_Pos     (1UL)                     /*!< TOINTPENGMSK (Bit 1)                                  */
#define I3C0_INTMASK_TOINTPENGMSK_Msk     (0x2UL)                   /*!< TOINTPENGMSK (Bitfield-Mask: 0x01)                    */
#define I3C0_INTMASK_INTPENGENMSK_Pos     (0UL)                     /*!< INTPENGENMSK (Bit 0)                                  */
#define I3C0_INTMASK_INTPENGENMSK_Msk     (0x1UL)                   /*!< INTPENGENMSK (Bitfield-Mask: 0x01)                    */
/* ========================================================  DMAFTHR  ======================================================== */
#define I3C0_DMAFTHR_RXFIFOTHR_Pos        (8UL)                     /*!< RXFIFOTHR (Bit 8)                                     */
#define I3C0_DMAFTHR_RXFIFOTHR_Msk        (0xff00UL)                /*!< RXFIFOTHR (Bitfield-Mask: 0xff)                       */
#define I3C0_DMAFTHR_TXFIFOTHR_Pos        (0UL)                     /*!< TXFIFOTHR (Bit 0)                                     */
#define I3C0_DMAFTHR_TXFIFOTHR_Msk        (0xffUL)                  /*!< TXFIFOTHR (Bitfield-Mask: 0xff)                       */
/* ========================================================  SPKCNT  ========================================================= */
#define I3C0_SPKCNT_CNT_Pos               (0UL)                     /*!< CNT (Bit 0)                                           */
#define I3C0_SPKCNT_CNT_Msk               (0xffUL)                  /*!< CNT (Bitfield-Mask: 0xff)                             */
/* =======================================================  TXFRMLEN  ======================================================== */
/* ========================================================  TXFLEN  ========================================================= */
/* =======================================================  RXFRMLEN  ======================================================== */
/* ========================================================  RXFLEN  ========================================================= */
/* ========================================================  DYNADDR  ======================================================== */
#define I3C0_DYNADDR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define I3C0_DYNADDR_ADDR_Msk             (0x7fUL)                  /*!< ADDR (Bitfield-Mask: 0x7f)                            */
/* ========================================================  SLVCTRL  ======================================================== */
#define I3C0_SLVCTRL_REQHJ_Pos            (0UL)                     /*!< REQHJ (Bit 0)                                         */
#define I3C0_SLVCTRL_REQHJ_Msk            (0x1UL)                   /*!< REQHJ (Bitfield-Mask: 0x01)                           */
#define I3C0_SLVCTRL_ISSUEIBI_Pos         (1UL)                     /*!< ISSUEIBI (Bit 1)                                      */
#define I3C0_SLVCTRL_ISSUEIBI_Msk         (0x2UL)                   /*!< ISSUEIBI (Bitfield-Mask: 0x01)                        */
#define I3C0_SLVCTRL_HJTAR_Pos            (8UL)                     /*!< HJTAR (Bit 8)                                         */
#define I3C0_SLVCTRL_HJTAR_Msk            (0x100UL)                 /*!< HJTAR (Bitfield-Mask: 0x01)                           */
#define I3C0_SLVCTRL_PASHJEN_Pos          (9UL)                     /*!< PASHJEN (Bit 9)                                       */
#define I3C0_SLVCTRL_PASHJEN_Msk          (0x200UL)                 /*!< PASHJEN (Bitfield-Mask: 0x01)                         */
#define I3C0_SLVCTRL_TRYIBIAGAIN_Pos      (10UL)                    /*!< TRYIBIAGAIN (Bit 10)                                  */
#define I3C0_SLVCTRL_TRYIBIAGAIN_Msk      (0x400UL)                 /*!< TRYIBIAGAIN (Bitfield-Mask: 0x01)                     */
/* ========================================================  SLVSTA  ========================================================= */
#define I3C0_SLVSTA_RNW_Pos               (31UL)                    /*!< RNW (Bit 31)                                          */
#define I3C0_SLVSTA_RNW_Msk               (0x80000000UL)            /*!< RNW (Bitfield-Mask: 0x01)                             */
#define I3C0_SLVSTA_DYADDR_Pos            (30UL)                    /*!< DYADDR (Bit 30)                                       */
#define I3C0_SLVSTA_DYADDR_Msk            (0x40000000UL)            /*!< DYADDR (Bitfield-Mask: 0x01)                          */
#define I3C0_SLVSTA_STAADDR_Pos           (29UL)                    /*!< STAADDR (Bit 29)                                      */
#define I3C0_SLVSTA_STAADDR_Msk           (0x20000000UL)            /*!< STAADDR (Bitfield-Mask: 0x01)                         */
#define I3C0_SLVSTA_GETACCCR_Pos          (14UL)                    /*!< GETACCCR (Bit 14)                                     */
#define I3C0_SLVSTA_GETACCCR_Msk          (0x4000UL)                /*!< GETACCCR (Bitfield-Mask: 0x01)                        */
#define I3C0_SLVSTA_RSTACT_Pos            (13UL)                    /*!< RSTACT (Bit 13)                                       */
#define I3C0_SLVSTA_RSTACT_Msk            (0x2000UL)                /*!< RSTACT (Bitfield-Mask: 0x01)                          */
#define I3C0_SLVSTA_SETXTIME_Pos          (12UL)                    /*!< SETXTIME (Bit 12)                                     */
#define I3C0_SLVSTA_SETXTIME_Msk          (0x1000UL)                /*!< SETXTIME (Bitfield-Mask: 0x01)                        */
#define I3C0_SLVSTA_SETMWL_Pos            (11UL)                    /*!< SETMWL (Bit 11)                                       */
#define I3C0_SLVSTA_SETMWL_Msk            (0x800UL)                 /*!< SETMWL (Bitfield-Mask: 0x01)                          */
#define I3C0_SLVSTA_SETMRL_Pos            (10UL)                    /*!< SETMRL (Bit 10)                                       */
#define I3C0_SLVSTA_SETMRL_Msk            (0x400UL)                 /*!< SETMRL (Bitfield-Mask: 0x01)                          */
#define I3C0_SLVSTA_TERR_Pos              (9UL)                     /*!< TERR (Bit 9)                                          */
#define I3C0_SLVSTA_TERR_Msk              (0x200UL)                 /*!< TERR (Bitfield-Mask: 0x01)                            */
#define I3C0_SLVSTA_WRERR_Pos             (8UL)                     /*!< WRERR (Bit 8)                                         */
#define I3C0_SLVSTA_WRERR_Msk             (0x100UL)                 /*!< WRERR (Bitfield-Mask: 0x01)                           */
#define I3C0_SLVSTA_CCCERR_Pos            (7UL)                     /*!< CCCERR (Bit 7)                                        */
#define I3C0_SLVSTA_CCCERR_Msk            (0x80UL)                  /*!< CCCERR (Bitfield-Mask: 0x01)                          */
#define I3C0_SLVSTA_IBINACK_Pos           (6UL)                     /*!< IBINACK (Bit 6)                                       */
#define I3C0_SLVSTA_IBINACK_Msk           (0x40UL)                  /*!< IBINACK (Bitfield-Mask: 0x01)                         */
#define I3C0_SLVSTA_IBIACCPED_Pos         (5UL)                     /*!< IBIACCPED (Bit 5)                                     */
#define I3C0_SLVSTA_IBIACCPED_Msk         (0x20UL)                  /*!< IBIACCPED (Bitfield-Mask: 0x01)                       */
#define I3C0_SLVSTA_HJED_Pos              (4UL)                     /*!< HJED (Bit 4)                                          */
#define I3C0_SLVSTA_HJED_Msk              (0x10UL)                  /*!< HJED (Bitfield-Mask: 0x01)                            */
#define I3C0_SLVSTA_ENHJ_Pos              (3UL)                     /*!< ENHJ (Bit 3)                                          */
#define I3C0_SLVSTA_ENHJ_Msk              (0x8UL)                   /*!< ENHJ (Bitfield-Mask: 0x01)                            */
#define I3C0_SLVSTA_ENCR_Pos              (1UL)                     /*!< ENCR (Bit 1)                                          */
#define I3C0_SLVSTA_ENCR_Msk              (0x2UL)                   /*!< ENCR (Bitfield-Mask: 0x01)                            */
#define I3C0_SLVSTA_ENINT_Pos             (0UL)                     /*!< ENINT (Bit 0)                                         */
#define I3C0_SLVSTA_ENINT_Msk             (0x1UL)                   /*!< ENINT (Bitfield-Mask: 0x01)                           */
/* ========================================================  SLVUIDL  ======================================================== */
/* ========================================================  SLVUIDH  ======================================================== */
/* ========================================================  SLVBCR  ========================================================= */
#define I3C0_SLVBCR_BCR_Pos               (0UL)                     /*!< BCR (Bit 0)                                           */
#define I3C0_SLVBCR_BCR_Msk               (0xffUL)                  /*!< BCR (Bitfield-Mask: 0xff)                             */
/* ========================================================  SLVDCR  ========================================================= */
#define I3C0_SLVDCR_DCR_Pos               (0UL)                     /*!< DCR (Bit 0)                                           */
#define I3C0_SLVDCR_DCR_Msk               (0xffUL)                  /*!< DCR (Bitfield-Mask: 0xff)                             */
/* ========================================================  SLVMDB  ========================================================= */
#define I3C0_SLVMDB_MDB_Pos               (0UL)                     /*!< MDB (Bit 0)                                           */
#define I3C0_SLVMDB_MDB_Msk               (0xffUL)                  /*!< MDB (Bitfield-Mask: 0xff)                             */
/* ======================================================  SLVSETXTIME  ====================================================== */
#define I3C0_SLVSETXTIME_SETXTIME_Pos     (0UL)                     /*!< SETXTIME (Bit 0)                                      */
#define I3C0_SLVSETXTIME_SETXTIME_Msk     (0xffUL)                  /*!< SETXTIME (Bitfield-Mask: 0xff)                        */
/* ======================================================  SLVGETXTIME  ====================================================== */
#define I3C0_SLVGETXTIME_INAB_Pos         (0UL)                     /*!< INAB (Bit 0)                                          */
#define I3C0_SLVGETXTIME_INAB_Msk         (0xffUL)                  /*!< INAB (Bitfield-Mask: 0xff)                            */
#define I3C0_SLVGETXTIME_FREQB_Pos        (8UL)                     /*!< FREQB (Bit 8)                                         */
#define I3C0_SLVGETXTIME_FREQB_Msk        (0xff00UL)                /*!< FREQB (Bitfield-Mask: 0xff)                           */
#define I3C0_SLVGETXTIME_STAB_Pos         (16UL)                    /*!< STAB (Bit 16)                                         */
#define I3C0_SLVGETXTIME_STAB_Msk         (0xff0000UL)              /*!< STAB (Bitfield-Mask: 0xff)                            */
#define I3C0_SLVGETXTIME_SUPMB_Pos        (24UL)                    /*!< SUPMB (Bit 24)                                        */
#define I3C0_SLVGETXTIME_SUPMB_Msk        (0xff000000UL)            /*!< SUPMB (Bitfield-Mask: 0xff)                           */
/* =======================================================  SLVRSTACT  ======================================================= */
#define I3C0_SLVRSTACT_RSTACT_Pos         (0UL)                     /*!< RSTACT (Bit 0)                                        */
#define I3C0_SLVRSTACT_RSTACT_Msk         (0xffUL)                  /*!< RSTACT (Bitfield-Mask: 0xff)                          */
/* ========================================================  SLVMWL  ========================================================= */
#define I3C0_SLVMWL_MWL_Pos               (0UL)                     /*!< MWL (Bit 0)                                           */
#define I3C0_SLVMWL_MWL_Msk               (0xffffUL)                /*!< MWL (Bitfield-Mask: 0xffff)                           */
/* ========================================================  SLVMRL  ========================================================= */
#define I3C0_SLVMRL_MRL_Pos               (0UL)                     /*!< MRL (Bit 0)                                           */
#define I3C0_SLVMRL_MRL_Msk               (0xffffUL)                /*!< MRL (Bitfield-Mask: 0xffff)                           */
/* =====================================================  SLVGETSTATUS  ====================================================== */
#define I3C0_SLVGETSTATUS_STSDATA_Pos     (0UL)                     /*!< STSDATA (Bit 0)                                       */
#define I3C0_SLVGETSTATUS_STSDATA_Msk     (0xffffUL)                /*!< STSDATA (Bitfield-Mask: 0xffff)                       */
/* ======================================================  SLVINTMASK  ======================================================= */
#define I3C0_SLVINTMASK_DYADDRINT_Pos     (30UL)                    /*!< DYADDRINT (Bit 30)                                    */
#define I3C0_SLVINTMASK_DYADDRINT_Msk     (0x40000000UL)            /*!< DYADDRINT (Bitfield-Mask: 0x01)                       */
#define I3C0_SLVINTMASK_STAADDRINT_Pos    (29UL)                    /*!< STAADDRINT (Bit 29)                                   */
#define I3C0_SLVINTMASK_STAADDRINT_Msk    (0x20000000UL)            /*!< STAADDRINT (Bitfield-Mask: 0x01)                      */
#define I3C0_SLVINTMASK_GETACCCRINT_Pos   (14UL)                    /*!< GETACCCRINT (Bit 14)                                  */
#define I3C0_SLVINTMASK_GETACCCRINT_Msk   (0x4000UL)                /*!< GETACCCRINT (Bitfield-Mask: 0x01)                     */
#define I3C0_SLVINTMASK_RSTACTINT_Pos     (13UL)                    /*!< RSTACTINT (Bit 13)                                    */
#define I3C0_SLVINTMASK_RSTACTINT_Msk     (0x2000UL)                /*!< RSTACTINT (Bitfield-Mask: 0x01)                       */
#define I3C0_SLVINTMASK_SETXTIMEINT_Pos   (12UL)                    /*!< SETXTIMEINT (Bit 12)                                  */
#define I3C0_SLVINTMASK_SETXTIMEINT_Msk   (0x1000UL)                /*!< SETXTIMEINT (Bitfield-Mask: 0x01)                     */
#define I3C0_SLVINTMASK_SETMWLINT_Pos     (11UL)                    /*!< SETMWLINT (Bit 11)                                    */
#define I3C0_SLVINTMASK_SETMWLINT_Msk     (0x800UL)                 /*!< SETMWLINT (Bitfield-Mask: 0x01)                       */
#define I3C0_SLVINTMASK_SETMRLINT_Pos     (10UL)                    /*!< SETMRLINT (Bit 10)                                    */
#define I3C0_SLVINTMASK_SETMRLINT_Msk     (0x400UL)                 /*!< SETMRLINT (Bitfield-Mask: 0x01)                       */
#define I3C0_SLVINTMASK_TERRINT_Pos       (9UL)                     /*!< TERRINT (Bit 9)                                       */
#define I3C0_SLVINTMASK_TERRINT_Msk       (0x200UL)                 /*!< TERRINT (Bitfield-Mask: 0x01)                         */
#define I3C0_SLVINTMASK_WRERRINT_Pos      (8UL)                     /*!< WRERRINT (Bit 8)                                      */
#define I3C0_SLVINTMASK_WRERRINT_Msk      (0x100UL)                 /*!< WRERRINT (Bitfield-Mask: 0x01)                        */
#define I3C0_SLVINTMASK_CCCERRINT_Pos     (7UL)                     /*!< CCCERRINT (Bit 7)                                     */
#define I3C0_SLVINTMASK_CCCERRINT_Msk     (0x80UL)                  /*!< CCCERRINT (Bitfield-Mask: 0x01)                       */
#define I3C0_SLVINTMASK_IBINACKINT_Pos    (6UL)                     /*!< IBINACKINT (Bit 6)                                    */
#define I3C0_SLVINTMASK_IBINACKINT_Msk    (0x40UL)                  /*!< IBINACKINT (Bitfield-Mask: 0x01)                      */
#define I3C0_SLVINTMASK_IBIACCPEDINT_Pos  (5UL)                     /*!< IBIACCPEDINT (Bit 5)                                  */
#define I3C0_SLVINTMASK_IBIACCPEDINT_Msk  (0x20UL)                  /*!< IBIACCPEDINT (Bitfield-Mask: 0x01)                    */
#define I3C0_SLVINTMASK_HJEDINT_Pos       (4UL)                     /*!< HJEDINT (Bit 4)                                       */
#define I3C0_SLVINTMASK_HJEDINT_Msk       (0x10UL)                  /*!< HJEDINT (Bitfield-Mask: 0x01)                         */
#define I3C0_SLVINTMASK_ENHJINT_Pos       (3UL)                     /*!< ENHJINT (Bit 3)                                       */
#define I3C0_SLVINTMASK_ENHJINT_Msk       (0x8UL)                   /*!< ENHJINT (Bitfield-Mask: 0x01)                         */
#define I3C0_SLVINTMASK_ENCRINT_Pos       (1UL)                     /*!< ENCRINT (Bit 1)                                       */
#define I3C0_SLVINTMASK_ENCRINT_Msk       (0x2UL)                   /*!< ENCRINT (Bitfield-Mask: 0x01)                         */
#define I3C0_SLVINTMASK_ENINT_Pos         (0UL)                     /*!< ENINT (Bit 0)                                         */
#define I3C0_SLVINTMASK_ENINT_Msk         (0x1UL)                   /*!< ENINT (Bitfield-Mask: 0x01)                           */


/* =========================================================================================================================== */
/* ================                                            PWM                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  DUTY  ========================================================== */
/* ==========================================================  DIV  ========================================================== */
/* =========================================================  CTRL  ========================================================== */
#define PWM_CTRL_CLKSRC_Pos               (28UL)                    /*!< CLKSRC (Bit 28)                                       */
#define PWM_CTRL_CLKSRC_Msk               (0x10000000UL)            /*!< CLKSRC (Bitfield-Mask: 0x01)                          */
#define PWM_CTRL_INVT_Pos                 (29UL)                    /*!< INVT (Bit 29)                                         */
#define PWM_CTRL_INVT_Msk                 (0x20000000UL)            /*!< INVT (Bitfield-Mask: 0x01)                            */
#define PWM_CTRL_RST_Pos                  (30UL)                    /*!< RST (Bit 30)                                          */
#define PWM_CTRL_RST_Msk                  (0x40000000UL)            /*!< RST (Bitfield-Mask: 0x01)                             */
#define PWM_CTRL_EN_Pos                   (31UL)                    /*!< EN (Bit 31)                                           */
#define PWM_CTRL_EN_Msk                   (0x80000000UL)            /*!< EN (Bitfield-Mask: 0x01)                              */


/* =========================================================================================================================== */
/* ================                                          PWMLED                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  MODE  ========================================================== */
#define PWMLED_MODE_SEL_Pos               (0UL)                     /*!< SEL (Bit 0)                                           */
#define PWMLED_MODE_SEL_Msk               (0x3UL)                   /*!< SEL (Bitfield-Mask: 0x03)                             */
/* ==========================================================  DL  =========================================================== */
#define PWMLED_DL_MINV_Pos                (0UL)                     /*!< MINV (Bit 0)                                          */
#define PWMLED_DL_MINV_Msk                (0xffUL)                  /*!< MINV (Bitfield-Mask: 0xff)                            */
#define PWMLED_DL_MAXV_Pos                (8UL)                     /*!< MAXV (Bit 8)                                          */
#define PWMLED_DL_MAXV_Msk                (0xff00UL)                /*!< MAXV (Bitfield-Mask: 0xff)                            */
/* ==========================================================  WT  =========================================================== */
#define PWMLED_WT_LKV_Pos                 (0UL)                     /*!< LKV (Bit 0)                                           */
#define PWMLED_WT_LKV_Msk                 (0xfffUL)                 /*!< LKV (Bitfield-Mask: 0xfff)                            */
#define PWMLED_WT_HKV_Pos                 (16UL)                    /*!< HKV (Bit 16)                                          */
#define PWMLED_WT_HKV_Msk                 (0xfff0000UL)             /*!< HKV (Bitfield-Mask: 0xfff)                            */
/* ==========================================================  SD  =========================================================== */
#define PWMLED_SD_STEP0DV_Pos             (0UL)                     /*!< STEP0DV (Bit 0)                                       */
#define PWMLED_SD_STEP0DV_Msk             (0xfUL)                   /*!< STEP0DV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_SD_STEP1DV_Pos             (4UL)                     /*!< STEP1DV (Bit 4)                                       */
#define PWMLED_SD_STEP1DV_Msk             (0xf0UL)                  /*!< STEP1DV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_SD_STEP2DV_Pos             (8UL)                     /*!< STEP2DV (Bit 8)                                       */
#define PWMLED_SD_STEP2DV_Msk             (0xf00UL)                 /*!< STEP2DV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_SD_STEP3DV_Pos             (12UL)                    /*!< STEP3DV (Bit 12)                                      */
#define PWMLED_SD_STEP3DV_Msk             (0xf000UL)                /*!< STEP3DV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_SD_STEP4DV_Pos             (16UL)                    /*!< STEP4DV (Bit 16)                                      */
#define PWMLED_SD_STEP4DV_Msk             (0xf0000UL)               /*!< STEP4DV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_SD_STEP5DV_Pos             (20UL)                    /*!< STEP5DV (Bit 20)                                      */
#define PWMLED_SD_STEP5DV_Msk             (0xf00000UL)              /*!< STEP5DV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_SD_STEP6DV_Pos             (24UL)                    /*!< STEP6DV (Bit 24)                                      */
#define PWMLED_SD_STEP6DV_Msk             (0xf000000UL)             /*!< STEP6DV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_SD_STEP7DV_Pos             (28UL)                    /*!< STEP7DV (Bit 28)                                      */
#define PWMLED_SD_STEP7DV_Msk             (0xf0000000UL)            /*!< STEP7DV (Bitfield-Mask: 0x0f)                         */
/* ==========================================================  ST  =========================================================== */
#define PWMLED_ST_STEP0TV_Pos             (0UL)                     /*!< STEP0TV (Bit 0)                                       */
#define PWMLED_ST_STEP0TV_Msk             (0xfUL)                   /*!< STEP0TV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_ST_STEP1TV_Pos             (4UL)                     /*!< STEP1TV (Bit 4)                                       */
#define PWMLED_ST_STEP1TV_Msk             (0xf0UL)                  /*!< STEP1TV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_ST_STEP2TV_Pos             (8UL)                     /*!< STEP2TV (Bit 8)                                       */
#define PWMLED_ST_STEP2TV_Msk             (0xf00UL)                 /*!< STEP2TV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_ST_STEP3TV_Pos             (12UL)                    /*!< STEP3TV (Bit 12)                                      */
#define PWMLED_ST_STEP3TV_Msk             (0xf000UL)                /*!< STEP3TV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_ST_STEP4TV_Pos             (16UL)                    /*!< STEP4TV (Bit 16)                                      */
#define PWMLED_ST_STEP4TV_Msk             (0xf0000UL)               /*!< STEP4TV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_ST_STEP5TV_Pos             (20UL)                    /*!< STEP5TV (Bit 20)                                      */
#define PWMLED_ST_STEP5TV_Msk             (0xf00000UL)              /*!< STEP5TV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_ST_STEP6TV_Pos             (24UL)                    /*!< STEP6TV (Bit 24)                                      */
#define PWMLED_ST_STEP6TV_Msk             (0xf000000UL)             /*!< STEP6TV (Bitfield-Mask: 0x0f)                         */
#define PWMLED_ST_STEP7TV_Pos             (28UL)                    /*!< STEP7TV (Bit 28)                                      */
#define PWMLED_ST_STEP7TV_Msk             (0xf0000000UL)            /*!< STEP7TV (Bitfield-Mask: 0x0f)                         */
/* =========================================================  CTRL  ========================================================== */
#define PWMLED_CTRL_CYCLE_Pos             (16UL)                    /*!< CYCLE (Bit 16)                                        */
#define PWMLED_CTRL_CYCLE_Msk             (0xff0000UL)              /*!< CYCLE (Bitfield-Mask: 0xff)                           */
#define PWMLED_CTRL_OUTPUT_Pos            (28UL)                    /*!< OUTPUT (Bit 28)                                       */
#define PWMLED_CTRL_OUTPUT_Msk            (0x10000000UL)            /*!< OUTPUT (Bitfield-Mask: 0x01)                          */
#define PWMLED_CTRL_INV_Pos               (29UL)                    /*!< INV (Bit 29)                                          */
#define PWMLED_CTRL_INV_Msk               (0x20000000UL)            /*!< INV (Bitfield-Mask: 0x01)                             */
#define PWMLED_CTRL_RST_Pos               (30UL)                    /*!< RST (Bit 30)                                          */
#define PWMLED_CTRL_RST_Msk               (0x40000000UL)            /*!< RST (Bitfield-Mask: 0x01)                             */
#define PWMLED_CTRL_EN_Pos                (31UL)                    /*!< EN (Bit 31)                                           */
#define PWMLED_CTRL_EN_Msk                (0x80000000UL)            /*!< EN (Bitfield-Mask: 0x01)                              */


/* =========================================================================================================================== */
/* ================                                           TACHO                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define TACHO_CTRL_EN_Pos                 (0UL)                     /*!< EN (Bit 0)                                            */
#define TACHO_CTRL_EN_Msk                 (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define TACHO_CTRL_FILTEREN_Pos           (1UL)                     /*!< FILTEREN (Bit 1)                                      */
#define TACHO_CTRL_FILTEREN_Msk           (0x2UL)                   /*!< FILTEREN (Bitfield-Mask: 0x01)                        */
#define TACHO_CTRL_SELEDGE_Pos            (2UL)                     /*!< SELEDGE (Bit 2)                                       */
#define TACHO_CTRL_SELEDGE_Msk            (0xcUL)                   /*!< SELEDGE (Bitfield-Mask: 0x03)                         */
#define TACHO_CTRL_READMODE_Pos           (4UL)                     /*!< READMODE (Bit 4)                                      */
#define TACHO_CTRL_READMODE_Msk           (0x10UL)                  /*!< READMODE (Bitfield-Mask: 0x01)                        */
#define TACHO_CTRL_CNT_Pos                (16UL)                    /*!< CNT (Bit 16)                                          */
#define TACHO_CTRL_CNT_Msk                (0xffff0000UL)            /*!< CNT (Bitfield-Mask: 0xffff)                           */
/* ==========================================================  STS  ========================================================== */
#define TACHO_STS_LIMIT_Pos               (0UL)                     /*!< LIMIT (Bit 0)                                         */
#define TACHO_STS_LIMIT_Msk               (0x1UL)                   /*!< LIMIT (Bitfield-Mask: 0x01)                           */
#define TACHO_STS_PIN_Pos                 (1UL)                     /*!< PIN (Bit 1)                                           */
#define TACHO_STS_PIN_Msk                 (0x2UL)                   /*!< PIN (Bitfield-Mask: 0x01)                             */
#define TACHO_STS_CHG_Pos                 (2UL)                     /*!< CHG (Bit 2)                                           */
#define TACHO_STS_CHG_Msk                 (0x4UL)                   /*!< CHG (Bitfield-Mask: 0x01)                             */
#define TACHO_STS_CNTRDY_Pos              (3UL)                     /*!< CNTRDY (Bit 3)                                        */
#define TACHO_STS_CNTRDY_Msk              (0x8UL)                   /*!< CNTRDY (Bitfield-Mask: 0x01)                          */
/* ========================================================  LIMITH  ========================================================= */
#define TACHO_LIMITH_VAL_Pos              (0UL)                     /*!< VAL (Bit 0)                                           */
#define TACHO_LIMITH_VAL_Msk              (0xffffUL)                /*!< VAL (Bitfield-Mask: 0xffff)                           */
/* ========================================================  LIMITL  ========================================================= */
#define TACHO_LIMITL_VAL_Pos              (0UL)                     /*!< VAL (Bit 0)                                           */
#define TACHO_LIMITL_VAL_Msk              (0xffffUL)                /*!< VAL (Bitfield-Mask: 0xffff)                           */
/* =========================================================  INTEN  ========================================================= */
#define TACHO_INTEN_LIMITEN_Pos           (0UL)                     /*!< LIMITEN (Bit 0)                                       */
#define TACHO_INTEN_LIMITEN_Msk           (0x1UL)                   /*!< LIMITEN (Bitfield-Mask: 0x01)                         */
#define TACHO_INTEN_CNTRDYEN_Pos          (1UL)                     /*!< CNTRDYEN (Bit 1)                                      */
#define TACHO_INTEN_CNTRDYEN_Msk          (0x2UL)                   /*!< CNTRDYEN (Bitfield-Mask: 0x01)                        */
#define TACHO_INTEN_CHGEN_Pos             (2UL)                     /*!< CHGEN (Bit 2)                                         */
#define TACHO_INTEN_CHGEN_Msk             (0x4UL)                   /*!< CHGEN (Bitfield-Mask: 0x01)                           */


/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define ADC_CTRL_EN_Pos                   (0UL)                     /*!< EN (Bit 0)                                            */
#define ADC_CTRL_EN_Msk                   (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define ADC_CTRL_START_Pos                (1UL)                     /*!< START (Bit 1)                                         */
#define ADC_CTRL_START_Msk                (0x2UL)                   /*!< START (Bitfield-Mask: 0x01)                           */
#define ADC_CTRL_RST_Pos                  (2UL)                     /*!< RST (Bit 2)                                           */
#define ADC_CTRL_RST_Msk                  (0x4UL)                   /*!< RST (Bitfield-Mask: 0x01)                             */
#define ADC_CTRL_MDSEL_Pos                (3UL)                     /*!< MDSEL (Bit 3)                                         */
#define ADC_CTRL_MDSEL_Msk                (0x8UL)                   /*!< MDSEL (Bitfield-Mask: 0x01)                           */
#define ADC_CTRL_SINGLEINTEN_Pos          (4UL)                     /*!< SINGLEINTEN (Bit 4)                                   */
#define ADC_CTRL_SINGLEINTEN_Msk          (0x10UL)                  /*!< SINGLEINTEN (Bitfield-Mask: 0x01)                     */
#define ADC_CTRL_REPEATINTEN_Pos          (5UL)                     /*!< REPEATINTEN (Bit 5)                                   */
#define ADC_CTRL_REPEATINTEN_Msk          (0x20UL)                  /*!< REPEATINTEN (Bitfield-Mask: 0x01)                     */
/* ========================================================  CHCTRL  ========================================================= */
#define ADC_CHCTRL_CHEN_Pos               (0UL)                     /*!< CHEN (Bit 0)                                          */
#define ADC_CHCTRL_CHEN_Msk               (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01)                            */
#define ADC_CHCTRL_CHLPFBYPASS_Pos        (12UL)                    /*!< CHLPFBYPASS (Bit 12)                                  */
#define ADC_CHCTRL_CHLPFBYPASS_Msk        (0x1000UL)                /*!< CHLPFBYPASS (Bitfield-Mask: 0x01)                     */
#define ADC_CHCTRL_CALBYPASS_Pos          (24UL)                    /*!< CALBYPASS (Bit 24)                                    */
#define ADC_CHCTRL_CALBYPASS_Msk          (0x1000000UL)             /*!< CALBYPASS (Bitfield-Mask: 0x01)                       */
/* ==========================================================  STS  ========================================================== */
#define ADC_STS_CHDONE_Pos                (0UL)                     /*!< CHDONE (Bit 0)                                        */
#define ADC_STS_CHDONE_Msk                (0x1UL)                   /*!< CHDONE (Bitfield-Mask: 0x01)                          */
#define ADC_STS_SINGLEDONE_Pos            (12UL)                    /*!< SINGLEDONE (Bit 12)                                   */
#define ADC_STS_SINGLEDONE_Msk            (0x1000UL)                /*!< SINGLEDONE (Bitfield-Mask: 0x01)                      */
#define ADC_STS_REPEATDONE_Pos            (13UL)                    /*!< REPEATDONE (Bit 13)                                   */
#define ADC_STS_REPEATDONE_Msk            (0x2000UL)                /*!< REPEATDONE (Bitfield-Mask: 0x01)                      */
#define ADC_STS_READY_Pos                 (16UL)                    /*!< READY (Bit 16)                                        */
#define ADC_STS_READY_Msk                 (0x10000UL)               /*!< READY (Bitfield-Mask: 0x01)                           */
#define ADC_STS_LPFSTABLE_Pos             (17UL)                    /*!< LPFSTABLE (Bit 17)                                    */
#define ADC_STS_LPFSTABLE_Msk             (0x20000UL)               /*!< LPFSTABLE (Bitfield-Mask: 0x01)                       */
/* ========================================================  CHDATA  ========================================================= */
#define ADC_CHDATA_DATA_Pos               (0UL)                     /*!< DATA (Bit 0)                                          */
#define ADC_CHDATA_DATA_Msk               (0xfffUL)                 /*!< DATA (Bitfield-Mask: 0xfff)                           */


/* =========================================================================================================================== */
/* ================                                            PS2                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define PS2_CTRL_EN_Pos                   (0UL)                     /*!< EN (Bit 0)                                            */
#define PS2_CTRL_EN_Msk                   (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define PS2_CTRL_MDSEL_Pos                (1UL)                     /*!< MDSEL (Bit 1)                                         */
#define PS2_CTRL_MDSEL_Msk                (0x2UL)                   /*!< MDSEL (Bitfield-Mask: 0x01)                           */
#define PS2_CTRL_TXSTR_Pos                (2UL)                     /*!< TXSTR (Bit 2)                                         */
#define PS2_CTRL_TXSTR_Msk                (0x4UL)                   /*!< TXSTR (Bitfield-Mask: 0x01)                           */
#define PS2_CTRL_READY_Pos                (3UL)                     /*!< READY (Bit 3)                                         */
#define PS2_CTRL_READY_Msk                (0x8UL)                   /*!< READY (Bitfield-Mask: 0x01)                           */
#define PS2_CTRL_RST_Pos                  (4UL)                     /*!< RST (Bit 4)                                           */
#define PS2_CTRL_RST_Msk                  (0x10UL)                  /*!< RST (Bitfield-Mask: 0x01)                             */
/* =========================================================  TXDAT  ========================================================= */
#define PS2_TXDAT_DATA_Pos                (0UL)                     /*!< DATA (Bit 0)                                          */
#define PS2_TXDAT_DATA_Msk                (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
/* =========================================================  RXDAT  ========================================================= */
#define PS2_RXDAT_DATA_Pos                (0UL)                     /*!< DATA (Bit 0)                                          */
#define PS2_RXDAT_DATA_Msk                (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
/* ==========================================================  STS  ========================================================== */
#define PS2_STS_STRSTS_Pos                (0UL)                     /*!< STRSTS (Bit 0)                                        */
#define PS2_STS_STRSTS_Msk                (0x1UL)                   /*!< STRSTS (Bitfield-Mask: 0x01)                          */
#define PS2_STS_TDS_Pos                   (1UL)                     /*!< TDS (Bit 1)                                           */
#define PS2_STS_TDS_Msk                   (0x2UL)                   /*!< TDS (Bitfield-Mask: 0x01)                             */
#define PS2_STS_PRTERR_Pos                (2UL)                     /*!< PRTERR (Bit 2)                                        */
#define PS2_STS_PRTERR_Msk                (0x4UL)                   /*!< PRTERR (Bitfield-Mask: 0x01)                          */
#define PS2_STS_STPERR_Pos                (3UL)                     /*!< STPERR (Bit 3)                                        */
#define PS2_STS_STPERR_Msk                (0x8UL)                   /*!< STPERR (Bitfield-Mask: 0x01)                          */
#define PS2_STS_BUSY_Pos                  (4UL)                     /*!< BUSY (Bit 4)                                          */
#define PS2_STS_BUSY_Msk                  (0x10UL)                  /*!< BUSY (Bitfield-Mask: 0x01)                            */
#define PS2_STS_TXSTRTO_Pos               (5UL)                     /*!< TXSTRTO (Bit 5)                                       */
#define PS2_STS_TXSTRTO_Msk               (0x20UL)                  /*!< TXSTRTO (Bitfield-Mask: 0x01)                         */
#define PS2_STS_TXTO_Pos                  (6UL)                     /*!< TXTO (Bit 6)                                          */
#define PS2_STS_TXTO_Msk                  (0x40UL)                  /*!< TXTO (Bitfield-Mask: 0x01)                            */
#define PS2_STS_RXTO_Pos                  (7UL)                     /*!< RXTO (Bit 7)                                          */
#define PS2_STS_RXTO_Msk                  (0x80UL)                  /*!< RXTO (Bitfield-Mask: 0x01)                            */
/* =========================================================  INTEN  ========================================================= */
#define PS2_INTEN_STRINTEN_Pos            (0UL)                     /*!< STRINTEN (Bit 0)                                      */
#define PS2_INTEN_STRINTEN_Msk            (0x1UL)                   /*!< STRINTEN (Bitfield-Mask: 0x01)                        */
#define PS2_INTEN_TDSINTEN_Pos            (1UL)                     /*!< TDSINTEN (Bit 1)                                      */
#define PS2_INTEN_TDSINTEN_Msk            (0x2UL)                   /*!< TDSINTEN (Bitfield-Mask: 0x01)                        */
#define PS2_INTEN_STSINTEN_Pos            (2UL)                     /*!< STSINTEN (Bit 2)                                      */
#define PS2_INTEN_STSINTEN_Msk            (0x4UL)                   /*!< STSINTEN (Bitfield-Mask: 0x01)                        */


/* =========================================================================================================================== */
/* ================                                            KBM                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  SCANOUT  ======================================================== */
#define KBM_SCANOUT_KSO_Pos               (0UL)                     /*!< KSO (Bit 0)                                           */
#define KBM_SCANOUT_KSO_Msk               (0x1UL)                   /*!< KSO (Bitfield-Mask: 0x01)                             */
/* ========================================================  SCANIN  ========================================================= */
#define KBM_SCANIN_KSI_Pos                (0UL)                     /*!< KSI (Bit 0)                                           */
#define KBM_SCANIN_KSI_Msk                (0x1UL)                   /*!< KSI (Bitfield-Mask: 0x01)                             */
/* =========================================================  INTEN  ========================================================= */
#define KBM_INTEN_KSI_Pos                 (0UL)                     /*!< KSI (Bit 0)                                           */
#define KBM_INTEN_KSI_Msk                 (0x1UL)                   /*!< KSI (Bitfield-Mask: 0x01)                             */
/* =========================================================  CTRL  ========================================================== */
#define KBM_CTRL_EN_Pos                   (0UL)                     /*!< EN (Bit 0)                                            */
#define KBM_CTRL_EN_Msk                   (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define KBM_CTRL_KSI8EN_Pos               (1UL)                     /*!< KSI8EN (Bit 1)                                        */
#define KBM_CTRL_KSI8EN_Msk               (0x2UL)                   /*!< KSI8EN (Bitfield-Mask: 0x01)                          */
#define KBM_CTRL_KSI9EN_Pos               (2UL)                     /*!< KSI9EN (Bit 2)                                        */
#define KBM_CTRL_KSI9EN_Msk               (0x4UL)                   /*!< KSI9EN (Bitfield-Mask: 0x01)                          */
#define KBM_CTRL_KSO18EN_Pos              (16UL)                    /*!< KSO18EN (Bit 16)                                      */
#define KBM_CTRL_KSO18EN_Msk              (0x10000UL)               /*!< KSO18EN (Bitfield-Mask: 0x01)                         */
#define KBM_CTRL_KSO19EN_Pos              (17UL)                    /*!< KSO19EN (Bit 17)                                      */
#define KBM_CTRL_KSO19EN_Msk              (0x20000UL)               /*!< KSO19EN (Bitfield-Mask: 0x01)                         */
#define KBM_CTRL_INTSTS_Pos               (18UL)                    /*!< INTSTS (Bit 18)                                       */
#define KBM_CTRL_INTSTS_Msk               (0x40000UL)               /*!< INTSTS (Bitfield-Mask: 0x01)                          */
#define KBM_CTRL_DBGEN_Pos                (31UL)                    /*!< DBGEN (Bit 31)                                        */
#define KBM_CTRL_DBGEN_Msk                (0x80000000UL)            /*!< DBGEN (Bitfield-Mask: 0x01)                           */
/* ==========================================================  DBG  ========================================================== */
#define KBM_DBG_EXIT_Pos                  (0UL)                     /*!< EXIT (Bit 0)                                          */
#define KBM_DBG_EXIT_Msk                  (0x1UL)                   /*!< EXIT (Bitfield-Mask: 0x01)                            */
#define KBM_DBG_STEP_Pos                  (2UL)                     /*!< STEP (Bit 2)                                          */
#define KBM_DBG_STEP_Msk                  (0x3cUL)                  /*!< STEP (Bitfield-Mask: 0x0f)                            */
#define KBM_DBG_KSI_Pos                   (8UL)                     /*!< KSI (Bit 8)                                           */
#define KBM_DBG_KSI_Msk                   (0xff00UL)                /*!< KSI (Bitfield-Mask: 0xff)                             */
#define KBM_DBG_INTRFLASHSEL_Pos          (16UL)                    /*!< INTRFLASHSEL (Bit 16)                                 */
#define KBM_DBG_INTRFLASHSEL_Msk          (0x10000UL)               /*!< INTRFLASHSEL (Bitfield-Mask: 0x01)                    */
#define KBM_DBG_EXTFLASH0SEL_Pos          (17UL)                    /*!< EXTFLASH0SEL (Bit 17)                                 */
#define KBM_DBG_EXTFLASH0SEL_Msk          (0x20000UL)               /*!< EXTFLASH0SEL (Bitfield-Mask: 0x01)                    */
#define KBM_DBG_EXTFLASH1SEL_Pos          (18UL)                    /*!< EXTFLASH1SEL (Bit 18)                                 */
#define KBM_DBG_EXTFLASH1SEL_Msk          (0x40000UL)               /*!< EXTFLASH1SEL (Bitfield-Mask: 0x01)                    */
#define KBM_DBG_JTAGSEL_Pos               (19UL)                    /*!< JTAGSEL (Bit 19)                                      */
#define KBM_DBG_JTAGSEL_Msk               (0x80000UL)               /*!< JTAGSEL (Bitfield-Mask: 0x01)                         */
#define KBM_DBG_ESPISEL_Pos               (20UL)                    /*!< ESPISEL (Bit 20)                                      */
#define KBM_DBG_ESPISEL_Msk               (0x100000UL)              /*!< ESPISEL (Bitfield-Mask: 0x01)                         */


/* =========================================================================================================================== */
/* ================                                           UART                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  RBR  ========================================================== */
#define UART_RBR_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0)                                          */
#define UART_RBR_DATA_Msk                 (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
/* ==========================================================  THR  ========================================================== */
#define UART_THR_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0)                                          */
#define UART_THR_DATA_Msk                 (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
/* ==========================================================  DLL  ========================================================== */
#define UART_DLL_DIVL_Pos                 (0UL)                     /*!< DIVL (Bit 0)                                          */
#define UART_DLL_DIVL_Msk                 (0xffUL)                  /*!< DIVL (Bitfield-Mask: 0xff)                            */
/* ==========================================================  DLH  ========================================================== */
#define UART_DLH_DIVH_Pos                 (0UL)                     /*!< DIVH (Bit 0)                                          */
#define UART_DLH_DIVH_Msk                 (0xffUL)                  /*!< DIVH (Bitfield-Mask: 0xff)                            */
/* ==========================================================  IER  ========================================================== */
#define UART_IER_ERBFI_Pos                (0UL)                     /*!< ERBFI (Bit 0)                                         */
#define UART_IER_ERBFI_Msk                (0x1UL)                   /*!< ERBFI (Bitfield-Mask: 0x01)                           */
#define UART_IER_ETBEI_Pos                (1UL)                     /*!< ETBEI (Bit 1)                                         */
#define UART_IER_ETBEI_Msk                (0x2UL)                   /*!< ETBEI (Bitfield-Mask: 0x01)                           */
#define UART_IER_ELSI_Pos                 (2UL)                     /*!< ELSI (Bit 2)                                          */
#define UART_IER_ELSI_Msk                 (0x4UL)                   /*!< ELSI (Bitfield-Mask: 0x01)                            */
#define UART_IER_EDSSI_Pos                (3UL)                     /*!< EDSSI (Bit 3)                                         */
#define UART_IER_EDSSI_Msk                (0x8UL)                   /*!< EDSSI (Bitfield-Mask: 0x01)                           */
#define UART_IER_PTIME_Pos                (7UL)                     /*!< PTIME (Bit 7)                                         */
#define UART_IER_PTIME_Msk                (0x80UL)                  /*!< PTIME (Bitfield-Mask: 0x01)                           */
/* ==========================================================  IIR  ========================================================== */
#define UART_IIR_IID_Pos                  (0UL)                     /*!< IID (Bit 0)                                           */
#define UART_IIR_IID_Msk                  (0xfUL)                   /*!< IID (Bitfield-Mask: 0x0f)                             */
#define UART_IIR_FIFOSE_Pos               (6UL)                     /*!< FIFOSE (Bit 6)                                        */
#define UART_IIR_FIFOSE_Msk               (0xc0UL)                  /*!< FIFOSE (Bitfield-Mask: 0x03)                          */
/* ==========================================================  FCR  ========================================================== */
#define UART_FCR_FIFOE_Pos                (0UL)                     /*!< FIFOE (Bit 0)                                         */
#define UART_FCR_FIFOE_Msk                (0x1UL)                   /*!< FIFOE (Bitfield-Mask: 0x01)                           */
#define UART_FCR_RFIFOR_Pos               (1UL)                     /*!< RFIFOR (Bit 1)                                        */
#define UART_FCR_RFIFOR_Msk               (0x2UL)                   /*!< RFIFOR (Bitfield-Mask: 0x01)                          */
#define UART_FCR_XFIFOR_Pos               (2UL)                     /*!< XFIFOR (Bit 2)                                        */
#define UART_FCR_XFIFOR_Msk               (0x4UL)                   /*!< XFIFOR (Bitfield-Mask: 0x01)                          */
#define UART_FCR_DMAM_Pos                 (3UL)                     /*!< DMAM (Bit 3)                                          */
#define UART_FCR_DMAM_Msk                 (0x8UL)                   /*!< DMAM (Bitfield-Mask: 0x01)                            */
#define UART_FCR_TET_Pos                  (4UL)                     /*!< TET (Bit 4)                                           */
#define UART_FCR_TET_Msk                  (0x30UL)                  /*!< TET (Bitfield-Mask: 0x03)                             */
#define UART_FCR_RCVR_Pos                 (6UL)                     /*!< RCVR (Bit 6)                                          */
#define UART_FCR_RCVR_Msk                 (0xc0UL)                  /*!< RCVR (Bitfield-Mask: 0x03)                            */
/* ==========================================================  LCR  ========================================================== */
#define UART_LCR_DLS_Pos                  (0UL)                     /*!< DLS (Bit 0)                                           */
#define UART_LCR_DLS_Msk                  (0x3UL)                   /*!< DLS (Bitfield-Mask: 0x03)                             */
#define UART_LCR_STOP_Pos                 (2UL)                     /*!< STOP (Bit 2)                                          */
#define UART_LCR_STOP_Msk                 (0x4UL)                   /*!< STOP (Bitfield-Mask: 0x01)                            */
#define UART_LCR_PEN_Pos                  (3UL)                     /*!< PEN (Bit 3)                                           */
#define UART_LCR_PEN_Msk                  (0x8UL)                   /*!< PEN (Bitfield-Mask: 0x01)                             */
#define UART_LCR_EPS_Pos                  (4UL)                     /*!< EPS (Bit 4)                                           */
#define UART_LCR_EPS_Msk                  (0x10UL)                  /*!< EPS (Bitfield-Mask: 0x01)                             */
#define UART_LCR_STP_Pos                  (5UL)                     /*!< STP (Bit 5)                                           */
#define UART_LCR_STP_Msk                  (0x20UL)                  /*!< STP (Bitfield-Mask: 0x01)                             */
#define UART_LCR_BC_Pos                   (6UL)                     /*!< BC (Bit 6)                                            */
#define UART_LCR_BC_Msk                   (0x40UL)                  /*!< BC (Bitfield-Mask: 0x01)                              */
#define UART_LCR_DLAB_Pos                 (7UL)                     /*!< DLAB (Bit 7)                                          */
#define UART_LCR_DLAB_Msk                 (0x80UL)                  /*!< DLAB (Bitfield-Mask: 0x01)                            */
/* ==========================================================  MCR  ========================================================== */
#define UART_MCR_DTR_Pos                  (0UL)                     /*!< DTR (Bit 0)                                           */
#define UART_MCR_DTR_Msk                  (0x1UL)                   /*!< DTR (Bitfield-Mask: 0x01)                             */
#define UART_MCR_RTS_Pos                  (1UL)                     /*!< RTS (Bit 1)                                           */
#define UART_MCR_RTS_Msk                  (0x2UL)                   /*!< RTS (Bitfield-Mask: 0x01)                             */
#define UART_MCR_AFCE_Pos                 (5UL)                     /*!< AFCE (Bit 5)                                          */
#define UART_MCR_AFCE_Msk                 (0x20UL)                  /*!< AFCE (Bitfield-Mask: 0x01)                            */
#define UART_MCR_SIRE_Pos                 (6UL)                     /*!< SIRE (Bit 6)                                          */
#define UART_MCR_SIRE_Msk                 (0x40UL)                  /*!< SIRE (Bitfield-Mask: 0x01)                            */
/* ==========================================================  LSR  ========================================================== */
#define UART_LSR_DR_Pos                   (0UL)                     /*!< DR (Bit 0)                                            */
#define UART_LSR_DR_Msk                   (0x1UL)                   /*!< DR (Bitfield-Mask: 0x01)                              */
#define UART_LSR_OE_Pos                   (1UL)                     /*!< OE (Bit 1)                                            */
#define UART_LSR_OE_Msk                   (0x2UL)                   /*!< OE (Bitfield-Mask: 0x01)                              */
#define UART_LSR_PE_Pos                   (2UL)                     /*!< PE (Bit 2)                                            */
#define UART_LSR_PE_Msk                   (0x4UL)                   /*!< PE (Bitfield-Mask: 0x01)                              */
#define UART_LSR_FE_Pos                   (3UL)                     /*!< FE (Bit 3)                                            */
#define UART_LSR_FE_Msk                   (0x8UL)                   /*!< FE (Bitfield-Mask: 0x01)                              */
#define UART_LSR_BI_Pos                   (4UL)                     /*!< BI (Bit 4)                                            */
#define UART_LSR_BI_Msk                   (0x10UL)                  /*!< BI (Bitfield-Mask: 0x01)                              */
#define UART_LSR_THRE_Pos                 (5UL)                     /*!< THRE (Bit 5)                                          */
#define UART_LSR_THRE_Msk                 (0x20UL)                  /*!< THRE (Bitfield-Mask: 0x01)                            */
#define UART_LSR_TEMT_Pos                 (6UL)                     /*!< TEMT (Bit 6)                                          */
#define UART_LSR_TEMT_Msk                 (0x40UL)                  /*!< TEMT (Bitfield-Mask: 0x01)                            */
#define UART_LSR_RFE_Pos                  (7UL)                     /*!< RFE (Bit 7)                                           */
#define UART_LSR_RFE_Msk                  (0x80UL)                  /*!< RFE (Bitfield-Mask: 0x01)                             */
/* ==========================================================  MSR  ========================================================== */
#define UART_MSR_DCTS_Pos                 (0UL)                     /*!< DCTS (Bit 0)                                          */
#define UART_MSR_DCTS_Msk                 (0x1UL)                   /*!< DCTS (Bitfield-Mask: 0x01)                            */
#define UART_MSR_DDSR_Pos                 (1UL)                     /*!< DDSR (Bit 1)                                          */
#define UART_MSR_DDSR_Msk                 (0x2UL)                   /*!< DDSR (Bitfield-Mask: 0x01)                            */
#define UART_MSR_TERI_Pos                 (2UL)                     /*!< TERI (Bit 2)                                          */
#define UART_MSR_TERI_Msk                 (0x4UL)                   /*!< TERI (Bitfield-Mask: 0x01)                            */
#define UART_MSR_DDCD_Pos                 (3UL)                     /*!< DDCD (Bit 3)                                          */
#define UART_MSR_DDCD_Msk                 (0x8UL)                   /*!< DDCD (Bitfield-Mask: 0x01)                            */
#define UART_MSR_CTS_Pos                  (4UL)                     /*!< CTS (Bit 4)                                           */
#define UART_MSR_CTS_Msk                  (0x10UL)                  /*!< CTS (Bitfield-Mask: 0x01)                             */
#define UART_MSR_DSR_Pos                  (5UL)                     /*!< DSR (Bit 5)                                           */
#define UART_MSR_DSR_Msk                  (0x20UL)                  /*!< DSR (Bitfield-Mask: 0x01)                             */
#define UART_MSR_RI_Pos                   (6UL)                     /*!< RI (Bit 6)                                            */
#define UART_MSR_RI_Msk                   (0x40UL)                  /*!< RI (Bitfield-Mask: 0x01)                              */
#define UART_MSR_DCD_Pos                  (7UL)                     /*!< DCD (Bit 7)                                           */
#define UART_MSR_DCD_Msk                  (0x80UL)                  /*!< DCD (Bitfield-Mask: 0x01)                             */
/* =========================================================  LPDLL  ========================================================= */
/* =========================================================  LPDLH  ========================================================= */
/* =========================================================  SRBR  ========================================================== */
#define UART_SRBR_DATA_Pos                (0UL)                     /*!< DATA (Bit 0)                                          */
#define UART_SRBR_DATA_Msk                (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
/* =========================================================  STHR  ========================================================== */
#define UART_STHR_DATA_Pos                (0UL)                     /*!< DATA (Bit 0)                                          */
#define UART_STHR_DATA_Msk                (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
/* ==========================================================  FAR  ========================================================== */
#define UART_FAR_FAREN_Pos                (0UL)                     /*!< FAREN (Bit 0)                                         */
#define UART_FAR_FAREN_Msk                (0x1UL)                   /*!< FAREN (Bitfield-Mask: 0x01)                           */
/* ==========================================================  TFR  ========================================================== */
#define UART_TFR_DATA_Pos                 (0UL)                     /*!< DATA (Bit 0)                                          */
#define UART_TFR_DATA_Msk                 (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
/* ==========================================================  RFW  ========================================================== */
#define UART_RFW_RFWD_Pos                 (0UL)                     /*!< RFWD (Bit 0)                                          */
#define UART_RFW_RFWD_Msk                 (0xffUL)                  /*!< RFWD (Bitfield-Mask: 0xff)                            */
#define UART_RFW_RFPE_Pos                 (8UL)                     /*!< RFPE (Bit 8)                                          */
#define UART_RFW_RFPE_Msk                 (0x100UL)                 /*!< RFPE (Bitfield-Mask: 0x01)                            */
#define UART_RFW_RFFE_Pos                 (9UL)                     /*!< RFFE (Bit 9)                                          */
#define UART_RFW_RFFE_Msk                 (0x200UL)                 /*!< RFFE (Bitfield-Mask: 0x01)                            */
/* ==========================================================  USR  ========================================================== */
#define UART_USR_BUSY_Pos                 (0UL)                     /*!< BUSY (Bit 0)                                          */
#define UART_USR_BUSY_Msk                 (0x1UL)                   /*!< BUSY (Bitfield-Mask: 0x01)                            */
#define UART_USR_TFNF_Pos                 (1UL)                     /*!< TFNF (Bit 1)                                          */
#define UART_USR_TFNF_Msk                 (0x2UL)                   /*!< TFNF (Bitfield-Mask: 0x01)                            */
#define UART_USR_TFE_Pos                  (2UL)                     /*!< TFE (Bit 2)                                           */
#define UART_USR_TFE_Msk                  (0x4UL)                   /*!< TFE (Bitfield-Mask: 0x01)                             */
#define UART_USR_RFNE_Pos                 (3UL)                     /*!< RFNE (Bit 3)                                          */
#define UART_USR_RFNE_Msk                 (0x8UL)                   /*!< RFNE (Bitfield-Mask: 0x01)                            */
#define UART_USR_RFF_Pos                  (4UL)                     /*!< RFF (Bit 4)                                           */
#define UART_USR_RFF_Msk                  (0x10UL)                  /*!< RFF (Bitfield-Mask: 0x01)                             */
/* ==========================================================  TFL  ========================================================== */
/* ==========================================================  RFL  ========================================================== */
/* ==========================================================  SRR  ========================================================== */
#define UART_SRR_UR_Pos                   (0UL)                     /*!< UR (Bit 0)                                            */
#define UART_SRR_UR_Msk                   (0x1UL)                   /*!< UR (Bitfield-Mask: 0x01)                              */
#define UART_SRR_RFR_Pos                  (1UL)                     /*!< RFR (Bit 1)                                           */
#define UART_SRR_RFR_Msk                  (0x2UL)                   /*!< RFR (Bitfield-Mask: 0x01)                             */
#define UART_SRR_XFR_Pos                  (2UL)                     /*!< XFR (Bit 2)                                           */
#define UART_SRR_XFR_Msk                  (0x4UL)                   /*!< XFR (Bitfield-Mask: 0x01)                             */
/* =========================================================  SRTS  ========================================================== */
#define UART_SRTS_SRTS_Pos                (0UL)                     /*!< SRTS (Bit 0)                                          */
#define UART_SRTS_SRTS_Msk                (0x1UL)                   /*!< SRTS (Bitfield-Mask: 0x01)                            */
/* =========================================================  SBCR  ========================================================== */
#define UART_SBCR_SBCR_Pos                (0UL)                     /*!< SBCR (Bit 0)                                          */
#define UART_SBCR_SBCR_Msk                (0x1UL)                   /*!< SBCR (Bitfield-Mask: 0x01)                            */
/* =========================================================  SDMAM  ========================================================= */
#define UART_SDMAM_SDMAM_Pos              (0UL)                     /*!< SDMAM (Bit 0)                                         */
#define UART_SDMAM_SDMAM_Msk              (0x1UL)                   /*!< SDMAM (Bitfield-Mask: 0x01)                           */
/* ==========================================================  SFE  ========================================================== */
#define UART_SFE_SFE_Pos                  (0UL)                     /*!< SFE (Bit 0)                                           */
#define UART_SFE_SFE_Msk                  (0x1UL)                   /*!< SFE (Bitfield-Mask: 0x01)                             */
/* ==========================================================  SRT  ========================================================== */
#define UART_SRT_SRT_Pos                  (0UL)                     /*!< SRT (Bit 0)                                           */
#define UART_SRT_SRT_Msk                  (0x3UL)                   /*!< SRT (Bitfield-Mask: 0x03)                             */
/* =========================================================  STET  ========================================================== */
#define UART_STET_SRT_Pos                 (0UL)                     /*!< SRT (Bit 0)                                           */
#define UART_STET_SRT_Msk                 (0x3UL)                   /*!< SRT (Bitfield-Mask: 0x03)                             */
/* ==========================================================  HTX  ========================================================== */
#define UART_HTX_HALTTX_Pos               (0UL)                     /*!< HALTTX (Bit 0)                                        */
#define UART_HTX_HALTTX_Msk               (0x1UL)                   /*!< HALTTX (Bitfield-Mask: 0x01)                          */
/* =========================================================  DMASA  ========================================================= */
#define UART_DMASA_ACK_Pos                (0UL)                     /*!< ACK (Bit 0)                                           */
#define UART_DMASA_ACK_Msk                (0x1UL)                   /*!< ACK (Bitfield-Mask: 0x01)                             */


/* =========================================================================================================================== */
/* ================                                           SPIC                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL0  ========================================================= */
#define SPIC_CTRL0_SIPOL_Pos              (0UL)                     /*!< SIPOL (Bit 0)                                         */
#define SPIC_CTRL0_SIPOL_Msk              (0x1fUL)                  /*!< SIPOL (Bitfield-Mask: 0x1f)                           */
#define SPIC_CTRL0_SIPOLEN_Pos            (5UL)                     /*!< SIPOLEN (Bit 5)                                       */
#define SPIC_CTRL0_SIPOLEN_Msk            (0x20UL)                  /*!< SIPOLEN (Bitfield-Mask: 0x01)                         */
#define SPIC_CTRL0_SCPH_Pos               (6UL)                     /*!< SCPH (Bit 6)                                          */
#define SPIC_CTRL0_SCPH_Msk               (0x40UL)                  /*!< SCPH (Bitfield-Mask: 0x01)                            */
#define SPIC_CTRL0_SCPOL_Pos              (7UL)                     /*!< SCPOL (Bit 7)                                         */
#define SPIC_CTRL0_SCPOL_Msk              (0x80UL)                  /*!< SCPOL (Bitfield-Mask: 0x01)                           */
#define SPIC_CTRL0_TMOD_Pos               (8UL)                     /*!< TMOD (Bit 8)                                          */
#define SPIC_CTRL0_TMOD_Msk               (0x300UL)                 /*!< TMOD (Bitfield-Mask: 0x03)                            */
#define SPIC_CTRL0_GCLKDIS_Pos            (10UL)                    /*!< GCLKDIS (Bit 10)                                      */
#define SPIC_CTRL0_GCLKDIS_Msk            (0x400UL)                 /*!< GCLKDIS (Bitfield-Mask: 0x01)                         */
#define SPIC_CTRL0_DDREN_Pos              (13UL)                    /*!< DDREN (Bit 13)                                        */
#define SPIC_CTRL0_DDREN_Msk              (0xe000UL)                /*!< DDREN (Bitfield-Mask: 0x07)                           */
#define SPIC_CTRL0_ADDRCH_Pos             (16UL)                    /*!< ADDRCH (Bit 16)                                       */
#define SPIC_CTRL0_ADDRCH_Msk             (0x30000UL)               /*!< ADDRCH (Bitfield-Mask: 0x03)                          */
#define SPIC_CTRL0_DATACH_Pos             (18UL)                    /*!< DATACH (Bit 18)                                       */
#define SPIC_CTRL0_DATACH_Msk             (0xc0000UL)               /*!< DATACH (Bitfield-Mask: 0x03)                          */
#define SPIC_CTRL0_CMDCH_Pos              (20UL)                    /*!< CMDCH (Bit 20)                                        */
#define SPIC_CTRL0_CMDCH_Msk              (0x300000UL)              /*!< CMDCH (Bitfield-Mask: 0x03)                           */
#define SPIC_CTRL0_FASTRD_Pos             (22UL)                    /*!< FASTRD (Bit 22)                                       */
#define SPIC_CTRL0_FASTRD_Msk             (0x400000UL)              /*!< FASTRD (Bitfield-Mask: 0x01)                          */
#define SPIC_CTRL0_CKMTIMES_Pos           (23UL)                    /*!< CKMTIMES (Bit 23)                                     */
#define SPIC_CTRL0_CKMTIMES_Msk           (0xf800000UL)             /*!< CKMTIMES (Bitfield-Mask: 0x1f)                        */
#define SPIC_CTRL0_UAR_Pos                (30UL)                    /*!< UAR (Bit 30)                                          */
#define SPIC_CTRL0_UAR_Msk                (0x40000000UL)            /*!< UAR (Bitfield-Mask: 0x01)                             */
#define SPIC_CTRL0_USERMODE_Pos           (31UL)                    /*!< USERMODE (Bit 31)                                     */
#define SPIC_CTRL0_USERMODE_Msk           (0x80000000UL)            /*!< USERMODE (Bitfield-Mask: 0x01)                        */
/* =========================================================  RXNDF  ========================================================= */
#define SPIC_RXNDF_RXNDF_Pos              (0UL)                     /*!< RXNDF (Bit 0)                                         */
#define SPIC_RXNDF_RXNDF_Msk              (0xffffffUL)              /*!< RXNDF (Bitfield-Mask: 0xffffff)                       */
/* ========================================================  SSIENR  ========================================================= */
#define SPIC_SSIENR_SPICEN_Pos            (0UL)                     /*!< SPICEN (Bit 0)                                        */
#define SPIC_SSIENR_SPICEN_Msk            (0x1UL)                   /*!< SPICEN (Bitfield-Mask: 0x01)                          */
#define SPIC_SSIENR_ATCKCMD_Pos           (1UL)                     /*!< ATCKCMD (Bit 1)                                       */
#define SPIC_SSIENR_ATCKCMD_Msk           (0x2UL)                   /*!< ATCKCMD (Bitfield-Mask: 0x01)                         */
#define SPIC_SSIENR_FRQC_Pos              (2UL)                     /*!< FRQC (Bit 2)                                          */
#define SPIC_SSIENR_FRQC_Msk              (0x4UL)                   /*!< FRQC (Bitfield-Mask: 0x01)                            */
#define SPIC_SSIENR_PGMRSTTESTEN_Pos      (4UL)                     /*!< PGMRSTTESTEN (Bit 4)                                  */
#define SPIC_SSIENR_PGMRSTTESTEN_Msk      (0x10UL)                  /*!< PGMRSTTESTEN (Bitfield-Mask: 0x01)                    */
#define SPIC_SSIENR_GPNUM_Pos             (8UL)                     /*!< GPNUM (Bit 8)                                         */
#define SPIC_SSIENR_GPNUM_Msk             (0x300UL)                 /*!< GPNUM (Bitfield-Mask: 0x03)                           */
#define SPIC_SSIENR_CURGP_Pos             (10UL)                    /*!< CURGP (Bit 10)                                        */
#define SPIC_SSIENR_CURGP_Msk             (0xc00UL)                 /*!< CURGP (Bitfield-Mask: 0x03)                           */
/* ==========================================================  SER  ========================================================== */
#define SPIC_SER_SLVNUM_Pos               (0UL)                     /*!< SLVNUM (Bit 0)                                        */
#define SPIC_SER_SLVNUM_Msk               (0x1UL)                   /*!< SLVNUM (Bitfield-Mask: 0x01)                          */
/* =========================================================  BAUDR  ========================================================= */
#define SPIC_BAUDR_SCKDV_Pos              (0UL)                     /*!< SCKDV (Bit 0)                                         */
#define SPIC_BAUDR_SCKDV_Msk              (0xfffUL)                 /*!< SCKDV (Bitfield-Mask: 0xfff)                          */
/* ========================================================  TXFTLR  ========================================================= */
/* ========================================================  RXFTLR  ========================================================= */
/* =========================================================  TXFLR  ========================================================= */
/* =========================================================  RXFLR  ========================================================= */
/* ==========================================================  SR  =========================================================== */
#define SPIC_SR_BUSY_Pos                  (0UL)                     /*!< BUSY (Bit 0)                                          */
#define SPIC_SR_BUSY_Msk                  (0x1UL)                   /*!< BUSY (Bitfield-Mask: 0x01)                            */
#define SPIC_SR_TFNF_Pos                  (1UL)                     /*!< TFNF (Bit 1)                                          */
#define SPIC_SR_TFNF_Msk                  (0x2UL)                   /*!< TFNF (Bitfield-Mask: 0x01)                            */
#define SPIC_SR_TFE_Pos                   (2UL)                     /*!< TFE (Bit 2)                                           */
#define SPIC_SR_TFE_Msk                   (0x4UL)                   /*!< TFE (Bitfield-Mask: 0x01)                             */
#define SPIC_SR_RFNE_Pos                  (3UL)                     /*!< RFNE (Bit 3)                                          */
#define SPIC_SR_RFNE_Msk                  (0x8UL)                   /*!< RFNE (Bitfield-Mask: 0x01)                            */
#define SPIC_SR_RFF_Pos                   (4UL)                     /*!< RFF (Bit 4)                                           */
#define SPIC_SR_RFF_Msk                   (0x10UL)                  /*!< RFF (Bitfield-Mask: 0x01)                             */
#define SPIC_SR_TXE_Pos                   (5UL)                     /*!< TXE (Bit 5)                                           */
#define SPIC_SR_TXE_Msk                   (0x20UL)                  /*!< TXE (Bitfield-Mask: 0x01)                             */
#define SPIC_SR_DCOL_Pos                  (6UL)                     /*!< DCOL (Bit 6)                                          */
#define SPIC_SR_DCOL_Msk                  (0x40UL)                  /*!< DCOL (Bitfield-Mask: 0x01)                            */
#define SPIC_SR_BOOTFIN_Pos               (7UL)                     /*!< BOOTFIN (Bit 7)                                       */
#define SPIC_SR_BOOTFIN_Msk               (0x80UL)                  /*!< BOOTFIN (Bitfield-Mask: 0x01)                         */
/* ==========================================================  IMR  ========================================================== */
#define SPIC_IMR_TXEIM_Pos                (0UL)                     /*!< TXEIM (Bit 0)                                         */
#define SPIC_IMR_TXEIM_Msk                (0x1UL)                   /*!< TXEIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_TXOIM_Pos                (1UL)                     /*!< TXOIM (Bit 1)                                         */
#define SPIC_IMR_TXOIM_Msk                (0x2UL)                   /*!< TXOIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_RXUIM_Pos                (2UL)                     /*!< RXUIM (Bit 2)                                         */
#define SPIC_IMR_RXUIM_Msk                (0x4UL)                   /*!< RXUIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_RXOIM_Pos                (3UL)                     /*!< RXOIM (Bit 3)                                         */
#define SPIC_IMR_RXOIM_Msk                (0x8UL)                   /*!< RXOIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_RXFIM_Pos                (4UL)                     /*!< RXFIM (Bit 4)                                         */
#define SPIC_IMR_RXFIM_Msk                (0x10UL)                  /*!< RXFIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_FSEIM_Pos                (5UL)                     /*!< FSEIM (Bit 5)                                         */
#define SPIC_IMR_FSEIM_Msk                (0x20UL)                  /*!< FSEIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_WBEIM_Pos                (6UL)                     /*!< WBEIM (Bit 6)                                         */
#define SPIC_IMR_WBEIM_Msk                (0x40UL)                  /*!< WBEIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_BYEIM_Pos                (7UL)                     /*!< BYEIM (Bit 7)                                         */
#define SPIC_IMR_BYEIM_Msk                (0x80UL)                  /*!< BYEIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_ACEIM_Pos                (8UL)                     /*!< ACEIM (Bit 8)                                         */
#define SPIC_IMR_ACEIM_Msk                (0x100UL)                 /*!< ACEIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_USSIM_Pos                (9UL)                     /*!< USSIM (Bit 9)                                         */
#define SPIC_IMR_USSIM_Msk                (0x200UL)                 /*!< USSIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_TFSIM_Pos                (10UL)                    /*!< TFSIM (Bit 10)                                        */
#define SPIC_IMR_TFSIM_Msk                (0x400UL)                 /*!< TFSIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_ACSIM_Pos                (11UL)                    /*!< ACSIM (Bit 11)                                        */
#define SPIC_IMR_ACSIM_Msk                (0x800UL)                 /*!< ACSIM (Bitfield-Mask: 0x01)                           */
#define SPIC_IMR_DREIM_Pos                (12UL)                    /*!< DREIM (Bit 12)                                        */
#define SPIC_IMR_DREIM_Msk                (0x1000UL)                /*!< DREIM (Bitfield-Mask: 0x01)                           */
/* ==========================================================  ISR  ========================================================== */
#define SPIC_ISR_TXEIS_Pos                (0UL)                     /*!< TXEIS (Bit 0)                                         */
#define SPIC_ISR_TXEIS_Msk                (0x1UL)                   /*!< TXEIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_TXOIS_Pos                (1UL)                     /*!< TXOIS (Bit 1)                                         */
#define SPIC_ISR_TXOIS_Msk                (0x2UL)                   /*!< TXOIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_RXUIS_Pos                (2UL)                     /*!< RXUIS (Bit 2)                                         */
#define SPIC_ISR_RXUIS_Msk                (0x4UL)                   /*!< RXUIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_RXOIS_Pos                (3UL)                     /*!< RXOIS (Bit 3)                                         */
#define SPIC_ISR_RXOIS_Msk                (0x8UL)                   /*!< RXOIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_RXFIS_Pos                (4UL)                     /*!< RXFIS (Bit 4)                                         */
#define SPIC_ISR_RXFIS_Msk                (0x10UL)                  /*!< RXFIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_FSEIS_Pos                (5UL)                     /*!< FSEIS (Bit 5)                                         */
#define SPIC_ISR_FSEIS_Msk                (0x20UL)                  /*!< FSEIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_WBEIS_Pos                (6UL)                     /*!< WBEIS (Bit 6)                                         */
#define SPIC_ISR_WBEIS_Msk                (0x40UL)                  /*!< WBEIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_BYEIS_Pos                (7UL)                     /*!< BYEIS (Bit 7)                                         */
#define SPIC_ISR_BYEIS_Msk                (0x80UL)                  /*!< BYEIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_ACEIS_Pos                (8UL)                     /*!< ACEIS (Bit 8)                                         */
#define SPIC_ISR_ACEIS_Msk                (0x100UL)                 /*!< ACEIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_USEIS_Pos                (9UL)                     /*!< USEIS (Bit 9)                                         */
#define SPIC_ISR_USEIS_Msk                (0x200UL)                 /*!< USEIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_TFSIS_Pos                (10UL)                    /*!< TFSIS (Bit 10)                                        */
#define SPIC_ISR_TFSIS_Msk                (0x400UL)                 /*!< TFSIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_ACSIS_Pos                (11UL)                    /*!< ACSIS (Bit 11)                                        */
#define SPIC_ISR_ACSIS_Msk                (0x800UL)                 /*!< ACSIS (Bitfield-Mask: 0x01)                           */
#define SPIC_ISR_DREIS_Pos                (12UL)                    /*!< DREIS (Bit 12)                                        */
#define SPIC_ISR_DREIS_Msk                (0x1000UL)                /*!< DREIS (Bitfield-Mask: 0x01)                           */
/* =========================================================  RISR  ========================================================== */
#define SPIC_RISR_TXEIR_Pos               (0UL)                     /*!< TXEIR (Bit 0)                                         */
#define SPIC_RISR_TXEIR_Msk               (0x1UL)                   /*!< TXEIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_TXOIR_Pos               (1UL)                     /*!< TXOIR (Bit 1)                                         */
#define SPIC_RISR_TXOIR_Msk               (0x2UL)                   /*!< TXOIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_RXUIR_Pos               (2UL)                     /*!< RXUIR (Bit 2)                                         */
#define SPIC_RISR_RXUIR_Msk               (0x4UL)                   /*!< RXUIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_RXOIR_Pos               (3UL)                     /*!< RXOIR (Bit 3)                                         */
#define SPIC_RISR_RXOIR_Msk               (0x8UL)                   /*!< RXOIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_RXFIR_Pos               (4UL)                     /*!< RXFIR (Bit 4)                                         */
#define SPIC_RISR_RXFIR_Msk               (0x10UL)                  /*!< RXFIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_FSEIR_Pos               (5UL)                     /*!< FSEIR (Bit 5)                                         */
#define SPIC_RISR_FSEIR_Msk               (0x20UL)                  /*!< FSEIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_WBEIR_Pos               (6UL)                     /*!< WBEIR (Bit 6)                                         */
#define SPIC_RISR_WBEIR_Msk               (0x40UL)                  /*!< WBEIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_BYEIR_Pos               (7UL)                     /*!< BYEIR (Bit 7)                                         */
#define SPIC_RISR_BYEIR_Msk               (0x80UL)                  /*!< BYEIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_ACEIR_Pos               (8UL)                     /*!< ACEIR (Bit 8)                                         */
#define SPIC_RISR_ACEIR_Msk               (0x100UL)                 /*!< ACEIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_USEIR_Pos               (9UL)                     /*!< USEIR (Bit 9)                                         */
#define SPIC_RISR_USEIR_Msk               (0x200UL)                 /*!< USEIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_TFSIR_Pos               (10UL)                    /*!< TFSIR (Bit 10)                                        */
#define SPIC_RISR_TFSIR_Msk               (0x400UL)                 /*!< TFSIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_ACSIR_Pos               (11UL)                    /*!< ACSIR (Bit 11)                                        */
#define SPIC_RISR_ACSIR_Msk               (0x800UL)                 /*!< ACSIR (Bitfield-Mask: 0x01)                           */
#define SPIC_RISR_DREIR_Pos               (12UL)                    /*!< DREIR (Bit 12)                                        */
#define SPIC_RISR_DREIR_Msk               (0x1000UL)                /*!< DREIR (Bitfield-Mask: 0x01)                           */
/* ========================================================  TXOICR  ========================================================= */
/* ========================================================  RXOICR  ========================================================= */
/* ========================================================  RXUICR  ========================================================= */
/* ========================================================  MSTICR  ========================================================= */
/* ==========================================================  ICR  ========================================================== */
/* =========================================================  DMACR  ========================================================= */
#define SPIC_DMACR_RXDMACEN_Pos           (0UL)                     /*!< RXDMACEN (Bit 0)                                      */
#define SPIC_DMACR_RXDMACEN_Msk           (0x1UL)                   /*!< RXDMACEN (Bitfield-Mask: 0x01)                        */
#define SPIC_DMACR_TXDMACEN_Pos           (1UL)                     /*!< TXDMACEN (Bit 1)                                      */
#define SPIC_DMACR_TXDMACEN_Msk           (0x2UL)                   /*!< TXDMACEN (Bitfield-Mask: 0x01)                        */
/* ========================================================  DMATDLR  ======================================================== */
/* ========================================================  DMARDLR  ======================================================== */
/* ==========================================================  IDR  ========================================================== */
/* ========================================================  VERSION  ======================================================== */
/* ========================================================  BYTE_DR  ======================================================== */
/* ========================================================  HALF_DR  ======================================================== */
/* ========================================================  WORD_DR  ======================================================== */
/* =========================================================  DMDR  ========================================================== */
/* ====================================================  READFASTSINGLE  ===================================================== */
#define SPIC_READFASTSINGLE_FIRBYTE_Pos   (0UL)                     /*!< FIRBYTE (Bit 0)                                       */
#define SPIC_READFASTSINGLE_FIRBYTE_Msk   (0xffUL)                  /*!< FIRBYTE (Bitfield-Mask: 0xff)                         */
#define SPIC_READFASTSINGLE_SECBYTE_Pos   (8UL)                     /*!< SECBYTE (Bit 8)                                       */
#define SPIC_READFASTSINGLE_SECBYTE_Msk   (0xff00UL)                /*!< SECBYTE (Bitfield-Mask: 0xff)                         */
/* =====================================================  READDUALDATA  ====================================================== */
#define SPIC_READDUALDATA_CMD_Pos         (0UL)                     /*!< CMD (Bit 0)                                           */
#define SPIC_READDUALDATA_CMD_Msk         (0xffUL)                  /*!< CMD (Bitfield-Mask: 0xff)                             */
/* ===================================================  READDUALADDRDATA  ==================================================== */
#define SPIC_READDUALADDRDATA_CMD_Pos     (0UL)                     /*!< CMD (Bit 0)                                           */
#define SPIC_READDUALADDRDATA_CMD_Msk     (0xffUL)                  /*!< CMD (Bitfield-Mask: 0xff)                             */
/* =====================================================  READQUADDATA  ====================================================== */
#define SPIC_READQUADDATA_CMD_Pos         (0UL)                     /*!< CMD (Bit 0)                                           */
#define SPIC_READQUADDATA_CMD_Msk         (0xffUL)                  /*!< CMD (Bitfield-Mask: 0xff)                             */
/* ===================================================  READQUADADDRDATA  ==================================================== */
#define SPIC_READQUADADDRDATA_CMD_Pos     (0UL)                     /*!< CMD (Bit 0)                                           */
#define SPIC_READQUADADDRDATA_CMD_Msk     (0xffUL)                  /*!< CMD (Bitfield-Mask: 0xff)                             */
#define SPIC_READQUADADDRDATA_PRM_Pos     (16UL)                    /*!< PRM (Bit 16)                                          */
#define SPIC_READQUADADDRDATA_PRM_Msk     (0xff0000UL)              /*!< PRM (Bitfield-Mask: 0xff)                             */
/* ======================================================  WRITESIGNLE  ====================================================== */
#define SPIC_WRITESIGNLE_FIRBYTE_Pos      (0UL)                     /*!< FIRBYTE (Bit 0)                                       */
#define SPIC_WRITESIGNLE_FIRBYTE_Msk      (0xffUL)                  /*!< FIRBYTE (Bitfield-Mask: 0xff)                         */
#define SPIC_WRITESIGNLE_SECBYTE_Pos      (8UL)                     /*!< SECBYTE (Bit 8)                                       */
#define SPIC_WRITESIGNLE_SECBYTE_Msk      (0xff00UL)                /*!< SECBYTE (Bitfield-Mask: 0xff)                         */
/* =====================================================  WRITEDUALDATA  ===================================================== */
#define SPIC_WRITEDUALDATA_CMD_Pos        (0UL)                     /*!< CMD (Bit 0)                                           */
#define SPIC_WRITEDUALDATA_CMD_Msk        (0xffUL)                  /*!< CMD (Bitfield-Mask: 0xff)                             */
/* ===================================================  WRITEDUALADDRDATA  =================================================== */
#define SPIC_WRITEDUALADDRDATA_CMD_Pos    (0UL)                     /*!< CMD (Bit 0)                                           */
#define SPIC_WRITEDUALADDRDATA_CMD_Msk    (0xffUL)                  /*!< CMD (Bitfield-Mask: 0xff)                             */
/* =====================================================  WRITEQUADDATA  ===================================================== */
#define SPIC_WRITEQUADDATA_CMD_Pos        (0UL)                     /*!< CMD (Bit 0)                                           */
#define SPIC_WRITEQUADDATA_CMD_Msk        (0xffUL)                  /*!< CMD (Bitfield-Mask: 0xff)                             */
/* ===================================================  WRITEQUADADDRDATA  =================================================== */
#define SPIC_WRITEQUADADDRDATA_CMD_Pos    (0UL)                     /*!< CMD (Bit 0)                                           */
#define SPIC_WRITEQUADADDRDATA_CMD_Msk    (0xffUL)                  /*!< CMD (Bitfield-Mask: 0xff)                             */
/* ======================================================  WRITEENABLE  ====================================================== */
#define SPIC_WRITEENABLE_FIRBYTE_Pos      (0UL)                     /*!< FIRBYTE (Bit 0)                                       */
#define SPIC_WRITEENABLE_FIRBYTE_Msk      (0xffUL)                  /*!< FIRBYTE (Bitfield-Mask: 0xff)                         */
#define SPIC_WRITEENABLE_SECBYTE_Pos      (8UL)                     /*!< SECBYTE (Bit 8)                                       */
#define SPIC_WRITEENABLE_SECBYTE_Msk      (0xff00UL)                /*!< SECBYTE (Bitfield-Mask: 0xff)                         */
/* ======================================================  READSTATUS  ======================================================= */
#define SPIC_READSTATUS_FIRBYTE_Pos       (0UL)                     /*!< FIRBYTE (Bit 0)                                       */
#define SPIC_READSTATUS_FIRBYTE_Msk       (0xffUL)                  /*!< FIRBYTE (Bitfield-Mask: 0xff)                         */
#define SPIC_READSTATUS_SECBYTE_Pos       (8UL)                     /*!< SECBYTE (Bit 8)                                       */
#define SPIC_READSTATUS_SECBYTE_Msk       (0xff00UL)                /*!< SECBYTE (Bitfield-Mask: 0xff)                         */
#define SPIC_READSTATUS_INTERVALEN_Pos    (27UL)                    /*!< INTERVALEN (Bit 27)                                   */
#define SPIC_READSTATUS_INTERVALEN_Msk    (0x8000000UL)             /*!< INTERVALEN (Bitfield-Mask: 0x01)                      */
#define SPIC_READSTATUS_ADDRSEL_Pos       (28UL)                    /*!< ADDRSEL (Bit 28)                                      */
#define SPIC_READSTATUS_ADDRSEL_Msk       (0x10000000UL)            /*!< ADDRSEL (Bitfield-Mask: 0x01)                         */
#define SPIC_READSTATUS_ADDRLEN_Pos       (29UL)                    /*!< ADDRLEN (Bit 29)                                      */
#define SPIC_READSTATUS_ADDRLEN_Msk       (0x60000000UL)            /*!< ADDRLEN (Bitfield-Mask: 0x03)                         */
#define SPIC_READSTATUS_ADDREN_Pos        (31UL)                    /*!< ADDREN (Bit 31)                                       */
#define SPIC_READSTATUS_ADDREN_Msk        (0x80000000UL)            /*!< ADDREN (Bitfield-Mask: 0x01)                          */
/* =========================================================  CTRL1  ========================================================= */
#define SPIC_CTRL1_SODNUM_Pos             (0UL)                     /*!< SODNUM (Bit 0)                                        */
#define SPIC_CTRL1_SODNUM_Msk             (0x1UL)                   /*!< SODNUM (Bitfield-Mask: 0x01)                          */
#define SPIC_CTRL1_WPNSET_Pos             (1UL)                     /*!< WPNSET (Bit 1)                                        */
#define SPIC_CTRL1_WPNSET_Msk             (0x2UL)                   /*!< WPNSET (Bitfield-Mask: 0x01)                          */
#define SPIC_CTRL1_WPNDNUM_Pos            (2UL)                     /*!< WPNDNUM (Bit 2)                                       */
#define SPIC_CTRL1_WPNDNUM_Msk            (0x4UL)                   /*!< WPNDNUM (Bitfield-Mask: 0x01)                         */
#define SPIC_CTRL1_DRFIXED_Pos            (3UL)                     /*!< DRFIXED (Bit 3)                                       */
#define SPIC_CTRL1_DRFIXED_Msk            (0x8UL)                   /*!< DRFIXED (Bitfield-Mask: 0x01)                         */
#define SPIC_CTRL1_TXFIFOENTRY_Pos        (4UL)                     /*!< TXFIFOENTRY (Bit 4)                                   */
#define SPIC_CTRL1_TXFIFOENTRY_Msk        (0xf0UL)                  /*!< TXFIFOENTRY (Bitfield-Mask: 0x0f)                     */
#define SPIC_CTRL1_RXFIFOENTRY_Pos        (8UL)                     /*!< RXFIFOENTRY (Bit 8)                                   */
#define SPIC_CTRL1_RXFIFOENTRY_Msk        (0xf00UL)                 /*!< RXFIFOENTRY (Bitfield-Mask: 0x0f)                     */
#define SPIC_CTRL1_DMACT_Pos              (12UL)                    /*!< DMACT (Bit 12)                                        */
#define SPIC_CTRL1_DMACT_Msk              (0x1000UL)                /*!< DMACT (Bitfield-Mask: 0x01)                           */
#define SPIC_CTRL1_FULLWR_Pos             (13UL)                    /*!< FULLWR (Bit 13)                                       */
#define SPIC_CTRL1_FULLWR_Msk             (0x2000UL)                /*!< FULLWR (Bitfield-Mask: 0x01)                          */
#define SPIC_CTRL1_DISDMCA_Pos            (14UL)                    /*!< DISDMCA (Bit 14)                                      */
#define SPIC_CTRL1_DISDMCA_Msk            (0x4000UL)                /*!< DISDMCA (Bitfield-Mask: 0x01)                         */
#define SPIC_CTRL1_DISWRAPALIGN_Pos       (15UL)                    /*!< DISWRAPALIGN (Bit 15)                                 */
#define SPIC_CTRL1_DISWRAPALIGN_Msk       (0x8000UL)                /*!< DISWRAPALIGN (Bitfield-Mask: 0x01)                    */
#define SPIC_CTRL1_RDVALIDEN_Pos          (16UL)                    /*!< RDVALIDEN (Bit 16)                                    */
#define SPIC_CTRL1_RDVALIDEN_Msk          (0x10000UL)               /*!< RDVALIDEN (Bitfield-Mask: 0x01)                       */
#define SPIC_CTRL1_WRVLEN_Pos             (17UL)                    /*!< WRVLEN (Bit 17)                                       */
#define SPIC_CTRL1_WRVLEN_Msk             (0x20000UL)               /*!< WRVLEN (Bitfield-Mask: 0x01)                          */
#define SPIC_CTRL1_RDWEIGHT_Pos           (19UL)                    /*!< RDWEIGHT (Bit 19)                                     */
#define SPIC_CTRL1_RDWEIGHT_Msk           (0xf80000UL)              /*!< RDWEIGHT (Bitfield-Mask: 0x1f)                        */
/* ========================================================  FBAUDR  ========================================================= */
#define SPIC_FBAUDR_FSCKDV_Pos            (0UL)                     /*!< FSCKDV (Bit 0)                                        */
#define SPIC_FBAUDR_FSCKDV_Msk            (0xfffUL)                 /*!< FSCKDV (Bitfield-Mask: 0xfff)                         */
/* ======================================================  USERLENGTH  ======================================================= */
#define SPIC_USERLENGTH_RDDUMMYLEN_Pos    (0UL)                     /*!< RDDUMMYLEN (Bit 0)                                    */
#define SPIC_USERLENGTH_RDDUMMYLEN_Msk    (0xfffUL)                 /*!< RDDUMMYLEN (Bitfield-Mask: 0xfff)                     */
#define SPIC_USERLENGTH_CMDLEN_Pos        (12UL)                    /*!< CMDLEN (Bit 12)                                       */
#define SPIC_USERLENGTH_CMDLEN_Msk        (0x3000UL)                /*!< CMDLEN (Bitfield-Mask: 0x03)                          */
#define SPIC_USERLENGTH_ADDRLEN_Pos       (16UL)                    /*!< ADDRLEN (Bit 16)                                      */
#define SPIC_USERLENGTH_ADDRLEN_Msk       (0xf0000UL)               /*!< ADDRLEN (Bitfield-Mask: 0x0f)                         */
/* ======================================================  AUTOLENGTH  ======================================================= */
#define SPIC_AUTOLENGTH_RDDUMMYLEN_Pos    (0UL)                     /*!< RDDUMMYLEN (Bit 0)                                    */
#define SPIC_AUTOLENGTH_RDDUMMYLEN_Msk    (0xfffUL)                 /*!< RDDUMMYLEN (Bitfield-Mask: 0xfff)                     */
#define SPIC_AUTOLENGTH_INPHYSICALCYC_Pos (12UL)                    /*!< INPHYSICALCYC (Bit 12)                                */
#define SPIC_AUTOLENGTH_INPHYSICALCYC_Msk (0xf000UL)                /*!< INPHYSICALCYC (Bitfield-Mask: 0x0f)                   */
#define SPIC_AUTOLENGTH_AUTOADDRLEN_Pos   (16UL)                    /*!< AUTOADDRLEN (Bit 16)                                  */
#define SPIC_AUTOLENGTH_AUTOADDRLEN_Msk   (0xf0000UL)               /*!< AUTOADDRLEN (Bitfield-Mask: 0x0f)                     */
#define SPIC_AUTOLENGTH_RDSRDUMMYLEN_Pos  (20UL)                    /*!< RDSRDUMMYLEN (Bit 20)                                 */
#define SPIC_AUTOLENGTH_RDSRDUMMYLEN_Msk  (0xff00000UL)             /*!< RDSRDUMMYLEN (Bitfield-Mask: 0xff)                    */
/* =======================================================  VALIDCMD  ======================================================== */
#define SPIC_VALIDCMD_FRDSINGLE_Pos       (0UL)                     /*!< FRDSINGLE (Bit 0)                                     */
#define SPIC_VALIDCMD_FRDSINGLE_Msk       (0x1UL)                   /*!< FRDSINGLE (Bitfield-Mask: 0x01)                       */
#define SPIC_VALIDCMD_RDDUALI_Pos         (1UL)                     /*!< RDDUALI (Bit 1)                                       */
#define SPIC_VALIDCMD_RDDUALI_Msk         (0x2UL)                   /*!< RDDUALI (Bitfield-Mask: 0x01)                         */
#define SPIC_VALIDCMD_RDDUALIO_Pos        (2UL)                     /*!< RDDUALIO (Bit 2)                                      */
#define SPIC_VALIDCMD_RDDUALIO_Msk        (0x4UL)                   /*!< RDDUALIO (Bitfield-Mask: 0x01)                        */
#define SPIC_VALIDCMD_RDQUADO_Pos         (3UL)                     /*!< RDQUADO (Bit 3)                                       */
#define SPIC_VALIDCMD_RDQUADO_Msk         (0x8UL)                   /*!< RDQUADO (Bitfield-Mask: 0x01)                         */
#define SPIC_VALIDCMD_RDQUADIO_Pos        (4UL)                     /*!< RDQUADIO (Bit 4)                                      */
#define SPIC_VALIDCMD_RDQUADIO_Msk        (0x10UL)                  /*!< RDQUADIO (Bitfield-Mask: 0x01)                        */
#define SPIC_VALIDCMD_WRDUALI_Pos         (5UL)                     /*!< WRDUALI (Bit 5)                                       */
#define SPIC_VALIDCMD_WRDUALI_Msk         (0x20UL)                  /*!< WRDUALI (Bitfield-Mask: 0x01)                         */
#define SPIC_VALIDCMD_WRDUALIO_Pos        (6UL)                     /*!< WRDUALIO (Bit 6)                                      */
#define SPIC_VALIDCMD_WRDUALIO_Msk        (0x40UL)                  /*!< WRDUALIO (Bitfield-Mask: 0x01)                        */
#define SPIC_VALIDCMD_WRQUADO_Pos         (7UL)                     /*!< WRQUADO (Bit 7)                                       */
#define SPIC_VALIDCMD_WRQUADO_Msk         (0x80UL)                  /*!< WRQUADO (Bitfield-Mask: 0x01)                         */
#define SPIC_VALIDCMD_WRQUADIO_Pos        (8UL)                     /*!< WRQUADIO (Bit 8)                                      */
#define SPIC_VALIDCMD_WRQUADIO_Msk        (0x100UL)                 /*!< WRQUADIO (Bitfield-Mask: 0x01)                        */
#define SPIC_VALIDCMD_WRBLOCK_Pos         (9UL)                     /*!< WRBLOCK (Bit 9)                                       */
#define SPIC_VALIDCMD_WRBLOCK_Msk         (0x200UL)                 /*!< WRBLOCK (Bitfield-Mask: 0x01)                         */
#define SPIC_VALIDCMD_PRMEN_Pos           (11UL)                    /*!< PRMEN (Bit 11)                                        */
#define SPIC_VALIDCMD_PRMEN_Msk           (0x800UL)                 /*!< PRMEN (Bitfield-Mask: 0x01)                           */
#define SPIC_VALIDCMD_CTRLR0CH_Pos        (12UL)                    /*!< CTRLR0CH (Bit 12)                                     */
#define SPIC_VALIDCMD_CTRLR0CH_Msk        (0x1000UL)                /*!< CTRLR0CH (Bitfield-Mask: 0x01)                        */
#define SPIC_VALIDCMD_DUMEN_Pos           (13UL)                    /*!< DUMEN (Bit 13)                                        */
#define SPIC_VALIDCMD_DUMEN_Msk           (0x2000UL)                /*!< DUMEN (Bitfield-Mask: 0x01)                           */
#define SPIC_VALIDCMD_SEQTRANSDIS_Pos     (16UL)                    /*!< SEQTRANSDIS (Bit 16)                                  */
#define SPIC_VALIDCMD_SEQTRANSDIS_Msk     (0x10000UL)               /*!< SEQTRANSDIS (Bitfield-Mask: 0x01)                     */
/* =======================================================  FLASESIZE  ======================================================= */
#define SPIC_FLASESIZE_SIZE_Pos           (0UL)                     /*!< SIZE (Bit 0)                                          */
#define SPIC_FLASESIZE_SIZE_Msk           (0x1fUL)                  /*!< SIZE (Bitfield-Mask: 0x1f)                            */
/* =========================================================  FLUSH  ========================================================= */
#define SPIC_FLUSH_ALL_Pos                (0UL)                     /*!< ALL (Bit 0)                                           */
#define SPIC_FLUSH_ALL_Msk                (0x1UL)                   /*!< ALL (Bitfield-Mask: 0x01)                             */
#define SPIC_FLUSH_DRFIFO_Pos             (1UL)                     /*!< DRFIFO (Bit 1)                                        */
#define SPIC_FLUSH_DRFIFO_Msk             (0x2UL)                   /*!< DRFIFO (Bitfield-Mask: 0x01)                          */
#define SPIC_FLUSH_STFIFO_Pos             (2UL)                     /*!< STFIFO (Bit 2)                                        */
#define SPIC_FLUSH_STFIFO_Msk             (0x4UL)                   /*!< STFIFO (Bitfield-Mask: 0x01)                          */
/* ========================================================  DUMBYTE  ======================================================== */
#define SPIC_DUMBYTE_VAL_Pos              (0UL)                     /*!< VAL (Bit 0)                                           */
#define SPIC_DUMBYTE_VAL_Msk              (0xffUL)                  /*!< VAL (Bitfield-Mask: 0xff)                             */
/* =========================================================  TXNDF  ========================================================= */
/* ========================================================  DEVINFO  ======================================================== */
/* =========================================================  TPR0  ========================================================== */
/* =======================================================  AUTOLEN2  ======================================================== */
/* =========================================================  TPR1  ========================================================== */
/* =========================================================  STFLR  ========================================================= */
/* =======================================================  PAGEREAD  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           MSPI                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CMDL  ========================================================== */
#define MSPI_CMDL_CMD0_Pos                (0UL)                     /*!< CMD0 (Bit 0)                                          */
#define MSPI_CMDL_CMD0_Msk                (0xffUL)                  /*!< CMD0 (Bitfield-Mask: 0xff)                            */
#define MSPI_CMDL_CMD1_Pos                (8UL)                     /*!< CMD1 (Bit 8)                                          */
#define MSPI_CMDL_CMD1_Msk                (0xff00UL)                /*!< CMD1 (Bitfield-Mask: 0xff)                            */
#define MSPI_CMDL_CMD2_Pos                (16UL)                    /*!< CMD2 (Bit 16)                                         */
#define MSPI_CMDL_CMD2_Msk                (0xff0000UL)              /*!< CMD2 (Bitfield-Mask: 0xff)                            */
#define MSPI_CMDL_CMD3_Pos                (24UL)                    /*!< CMD3 (Bit 24)                                         */
#define MSPI_CMDL_CMD3_Msk                (0xff000000UL)            /*!< CMD3 (Bitfield-Mask: 0xff)                            */
/* =========================================================  CMDH  ========================================================== */
#define MSPI_CMDH_CMD4_Pos                (0UL)                     /*!< CMD4 (Bit 0)                                          */
#define MSPI_CMDH_CMD4_Msk                (0xffUL)                  /*!< CMD4 (Bitfield-Mask: 0xff)                            */
/* ========================================================  CMDNUM  ========================================================= */
#define MSPI_CMDNUM_NUM_Pos               (0UL)                     /*!< NUM (Bit 0)                                           */
#define MSPI_CMDNUM_NUM_Msk               (0x3fUL)                  /*!< NUM (Bitfield-Mask: 0x3f)                             */
/* =========================================================  ADDR  ========================================================== */
#define MSPI_ADDR_ADDR0_Pos               (0UL)                     /*!< ADDR0 (Bit 0)                                         */
#define MSPI_ADDR_ADDR0_Msk               (0xffUL)                  /*!< ADDR0 (Bitfield-Mask: 0xff)                           */
#define MSPI_ADDR_ADDR1_Pos               (8UL)                     /*!< ADDR1 (Bit 8)                                         */
#define MSPI_ADDR_ADDR1_Msk               (0xff00UL)                /*!< ADDR1 (Bitfield-Mask: 0xff)                           */
#define MSPI_ADDR_ADDR2_Pos               (16UL)                    /*!< ADDR2 (Bit 16)                                        */
#define MSPI_ADDR_ADDR2_Msk               (0xff0000UL)              /*!< ADDR2 (Bitfield-Mask: 0xff)                           */
/* ========================================================  ADDRNUM  ======================================================== */
#define MSPI_ADDRNUM_NUM_Pos              (0UL)                     /*!< NUM (Bit 0)                                           */
#define MSPI_ADDRNUM_NUM_Msk              (0x1fUL)                  /*!< NUM (Bitfield-Mask: 0x1f)                             */
/* =========================================================  TRLEN  ========================================================= */
#define MSPI_TRLEN_LEN_Pos                (0UL)                     /*!< LEN (Bit 0)                                           */
#define MSPI_TRLEN_LEN_Msk                (0x1ffUL)                 /*!< LEN (Bitfield-Mask: 0x1ff)                            */
/* ========================================================  TRCTRL  ========================================================= */
#define MSPI_TRCTRL_MODE_Pos              (0UL)                     /*!< MODE (Bit 0)                                          */
#define MSPI_TRCTRL_MODE_Msk              (0xfUL)                   /*!< MODE (Bitfield-Mask: 0x0f)                            */
#define MSPI_TRCTRL_TXOVF_Pos             (4UL)                     /*!< TXOVF (Bit 4)                                         */
#define MSPI_TRCTRL_TXOVF_Msk             (0x10UL)                  /*!< TXOVF (Bitfield-Mask: 0x01)                           */
#define MSPI_TRCTRL_RXOVF_Pos             (5UL)                     /*!< RXOVF (Bit 5)                                         */
#define MSPI_TRCTRL_RXOVF_Msk             (0x20UL)                  /*!< RXOVF (Bitfield-Mask: 0x01)                           */
#define MSPI_TRCTRL_END_Pos               (6UL)                     /*!< END (Bit 6)                                           */
#define MSPI_TRCTRL_END_Msk               (0x40UL)                  /*!< END (Bitfield-Mask: 0x01)                             */
#define MSPI_TRCTRL_START_Pos             (7UL)                     /*!< START (Bit 7)                                         */
#define MSPI_TRCTRL_START_Msk             (0x80UL)                  /*!< START (Bitfield-Mask: 0x01)                           */
/* =========================================================  CTRL  ========================================================== */
#define MSPI_CTRL_RST_Pos                 (0UL)                     /*!< RST (Bit 0)                                           */
#define MSPI_CTRL_RST_Msk                 (0x1UL)                   /*!< RST (Bitfield-Mask: 0x01)                             */
#define MSPI_CTRL_TRANSEL_Pos             (1UL)                     /*!< TRANSEL (Bit 1)                                       */
#define MSPI_CTRL_TRANSEL_Msk             (0x2UL)                   /*!< TRANSEL (Bitfield-Mask: 0x01)                         */
#define MSPI_CTRL_MODE_Pos                (2UL)                     /*!< MODE (Bit 2)                                          */
#define MSPI_CTRL_MODE_Msk                (0xcUL)                   /*!< MODE (Bitfield-Mask: 0x03)                            */
#define MSPI_CTRL_LSBFST_Pos              (5UL)                     /*!< LSBFST (Bit 5)                                        */
#define MSPI_CTRL_LSBFST_Msk              (0x20UL)                  /*!< LSBFST (Bitfield-Mask: 0x01)                          */
#define MSPI_CTRL_CSPOR_Pos               (6UL)                     /*!< CSPOR (Bit 6)                                         */
#define MSPI_CTRL_CSPOR_Msk               (0x40UL)                  /*!< CSPOR (Bitfield-Mask: 0x01)                           */
#define MSPI_CTRL_SEL_Pos                 (7UL)                     /*!< SEL (Bit 7)                                           */
#define MSPI_CTRL_SEL_Msk                 (0x80UL)                  /*!< SEL (Bitfield-Mask: 0x01)                             */
/* ==========================================================  CFG  ========================================================== */
#define MSPI_CFG_EDO_Pos                  (0UL)                     /*!< EDO (Bit 0)                                           */
#define MSPI_CFG_EDO_Msk                  (0x3UL)                   /*!< EDO (Bitfield-Mask: 0x03)                             */
#define MSPI_CFG_TCS_Pos                  (2UL)                     /*!< TCS (Bit 2)                                           */
#define MSPI_CFG_TCS_Msk                  (0xcUL)                   /*!< TCS (Bitfield-Mask: 0x03)                             */
#define MSPI_CFG_DUMMYBIT_Pos             (5UL)                     /*!< DUMMYBIT (Bit 5)                                      */
#define MSPI_CFG_DUMMYBIT_Msk             (0xe0UL)                  /*!< DUMMYBIT (Bitfield-Mask: 0x07)                        */
/* ========================================================  CLKDIV  ========================================================= */
#define MSPI_CLKDIV_DIV0_Pos              (0UL)                     /*!< DIV0 (Bit 0)                                          */
#define MSPI_CLKDIV_DIV0_Msk              (0xffUL)                  /*!< DIV0 (Bitfield-Mask: 0xff)                            */
#define MSPI_CLKDIV_DIV1_Pos              (8UL)                     /*!< DIV1 (Bit 8)                                          */
#define MSPI_CLKDIV_DIV1_Msk              (0xff00UL)                /*!< DIV1 (Bitfield-Mask: 0xff)                            */
/* ========================================================  FIFOSTS  ======================================================== */
#define MSPI_FIFOSTS_RXFULL_Pos           (0UL)                     /*!< RXFULL (Bit 0)                                        */
#define MSPI_FIFOSTS_RXFULL_Msk           (0x1UL)                   /*!< RXFULL (Bitfield-Mask: 0x01)                          */
#define MSPI_FIFOSTS_TXFULL_Pos           (1UL)                     /*!< TXFULL (Bit 1)                                        */
#define MSPI_FIFOSTS_TXFULL_Msk           (0x2UL)                   /*!< TXFULL (Bitfield-Mask: 0x01)                          */
/* ========================================================  SIGNAL  ========================================================= */
#define MSPI_SIGNAL_MISO_Pos              (0UL)                     /*!< MISO (Bit 0)                                          */
#define MSPI_SIGNAL_MISO_Msk              (0x1UL)                   /*!< MISO (Bitfield-Mask: 0x01)                            */
#define MSPI_SIGNAL_MOSI_Pos              (1UL)                     /*!< MOSI (Bit 1)                                          */
#define MSPI_SIGNAL_MOSI_Msk              (0x2UL)                   /*!< MOSI (Bitfield-Mask: 0x01)                            */
#define MSPI_SIGNAL_CLK_Pos               (2UL)                     /*!< CLK (Bit 2)                                           */
#define MSPI_SIGNAL_CLK_Msk               (0x4UL)                   /*!< CLK (Bitfield-Mask: 0x01)                             */
#define MSPI_SIGNAL_CS_Pos                (3UL)                     /*!< CS (Bit 3)                                            */
#define MSPI_SIGNAL_CS_Msk                (0x8UL)                   /*!< CS (Bitfield-Mask: 0x01)                              */
/* ==========================================================  TX  =========================================================== */
#define MSPI_TX_DATA_Pos                  (0UL)                     /*!< DATA (Bit 0)                                          */
#define MSPI_TX_DATA_Msk                  (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
/* ==========================================================  RX  =========================================================== */
#define MSPI_RX_DATA_Pos                  (0UL)                     /*!< DATA (Bit 0)                                          */
#define MSPI_RX_DATA_Msk                  (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */


/* =========================================================================================================================== */
/* ================                                          SPISLV                                           ================ */
/* =========================================================================================================================== */

/* =======================================================  RXSTRADDR  ======================================================= */
/* =======================================================  RXENDADDR  ======================================================= */
/* =========================================================  RXCFG  ========================================================= */
#define SPISLV_RXCFG_RSTRXADDR_Pos        (0UL)                     /*!< RSTRXADDR (Bit 0)                                     */
#define SPISLV_RXCFG_RSTRXADDR_Msk        (0x1UL)                   /*!< RSTRXADDR (Bitfield-Mask: 0x01)                       */
#define SPISLV_RXCFG_BPSCACH_Pos          (1UL)                     /*!< BPSCACH (Bit 1)                                       */
#define SPISLV_RXCFG_BPSCACH_Msk          (0x6UL)                   /*!< BPSCACH (Bitfield-Mask: 0x03)                         */
#define SPISLV_RXCFG_AUTOPAUSE_Pos        (3UL)                     /*!< AUTOPAUSE (Bit 3)                                     */
#define SPISLV_RXCFG_AUTOPAUSE_Msk        (0x8UL)                   /*!< AUTOPAUSE (Bitfield-Mask: 0x01)                       */
#define SPISLV_RXCFG_CLRFIFOABNINT_Pos    (4UL)                     /*!< CLRFIFOABNINT (Bit 4)                                 */
#define SPISLV_RXCFG_CLRFIFOABNINT_Msk    (0x10UL)                  /*!< CLRFIFOABNINT (Bitfield-Mask: 0x01)                   */
#define SPISLV_RXCFG_CLRRXOGINT_Pos       (5UL)                     /*!< CLRRXOGINT (Bit 5)                                    */
#define SPISLV_RXCFG_CLRRXOGINT_Msk       (0x20UL)                  /*!< CLRRXOGINT (Bitfield-Mask: 0x01)                      */
#define SPISLV_RXCFG_CLRRXDONE_Pos        (6UL)                     /*!< CLRRXDONE (Bit 6)                                     */
#define SPISLV_RXCFG_CLRRXDONE_Msk        (0x40UL)                  /*!< CLRRXDONE (Bitfield-Mask: 0x01)                       */
#define SPISLV_RXCFG_CLRHSABNINT_Pos      (7UL)                     /*!< CLRHSABNINT (Bit 7)                                   */
#define SPISLV_RXCFG_CLRHSABNINT_Msk      (0x80UL)                  /*!< CLRHSABNINT (Bitfield-Mask: 0x01)                     */
#define SPISLV_RXCFG_DISFIFOABNINT_Pos    (8UL)                     /*!< DISFIFOABNINT (Bit 8)                                 */
#define SPISLV_RXCFG_DISFIFOABNINT_Msk    (0x100UL)                 /*!< DISFIFOABNINT (Bitfield-Mask: 0x01)                   */
#define SPISLV_RXCFG_DISRXOGINT_Pos       (9UL)                     /*!< DISRXOGINT (Bit 9)                                    */
#define SPISLV_RXCFG_DISRXOGINT_Msk       (0x200UL)                 /*!< DISRXOGINT (Bitfield-Mask: 0x01)                      */
#define SPISLV_RXCFG_DISRXDONE_Pos        (10UL)                    /*!< DISRXDONE (Bit 10)                                    */
#define SPISLV_RXCFG_DISRXDONE_Msk        (0x400UL)                 /*!< DISRXDONE (Bitfield-Mask: 0x01)                       */
#define SPISLV_RXCFG_DISHSABNINT_Pos      (11UL)                    /*!< DISHSABNINT (Bit 11)                                  */
#define SPISLV_RXCFG_DISHSABNINT_Msk      (0x800UL)                 /*!< DISHSABNINT (Bitfield-Mask: 0x01)                     */
#define SPISLV_RXCFG_DATCNT_Pos           (12UL)                    /*!< DATCNT (Bit 12)                                       */
#define SPISLV_RXCFG_DATCNT_Msk           (0xf000UL)                /*!< DATCNT (Bitfield-Mask: 0x0f)                          */
#define SPISLV_RXCFG_RXTO_Pos             (16UL)                    /*!< RXTO (Bit 16)                                         */
#define SPISLV_RXCFG_RXTO_Msk             (0xffff0000UL)            /*!< RXTO (Bitfield-Mask: 0xffff)                          */
/* =========================================================  RXSTS  ========================================================= */
#define SPISLV_RXSTS_FIFOABNINT_Pos       (4UL)                     /*!< FIFOABNINT (Bit 4)                                    */
#define SPISLV_RXSTS_FIFOABNINT_Msk       (0x10UL)                  /*!< FIFOABNINT (Bitfield-Mask: 0x01)                      */
#define SPISLV_RXSTS_RXOGINT_Pos          (5UL)                     /*!< RXOGINT (Bit 5)                                       */
#define SPISLV_RXSTS_RXOGINT_Msk          (0x20UL)                  /*!< RXOGINT (Bitfield-Mask: 0x01)                         */
#define SPISLV_RXSTS_RXDONE_Pos           (6UL)                     /*!< RXDONE (Bit 6)                                        */
#define SPISLV_RXSTS_RXDONE_Msk           (0x40UL)                  /*!< RXDONE (Bitfield-Mask: 0x01)                          */
#define SPISLV_RXSTS_ABNINT_Pos           (7UL)                     /*!< ABNINT (Bit 7)                                        */
#define SPISLV_RXSTS_ABNINT_Msk           (0x80UL)                  /*!< ABNINT (Bitfield-Mask: 0x01)                          */
/* ======================================================  RXCURRADDR  ======================================================= */
/* =======================================================  TXSTRADDR  ======================================================= */
/* =======================================================  TXENDADDR  ======================================================= */
/* =========================================================  TXCFG  ========================================================= */
#define SPISLV_TXCFG_RSTTXADDR_Pos        (0UL)                     /*!< RSTTXADDR (Bit 0)                                     */
#define SPISLV_TXCFG_RSTTXADDR_Msk        (0x1UL)                   /*!< RSTTXADDR (Bitfield-Mask: 0x01)                       */
#define SPISLV_TXCFG_DISATPS_Pos          (3UL)                     /*!< DISATPS (Bit 3)                                       */
#define SPISLV_TXCFG_DISATPS_Msk          (0x8UL)                   /*!< DISATPS (Bitfield-Mask: 0x01)                         */
#define SPISLV_TXCFG_CLRFIFOABNINT_Pos    (4UL)                     /*!< CLRFIFOABNINT (Bit 4)                                 */
#define SPISLV_TXCFG_CLRFIFOABNINT_Msk    (0x10UL)                  /*!< CLRFIFOABNINT (Bitfield-Mask: 0x01)                   */
#define SPISLV_TXCFG_CLRTXGOINT_Pos       (5UL)                     /*!< CLRTXGOINT (Bit 5)                                    */
#define SPISLV_TXCFG_CLRTXGOINT_Msk       (0x20UL)                  /*!< CLRTXGOINT (Bitfield-Mask: 0x01)                      */
#define SPISLV_TXCFG_CLRTXDONE_Pos        (6UL)                     /*!< CLRTXDONE (Bit 6)                                     */
#define SPISLV_TXCFG_CLRTXDONE_Msk        (0x40UL)                  /*!< CLRTXDONE (Bitfield-Mask: 0x01)                       */
#define SPISLV_TXCFG_CLRHSABNINT_Pos      (7UL)                     /*!< CLRHSABNINT (Bit 7)                                   */
#define SPISLV_TXCFG_CLRHSABNINT_Msk      (0x80UL)                  /*!< CLRHSABNINT (Bitfield-Mask: 0x01)                     */
#define SPISLV_TXCFG_DISFIFOABNINT_Pos    (8UL)                     /*!< DISFIFOABNINT (Bit 8)                                 */
#define SPISLV_TXCFG_DISFIFOABNINT_Msk    (0x100UL)                 /*!< DISFIFOABNINT (Bitfield-Mask: 0x01)                   */
#define SPISLV_TXCFG_DISTXOGINT_Pos       (9UL)                     /*!< DISTXOGINT (Bit 9)                                    */
#define SPISLV_TXCFG_DISTXOGINT_Msk       (0x200UL)                 /*!< DISTXOGINT (Bitfield-Mask: 0x01)                      */
#define SPISLV_TXCFG_DISTXDONE_Pos        (10UL)                    /*!< DISTXDONE (Bit 10)                                    */
#define SPISLV_TXCFG_DISTXDONE_Msk        (0x400UL)                 /*!< DISTXDONE (Bitfield-Mask: 0x01)                       */
#define SPISLV_TXCFG_DISHSABNINT_Pos      (11UL)                    /*!< DISHSABNINT (Bit 11)                                  */
#define SPISLV_TXCFG_DISHSABNINT_Msk      (0x800UL)                 /*!< DISHSABNINT (Bitfield-Mask: 0x01)                     */
#define SPISLV_TXCFG_DATCNT_Pos           (12UL)                    /*!< DATCNT (Bit 12)                                       */
#define SPISLV_TXCFG_DATCNT_Msk           (0xf000UL)                /*!< DATCNT (Bitfield-Mask: 0x0f)                          */
#define SPISLV_TXCFG_TXTO_Pos             (16UL)                    /*!< TXTO (Bit 16)                                         */
#define SPISLV_TXCFG_TXTO_Msk             (0xffff0000UL)            /*!< TXTO (Bitfield-Mask: 0xffff)                          */
/* =========================================================  TXSTS  ========================================================= */
#define SPISLV_TXSTS_FIFOABNINT_Pos       (4UL)                     /*!< FIFOABNINT (Bit 4)                                    */
#define SPISLV_TXSTS_FIFOABNINT_Msk       (0x10UL)                  /*!< FIFOABNINT (Bitfield-Mask: 0x01)                      */
#define SPISLV_TXSTS_TXOGINT_Pos          (5UL)                     /*!< TXOGINT (Bit 5)                                       */
#define SPISLV_TXSTS_TXOGINT_Msk          (0x20UL)                  /*!< TXOGINT (Bitfield-Mask: 0x01)                         */
#define SPISLV_TXSTS_TXDONE_Pos           (6UL)                     /*!< TXDONE (Bit 6)                                        */
#define SPISLV_TXSTS_TXDONE_Msk           (0x40UL)                  /*!< TXDONE (Bitfield-Mask: 0x01)                          */
#define SPISLV_TXSTS_HSABNINT_Pos         (7UL)                     /*!< HSABNINT (Bit 7)                                      */
#define SPISLV_TXSTS_HSABNINT_Msk         (0x80UL)                  /*!< HSABNINT (Bitfield-Mask: 0x01)                        */
/* ======================================================  TXCURRADDR  ======================================================= */
/* ======================================================  DUPLEXCTRL  ======================================================= */
#define SPISLV_DUPLEXCTRL_RXEN_Pos        (0UL)                     /*!< RXEN (Bit 0)                                          */
#define SPISLV_DUPLEXCTRL_RXEN_Msk        (0x1UL)                   /*!< RXEN (Bitfield-Mask: 0x01)                            */
#define SPISLV_DUPLEXCTRL_TXEN_Pos        (1UL)                     /*!< TXEN (Bit 1)                                          */
#define SPISLV_DUPLEXCTRL_TXEN_Msk        (0x2UL)                   /*!< TXEN (Bitfield-Mask: 0x01)                            */
#define SPISLV_DUPLEXCTRL_ENRXFIFOABNINT_Pos (4UL)                  /*!< ENRXFIFOABNINT (Bit 4)                                */
#define SPISLV_DUPLEXCTRL_ENRXFIFOABNINT_Msk (0x10UL)               /*!< ENRXFIFOABNINT (Bitfield-Mask: 0x01)                  */
#define SPISLV_DUPLEXCTRL_ENRXOGINT_Pos   (5UL)                     /*!< ENRXOGINT (Bit 5)                                     */
#define SPISLV_DUPLEXCTRL_ENRXOGINT_Msk   (0x20UL)                  /*!< ENRXOGINT (Bitfield-Mask: 0x01)                       */
#define SPISLV_DUPLEXCTRL_ENRXDONE_Pos    (6UL)                     /*!< ENRXDONE (Bit 6)                                      */
#define SPISLV_DUPLEXCTRL_ENRXDONE_Msk    (0x40UL)                  /*!< ENRXDONE (Bitfield-Mask: 0x01)                        */
#define SPISLV_DUPLEXCTRL_ENHSABNRXINT_Pos (7UL)                    /*!< ENHSABNRXINT (Bit 7)                                  */
#define SPISLV_DUPLEXCTRL_ENHSABNRXINT_Msk (0x80UL)                 /*!< ENHSABNRXINT (Bitfield-Mask: 0x01)                    */
#define SPISLV_DUPLEXCTRL_ENTXFIFOABNINT_Pos (8UL)                  /*!< ENTXFIFOABNINT (Bit 8)                                */
#define SPISLV_DUPLEXCTRL_ENTXFIFOABNINT_Msk (0x100UL)              /*!< ENTXFIFOABNINT (Bitfield-Mask: 0x01)                  */
#define SPISLV_DUPLEXCTRL_ENTXOGINT_Pos   (9UL)                     /*!< ENTXOGINT (Bit 9)                                     */
#define SPISLV_DUPLEXCTRL_ENTXOGINT_Msk   (0x200UL)                 /*!< ENTXOGINT (Bitfield-Mask: 0x01)                       */
#define SPISLV_DUPLEXCTRL_ENTXDONE_Pos    (10UL)                    /*!< ENTXDONE (Bit 10)                                     */
#define SPISLV_DUPLEXCTRL_ENTXDONE_Msk    (0x400UL)                 /*!< ENTXDONE (Bitfield-Mask: 0x01)                        */
#define SPISLV_DUPLEXCTRL_ENHSABNTXINT_Pos (11UL)                   /*!< ENHSABNTXINT (Bit 11)                                 */
#define SPISLV_DUPLEXCTRL_ENHSABNTXINT_Msk (0x800UL)                /*!< ENHSABNTXINT (Bitfield-Mask: 0x01)                    */
#define SPISLV_DUPLEXCTRL_MDSEL_Pos       (12UL)                    /*!< MDSEL (Bit 12)                                        */
#define SPISLV_DUPLEXCTRL_MDSEL_Msk       (0x3000UL)                /*!< MDSEL (Bitfield-Mask: 0x03)                           */
#define SPISLV_DUPLEXCTRL_RXDUMLEN_Pos    (14UL)                    /*!< RXDUMLEN (Bit 14)                                     */
#define SPISLV_DUPLEXCTRL_RXDUMLEN_Msk    (0x1c000UL)               /*!< RXDUMLEN (Bitfield-Mask: 0x07)                        */
#define SPISLV_DUPLEXCTRL_TXDUMLEN_Pos    (17UL)                    /*!< TXDUMLEN (Bit 17)                                     */
#define SPISLV_DUPLEXCTRL_TXDUMLEN_Msk    (0xe0000UL)               /*!< TXDUMLEN (Bitfield-Mask: 0x07)                        */
#define SPISLV_DUPLEXCTRL_DISSPDURX_Pos   (20UL)                    /*!< DISSPDURX (Bit 20)                                    */
#define SPISLV_DUPLEXCTRL_DISSPDURX_Msk   (0x100000UL)              /*!< DISSPDURX (Bitfield-Mask: 0x01)                       */
#define SPISLV_DUPLEXCTRL_DISSPDUTX_Pos   (21UL)                    /*!< DISSPDUTX (Bit 21)                                    */
#define SPISLV_DUPLEXCTRL_DISSPDUTX_Msk   (0x200000UL)              /*!< DISSPDUTX (Bitfield-Mask: 0x01)                       */


/* =========================================================================================================================== */
/* ================                                            PUF                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  OTP  ========================================================== */
/* ==========================================================  PUF  ========================================================== */
/* ======================================================  PUFZEROIZED  ====================================================== */
/* =====================================================  OTPZEROIZED0  ====================================================== */
/* =====================================================  OTPZEROIZED1  ====================================================== */
/* =======================================================  PUFLOCK0  ======================================================== */
/* =======================================================  PUFLOCK1  ======================================================== */
/* =======================================================  PUFLOCK2  ======================================================== */
/* =======================================================  PUFLOCK3  ======================================================== */
/* =======================================================  OTPLOCK0  ======================================================== */
/* =======================================================  OTPLOCK1  ======================================================== */
/* =======================================================  OTPLOCK2  ======================================================== */
/* =======================================================  OTPLOCK3  ======================================================== */
/* =======================================================  OTPLOCK4  ======================================================== */
/* =======================================================  OTPLOCK5  ======================================================== */
/* =======================================================  OTPLOCK6  ======================================================== */
/* =======================================================  OTPLOCK7  ======================================================== */
/* =======================================================  OTPLOCK8  ======================================================== */
/* =======================================================  OTPLOCK9  ======================================================== */
/* =======================================================  OTPLOCK10  ======================================================= */
/* =======================================================  OTPLOCK11  ======================================================= */
/* =======================================================  OTPLOCK12  ======================================================= */
/* =======================================================  OTPLOCK13  ======================================================= */
/* =======================================================  OTPLOCK14  ======================================================= */
/* =======================================================  OTPLOCK15  ======================================================= */
/* =======================================================  OTPLOCK16  ======================================================= */
/* =======================================================  OTPLOCK17  ======================================================= */
/* =======================================================  OTPLOCK18  ======================================================= */
/* =======================================================  OTPLOCK19  ======================================================= */
/* =======================================================  OTPLOCK20  ======================================================= */
/* =======================================================  OTPLOCK21  ======================================================= */
/* =======================================================  OTPLOCK22  ======================================================= */
/* =======================================================  OTPLOCK23  ======================================================= */
/* =======================================================  OTPLOCK24  ======================================================= */
/* =======================================================  OTPLOCK25  ======================================================= */
/* =======================================================  OTPLOCK26  ======================================================= */
/* =======================================================  OTPLOCK27  ======================================================= */
/* =======================================================  OTPLOCK28  ======================================================= */
/* =======================================================  OTPLOCK29  ======================================================= */
/* =======================================================  OTPLOCK30  ======================================================= */
/* =======================================================  OTPLOCK31  ======================================================= */
/* ========================================================  TRNGOP  ========================================================= */
#define PUF_TRNGOP_EN_Pos                 (0UL)                     /*!< EN (Bit 0)                                            */
#define PUF_TRNGOP_EN_Msk                 (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
/* =======================================================  TRNGDATA  ======================================================== */
/* ==========================================================  STS  ========================================================== */
#define PUF_STS_BUSY_Pos                  (0UL)                     /*!< BUSY (Bit 0)                                          */
#define PUF_STS_BUSY_Msk                  (0x1UL)                   /*!< BUSY (Bitfield-Mask: 0x01)                            */
/* ======================================================  OTPPOSTMSK0  ====================================================== */
/* ======================================================  OTPPOSTMSK1  ====================================================== */
/* ======================================================  PUFPOSTMSK  ======================================================= */


/* =========================================================================================================================== */
/* ================                                          SYSTEM                                           ================ */
/* =========================================================================================================================== */

/* =======================================================  I3CCLKDIV  ======================================================= */
#define SYSTEM_I3CCLKDIV_I3C0DIV_Pos      (0UL)                     /*!< I3C0DIV (Bit 0)                                       */
#define SYSTEM_I3CCLKDIV_I3C0DIV_Msk      (0x3UL)                   /*!< I3C0DIV (Bitfield-Mask: 0x03)                         */
#define SYSTEM_I3CCLKDIV_I3C1DIV_Pos      (2UL)                     /*!< I3C1DIV (Bit 2)                                       */
#define SYSTEM_I3CCLKDIV_I3C1DIV_Msk      (0xcUL)                   /*!< I3C1DIV (Bitfield-Mask: 0x03)                         */
/* ========================================================  TMRRST  ========================================================= */
#define SYSTEM_TMRRST_TMR0RST_Pos         (4UL)                     /*!< TMR0RST (Bit 4)                                       */
#define SYSTEM_TMRRST_TMR0RST_Msk         (0x10UL)                  /*!< TMR0RST (Bitfield-Mask: 0x01)                         */
#define SYSTEM_TMRRST_TMR1RST_Pos         (5UL)                     /*!< TMR1RST (Bit 5)                                       */
#define SYSTEM_TMRRST_TMR1RST_Msk         (0x20UL)                  /*!< TMR1RST (Bitfield-Mask: 0x01)                         */
#define SYSTEM_TMRRST_TMR2RST_Pos         (6UL)                     /*!< TMR2RST (Bit 6)                                       */
#define SYSTEM_TMRRST_TMR2RST_Msk         (0x40UL)                  /*!< TMR2RST (Bitfield-Mask: 0x01)                         */
#define SYSTEM_TMRRST_TMR3RST_Pos         (7UL)                     /*!< TMR3RST (Bit 7)                                       */
#define SYSTEM_TMRRST_TMR3RST_Msk         (0x80UL)                  /*!< TMR3RST (Bitfield-Mask: 0x01)                         */
#define SYSTEM_TMRRST_TMR4RST_Pos         (8UL)                     /*!< TMR4RST (Bit 8)                                       */
#define SYSTEM_TMRRST_TMR4RST_Msk         (0x100UL)                 /*!< TMR4RST (Bitfield-Mask: 0x01)                         */
#define SYSTEM_TMRRST_TMR5RST_Pos         (9UL)                     /*!< TMR5RST (Bit 9)                                       */
#define SYSTEM_TMRRST_TMR5RST_Msk         (0x200UL)                 /*!< TMR5RST (Bitfield-Mask: 0x01)                         */
/* =======================================================  I2CCLKPWR  ======================================================= */
#define SYSTEM_I2CCLKPWR_I2C0CLKPWR_Pos   (0UL)                     /*!< I2C0CLKPWR (Bit 0)                                    */
#define SYSTEM_I2CCLKPWR_I2C0CLKPWR_Msk   (0x1UL)                   /*!< I2C0CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C0CLKSRC_Pos   (1UL)                     /*!< I2C0CLKSRC (Bit 1)                                    */
#define SYSTEM_I2CCLKPWR_I2C0CLKSRC_Msk   (0x2UL)                   /*!< I2C0CLKSRC (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C0CLKDIV_Pos   (2UL)                     /*!< I2C0CLKDIV (Bit 2)                                    */
#define SYSTEM_I2CCLKPWR_I2C0CLKDIV_Msk   (0xcUL)                   /*!< I2C0CLKDIV (Bitfield-Mask: 0x03)                      */
#define SYSTEM_I2CCLKPWR_I2C1CLKPWR_Pos   (4UL)                     /*!< I2C1CLKPWR (Bit 4)                                    */
#define SYSTEM_I2CCLKPWR_I2C1CLKPWR_Msk   (0x10UL)                  /*!< I2C1CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C1CLKSRC_Pos   (5UL)                     /*!< I2C1CLKSRC (Bit 5)                                    */
#define SYSTEM_I2CCLKPWR_I2C1CLKSRC_Msk   (0x20UL)                  /*!< I2C1CLKSRC (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C1CLKDIV_Pos   (6UL)                     /*!< I2C1CLKDIV (Bit 6)                                    */
#define SYSTEM_I2CCLKPWR_I2C1CLKDIV_Msk   (0xc0UL)                  /*!< I2C1CLKDIV (Bitfield-Mask: 0x03)                      */
#define SYSTEM_I2CCLKPWR_I2C2CLKPWR_Pos   (8UL)                     /*!< I2C2CLKPWR (Bit 8)                                    */
#define SYSTEM_I2CCLKPWR_I2C2CLKPWR_Msk   (0x100UL)                 /*!< I2C2CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C2CLKSRC_Pos   (9UL)                     /*!< I2C2CLKSRC (Bit 9)                                    */
#define SYSTEM_I2CCLKPWR_I2C2CLKSRC_Msk   (0x200UL)                 /*!< I2C2CLKSRC (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C2CLKDIV_Pos   (10UL)                    /*!< I2C2CLKDIV (Bit 10)                                   */
#define SYSTEM_I2CCLKPWR_I2C2CLKDIV_Msk   (0xc00UL)                 /*!< I2C2CLKDIV (Bitfield-Mask: 0x03)                      */
#define SYSTEM_I2CCLKPWR_I2C3CLKPWR_Pos   (12UL)                    /*!< I2C3CLKPWR (Bit 12)                                   */
#define SYSTEM_I2CCLKPWR_I2C3CLKPWR_Msk   (0x1000UL)                /*!< I2C3CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C3CLKSRC_Pos   (13UL)                    /*!< I2C3CLKSRC (Bit 13)                                   */
#define SYSTEM_I2CCLKPWR_I2C3CLKSRC_Msk   (0x2000UL)                /*!< I2C3CLKSRC (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C3CLKDIV_Pos   (14UL)                    /*!< I2C3CLKDIV (Bit 14)                                   */
#define SYSTEM_I2CCLKPWR_I2C3CLKDIV_Msk   (0xc000UL)                /*!< I2C3CLKDIV (Bitfield-Mask: 0x03)                      */
#define SYSTEM_I2CCLKPWR_I2C4CLKPWR_Pos   (16UL)                    /*!< I2C4CLKPWR (Bit 16)                                   */
#define SYSTEM_I2CCLKPWR_I2C4CLKPWR_Msk   (0x10000UL)               /*!< I2C4CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C4CLKSRC_Pos   (17UL)                    /*!< I2C4CLKSRC (Bit 17)                                   */
#define SYSTEM_I2CCLKPWR_I2C4CLKSRC_Msk   (0x20000UL)               /*!< I2C4CLKSRC (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C4CLKDIV_Pos   (18UL)                    /*!< I2C4CLKDIV (Bit 18)                                   */
#define SYSTEM_I2CCLKPWR_I2C4CLKDIV_Msk   (0xc0000UL)               /*!< I2C4CLKDIV (Bitfield-Mask: 0x03)                      */
#define SYSTEM_I2CCLKPWR_I2C5CLKPWR_Pos   (20UL)                    /*!< I2C5CLKPWR (Bit 20)                                   */
#define SYSTEM_I2CCLKPWR_I2C5CLKPWR_Msk   (0x100000UL)              /*!< I2C5CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C5CLKSRC_Pos   (21UL)                    /*!< I2C5CLKSRC (Bit 21)                                   */
#define SYSTEM_I2CCLKPWR_I2C5CLKSRC_Msk   (0x200000UL)              /*!< I2C5CLKSRC (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C5CLKDIV_Pos   (22UL)                    /*!< I2C5CLKDIV (Bit 22)                                   */
#define SYSTEM_I2CCLKPWR_I2C5CLKDIV_Msk   (0xc00000UL)              /*!< I2C5CLKDIV (Bitfield-Mask: 0x03)                      */
#define SYSTEM_I2CCLKPWR_I2C6CLKPWR_Pos   (24UL)                    /*!< I2C6CLKPWR (Bit 24)                                   */
#define SYSTEM_I2CCLKPWR_I2C6CLKPWR_Msk   (0x1000000UL)             /*!< I2C6CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C6CLKSRC_Pos   (25UL)                    /*!< I2C6CLKSRC (Bit 25)                                   */
#define SYSTEM_I2CCLKPWR_I2C6CLKSRC_Msk   (0x2000000UL)             /*!< I2C6CLKSRC (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C6CLKDIV_Pos   (26UL)                    /*!< I2C6CLKDIV (Bit 26)                                   */
#define SYSTEM_I2CCLKPWR_I2C6CLKDIV_Msk   (0xc000000UL)             /*!< I2C6CLKDIV (Bitfield-Mask: 0x03)                      */
#define SYSTEM_I2CCLKPWR_I2C7CLKPWR_Pos   (28UL)                    /*!< I2C7CLKPWR (Bit 28)                                   */
#define SYSTEM_I2CCLKPWR_I2C7CLKPWR_Msk   (0x10000000UL)            /*!< I2C7CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C7CLKSRC_Pos   (29UL)                    /*!< I2C7CLKSRC (Bit 29)                                   */
#define SYSTEM_I2CCLKPWR_I2C7CLKSRC_Msk   (0x20000000UL)            /*!< I2C7CLKSRC (Bitfield-Mask: 0x01)                      */
#define SYSTEM_I2CCLKPWR_I2C7CLKDIV_Pos   (30UL)                    /*!< I2C7CLKDIV (Bit 30)                                   */
#define SYSTEM_I2CCLKPWR_I2C7CLKDIV_Msk   (0xc0000000UL)            /*!< I2C7CLKDIV (Bitfield-Mask: 0x03)                      */
/* ========================================================  TMRDIV  ========================================================= */
#define SYSTEM_TMRDIV_TMR0DIV_Pos         (0UL)                     /*!< TMR0DIV (Bit 0)                                       */
#define SYSTEM_TMRDIV_TMR0DIV_Msk         (0xfUL)                   /*!< TMR0DIV (Bitfield-Mask: 0x0f)                         */
#define SYSTEM_TMRDIV_TMR1DIV_Pos         (4UL)                     /*!< TMR1DIV (Bit 4)                                       */
#define SYSTEM_TMRDIV_TMR1DIV_Msk         (0xf0UL)                  /*!< TMR1DIV (Bitfield-Mask: 0x0f)                         */
#define SYSTEM_TMRDIV_TMR2DIV_Pos         (8UL)                     /*!< TMR2DIV (Bit 8)                                       */
#define SYSTEM_TMRDIV_TMR2DIV_Msk         (0xf00UL)                 /*!< TMR2DIV (Bitfield-Mask: 0x0f)                         */
#define SYSTEM_TMRDIV_TMR3DIV_Pos         (12UL)                    /*!< TMR3DIV (Bit 12)                                      */
#define SYSTEM_TMRDIV_TMR3DIV_Msk         (0xf000UL)                /*!< TMR3DIV (Bitfield-Mask: 0x0f)                         */
#define SYSTEM_TMRDIV_TMR4DIV_Pos         (16UL)                    /*!< TMR4DIV (Bit 16)                                      */
#define SYSTEM_TMRDIV_TMR4DIV_Msk         (0xf0000UL)               /*!< TMR4DIV (Bitfield-Mask: 0x0f)                         */
#define SYSTEM_TMRDIV_TMR5DIV_Pos         (20UL)                    /*!< TMR5DIV (Bit 20)                                      */
#define SYSTEM_TMRDIV_TMR5DIV_Msk         (0xf00000UL)              /*!< TMR5DIV (Bitfield-Mask: 0x0f)                         */
#define SYSTEM_TMRDIV_TMR0PAUSE_Pos       (24UL)                    /*!< TMR0PAUSE (Bit 24)                                    */
#define SYSTEM_TMRDIV_TMR0PAUSE_Msk       (0x1000000UL)             /*!< TMR0PAUSE (Bitfield-Mask: 0x01)                       */
#define SYSTEM_TMRDIV_TMR1PAUSE_Pos       (25UL)                    /*!< TMR1PAUSE (Bit 25)                                    */
#define SYSTEM_TMRDIV_TMR1PAUSE_Msk       (0x2000000UL)             /*!< TMR1PAUSE (Bitfield-Mask: 0x01)                       */
#define SYSTEM_TMRDIV_TMR2PAUSE_Pos       (26UL)                    /*!< TMR2PAUSE (Bit 26)                                    */
#define SYSTEM_TMRDIV_TMR2PAUSE_Msk       (0x4000000UL)             /*!< TMR2PAUSE (Bitfield-Mask: 0x01)                       */
#define SYSTEM_TMRDIV_TMR3PAUSE_Pos       (27UL)                    /*!< TMR3PAUSE (Bit 27)                                    */
#define SYSTEM_TMRDIV_TMR3PAUSE_Msk       (0x8000000UL)             /*!< TMR3PAUSE (Bitfield-Mask: 0x01)                       */
#define SYSTEM_TMRDIV_TMR4PAUSE_Pos       (28UL)                    /*!< TMR4PAUSE (Bit 28)                                    */
#define SYSTEM_TMRDIV_TMR4PAUSE_Msk       (0x10000000UL)            /*!< TMR4PAUSE (Bitfield-Mask: 0x01)                       */
#define SYSTEM_TMRDIV_TMR5PAUSE_Pos       (29UL)                    /*!< TMR5PAUSE (Bit 29)                                    */
#define SYSTEM_TMRDIV_TMR5PAUSE_Msk       (0x20000000UL)            /*!< TMR5PAUSE (Bitfield-Mask: 0x01)                       */
/* ======================================================  PERICLKPWR0  ====================================================== */
#define SYSTEM_PERICLKPWR0_GPIOCLKPWR_Pos (0UL)                     /*!< GPIOCLKPWR (Bit 0)                                    */
#define SYSTEM_PERICLKPWR0_GPIOCLKPWR_Msk (0x1UL)                   /*!< GPIOCLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR0_TACHO0CLKPWR_Pos (1UL)                   /*!< TACHO0CLKPWR (Bit 1)                                  */
#define SYSTEM_PERICLKPWR0_TACHO0CLKPWR_Msk (0x2UL)                 /*!< TACHO0CLKPWR (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKPWR0_TACHO1CLKPWR_Pos (2UL)                   /*!< TACHO1CLKPWR (Bit 2)                                  */
#define SYSTEM_PERICLKPWR0_TACHO1CLKPWR_Msk (0x4UL)                 /*!< TACHO1CLKPWR (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKPWR0_TACHO2CLKPWR_Pos (3UL)                   /*!< TACHO2CLKPWR (Bit 3)                                  */
#define SYSTEM_PERICLKPWR0_TACHO2CLKPWR_Msk (0x8UL)                 /*!< TACHO2CLKPWR (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKPWR0_TACHO3CLKPWR_Pos (4UL)                   /*!< TACHO3CLKPWR (Bit 4)                                  */
#define SYSTEM_PERICLKPWR0_TACHO3CLKPWR_Msk (0x10UL)                /*!< TACHO3CLKPWR (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKPWR0_PS2CLKPWR_Pos  (5UL)                     /*!< PS2CLKPWR (Bit 5)                                     */
#define SYSTEM_PERICLKPWR0_PS2CLKPWR_Msk  (0x20UL)                  /*!< PS2CLKPWR (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR0_KBMCLKPWR_Pos  (6UL)                     /*!< KBMCLKPWR (Bit 6)                                     */
#define SYSTEM_PERICLKPWR0_KBMCLKPWR_Msk  (0x40UL)                  /*!< KBMCLKPWR (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR0_PECICLKPWR_Pos (7UL)                     /*!< PECICLKPWR (Bit 7)                                    */
#define SYSTEM_PERICLKPWR0_PECICLKPWR_Msk (0x80UL)                  /*!< PECICLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR0_PL0CLKPWR_Pos  (8UL)                     /*!< PL0CLKPWR (Bit 8)                                     */
#define SYSTEM_PERICLKPWR0_PL0CLKPWR_Msk  (0x100UL)                 /*!< PL0CLKPWR (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR0_PL1CLKPWR_Pos  (9UL)                     /*!< PL1CLKPWR (Bit 9)                                     */
#define SYSTEM_PERICLKPWR0_PL1CLKPWR_Msk  (0x200UL)                 /*!< PL1CLKPWR (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR0_PWM0CLKPWR_Pos (10UL)                    /*!< PWM0CLKPWR (Bit 10)                                   */
#define SYSTEM_PERICLKPWR0_PWM0CLKPWR_Msk (0x400UL)                 /*!< PWM0CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR0_PWM1CLKPWR_Pos (11UL)                    /*!< PWM1CLKPWR (Bit 11)                                   */
#define SYSTEM_PERICLKPWR0_PWM1CLKPWR_Msk (0x800UL)                 /*!< PWM1CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR0_PWM2CLKPWR_Pos (12UL)                    /*!< PWM2CLKPWR (Bit 12)                                   */
#define SYSTEM_PERICLKPWR0_PWM2CLKPWR_Msk (0x1000UL)                /*!< PWM2CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR0_PWM3CLKPWR_Pos (13UL)                    /*!< PWM3CLKPWR (Bit 13)                                   */
#define SYSTEM_PERICLKPWR0_PWM3CLKPWR_Msk (0x2000UL)                /*!< PWM3CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR0_PWM4CLKPWR_Pos (14UL)                    /*!< PWM4CLKPWR (Bit 14)                                   */
#define SYSTEM_PERICLKPWR0_PWM4CLKPWR_Msk (0x4000UL)                /*!< PWM4CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR0_PWM5CLKPWR_Pos (15UL)                    /*!< PWM5CLKPWR (Bit 15)                                   */
#define SYSTEM_PERICLKPWR0_PWM5CLKPWR_Msk (0x8000UL)                /*!< PWM5CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR0_PWM6CLKPWR_Pos (16UL)                    /*!< PWM6CLKPWR (Bit 16)                                   */
#define SYSTEM_PERICLKPWR0_PWM6CLKPWR_Msk (0x10000UL)               /*!< PWM6CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR0_PWM7CLKPWR_Pos (17UL)                    /*!< PWM7CLKPWR (Bit 17)                                   */
#define SYSTEM_PERICLKPWR0_PWM7CLKPWR_Msk (0x20000UL)               /*!< PWM7CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR0_PWM8CLKPWR_Pos (18UL)                    /*!< PWM8CLKPWR (Bit 18)                                   */
#define SYSTEM_PERICLKPWR0_PWM8CLKPWR_Msk (0x40000UL)               /*!< PWM8CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR0_PWM9CLKPWR_Pos (19UL)                    /*!< PWM9CLKPWR (Bit 19)                                   */
#define SYSTEM_PERICLKPWR0_PWM9CLKPWR_Msk (0x80000UL)               /*!< PWM9CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR0_PWM10CLKPWR_Pos (20UL)                   /*!< PWM10CLKPWR (Bit 20)                                  */
#define SYSTEM_PERICLKPWR0_PWM10CLKPWR_Msk (0x100000UL)             /*!< PWM10CLKPWR (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR0_PWM11CLKPWR_Pos (21UL)                   /*!< PWM11CLKPWR (Bit 21)                                  */
#define SYSTEM_PERICLKPWR0_PWM11CLKPWR_Msk (0x200000UL)             /*!< PWM11CLKPWR (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR0_ESPICLKPWR_Pos (22UL)                    /*!< ESPICLKPWR (Bit 22)                                   */
#define SYSTEM_PERICLKPWR0_ESPICLKPWR_Msk (0x400000UL)              /*!< ESPICLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR0_KBCCLKPWR_Pos  (23UL)                    /*!< KBCCLKPWR (Bit 23)                                    */
#define SYSTEM_PERICLKPWR0_KBCCLKPWR_Msk  (0x800000UL)              /*!< KBCCLKPWR (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR0_ACPI0CLKPWR_Pos (24UL)                   /*!< ACPI0CLKPWR (Bit 24)                                  */
#define SYSTEM_PERICLKPWR0_ACPI0CLKPWR_Msk (0x1000000UL)            /*!< ACPI0CLKPWR (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR0_ACPI1CLKPWR_Pos (25UL)                   /*!< ACPI1CLKPWR (Bit 25)                                  */
#define SYSTEM_PERICLKPWR0_ACPI1CLKPWR_Msk (0x2000000UL)            /*!< ACPI1CLKPWR (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR0_ACPI2CLKPWR_Pos (26UL)                   /*!< ACPI2CLKPWR (Bit 26)                                  */
#define SYSTEM_PERICLKPWR0_ACPI2CLKPWR_Msk (0x4000000UL)            /*!< ACPI2CLKPWR (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR0_ACPI3CLKPWR_Pos (27UL)                   /*!< ACPI3CLKPWR (Bit 27)                                  */
#define SYSTEM_PERICLKPWR0_ACPI3CLKPWR_Msk (0x8000000UL)            /*!< ACPI3CLKPWR (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR0_ACPI4CLKPWR_Pos (28UL)                   /*!< ACPI4CLKPWR (Bit 28)                                  */
#define SYSTEM_PERICLKPWR0_ACPI4CLKPWR_Msk (0x10000000UL)           /*!< ACPI4CLKPWR (Bitfield-Mask: 0x01)                     */
#define SYSTEM_PERICLKPWR0_P80CLKPWR_Pos  (29UL)                    /*!< P80CLKPWR (Bit 29)                                    */
#define SYSTEM_PERICLKPWR0_P80CLKPWR_Msk  (0x20000000UL)            /*!< P80CLKPWR (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR0_EMI0CLKPWR_Pos (30UL)                    /*!< EMI0CLKPWR (Bit 30)                                   */
#define SYSTEM_PERICLKPWR0_EMI0CLKPWR_Msk (0x40000000UL)            /*!< EMI0CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR0_EMI1CLKPWR_Pos (31UL)                    /*!< EMI1CLKPWR (Bit 31)                                   */
#define SYSTEM_PERICLKPWR0_EMI1CLKPWR_Msk (0x80000000UL)            /*!< EMI1CLKPWR (Bitfield-Mask: 0x01)                      */
/* ======================================================  UARTCLKPWR  ======================================================= */
#define SYSTEM_UARTCLKPWR_PWR_Pos         (0UL)                     /*!< PWR (Bit 0)                                           */
#define SYSTEM_UARTCLKPWR_PWR_Msk         (0x1UL)                   /*!< PWR (Bitfield-Mask: 0x01)                             */
#define SYSTEM_UARTCLKPWR_CLKSRC_Pos      (1UL)                     /*!< CLKSRC (Bit 1)                                        */
#define SYSTEM_UARTCLKPWR_CLKSRC_Msk      (0x2UL)                   /*!< CLKSRC (Bitfield-Mask: 0x01)                          */
#define SYSTEM_UARTCLKPWR_DIV_Pos         (2UL)                     /*!< DIV (Bit 2)                                           */
#define SYSTEM_UARTCLKPWR_DIV_Msk         (0xcUL)                   /*!< DIV (Bitfield-Mask: 0x03)                             */
/* ========================================================  SYSCLK  ========================================================= */
#define SYSTEM_SYSCLK_PLLBYPASS_Pos       (0UL)                     /*!< PLLBYPASS (Bit 0)                                     */
#define SYSTEM_SYSCLK_PLLBYPASS_Msk       (0x1UL)                   /*!< PLLBYPASS (Bitfield-Mask: 0x01)                       */
#define SYSTEM_SYSCLK_CLKSRC_Pos          (1UL)                     /*!< CLKSRC (Bit 1)                                        */
#define SYSTEM_SYSCLK_CLKSRC_Msk          (0x2UL)                   /*!< CLKSRC (Bitfield-Mask: 0x01)                          */
#define SYSTEM_SYSCLK_DIV_Pos             (2UL)                     /*!< DIV (Bit 2)                                           */
#define SYSTEM_SYSCLK_DIV_Msk             (0x4UL)                   /*!< DIV (Bitfield-Mask: 0x01)                             */
/* =======================================================  ADCCLKPWR  ======================================================= */
#define SYSTEM_ADCCLKPWR_PWR_Pos          (0UL)                     /*!< PWR (Bit 0)                                           */
#define SYSTEM_ADCCLKPWR_PWR_Msk          (0x1UL)                   /*!< PWR (Bitfield-Mask: 0x01)                             */
#define SYSTEM_ADCCLKPWR_CLKSRC_Pos       (1UL)                     /*!< CLKSRC (Bit 1)                                        */
#define SYSTEM_ADCCLKPWR_CLKSRC_Msk       (0x2UL)                   /*!< CLKSRC (Bitfield-Mask: 0x01)                          */
#define SYSTEM_ADCCLKPWR_DIV_Pos          (2UL)                     /*!< DIV (Bit 2)                                           */
#define SYSTEM_ADCCLKPWR_DIV_Msk          (0x1cUL)                  /*!< DIV (Bitfield-Mask: 0x07)                             */
/* ======================================================  PERICLKPWR1  ====================================================== */
#define SYSTEM_PERICLKPWR1_EMI2CLKPWR_Pos (0UL)                     /*!< EMI2CLKPWR (Bit 0)                                    */
#define SYSTEM_PERICLKPWR1_EMI2CLKPWR_Msk (0x1UL)                   /*!< EMI2CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_EMI3CLKPWR_Pos (1UL)                     /*!< EMI3CLKPWR (Bit 1)                                    */
#define SYSTEM_PERICLKPWR1_EMI3CLKPWR_Msk (0x2UL)                   /*!< EMI3CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_EMI4CLKPWR_Pos (2UL)                     /*!< EMI4CLKPWR (Bit 2)                                    */
#define SYSTEM_PERICLKPWR1_EMI4CLKPWR_Msk (0x4UL)                   /*!< EMI4CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_EMI5CLKPWR_Pos (3UL)                     /*!< EMI5CLKPWR (Bit 3)                                    */
#define SYSTEM_PERICLKPWR1_EMI5CLKPWR_Msk (0x8UL)                   /*!< EMI5CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_EMI6CLKPWR_Pos (4UL)                     /*!< EMI6CLKPWR (Bit 4)                                    */
#define SYSTEM_PERICLKPWR1_EMI6CLKPWR_Msk (0x10UL)                  /*!< EMI6CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_EMI7CLKPWR_Pos (5UL)                     /*!< EMI7CLKPWR (Bit 5)                                    */
#define SYSTEM_PERICLKPWR1_EMI7CLKPWR_Msk (0x20UL)                  /*!< EMI7CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_OTPDMACLKPWR_Pos (6UL)                   /*!< OTPDMACLKPWR (Bit 6)                                  */
#define SYSTEM_PERICLKPWR1_OTPDMACLKPWR_Msk (0x40UL)                /*!< OTPDMACLKPWR (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKPWR1_RC25MCALCLKPWR_Pos (7UL)                 /*!< RC25MCALCLKPWR (Bit 7)                                */
#define SYSTEM_PERICLKPWR1_RC25MCALCLKPWR_Msk (0x80UL)              /*!< RC25MCALCLKPWR (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKPWR1_RC32KCALCLKPWR_Pos (8UL)                 /*!< RC32KCALCLKPWR (Bit 8)                                */
#define SYSTEM_PERICLKPWR1_RC32KCALCLKPWR_Msk (0x100UL)             /*!< RC32KCALCLKPWR (Bitfield-Mask: 0x01)                  */
#define SYSTEM_PERICLKPWR1_I3C0CLKPWR_Pos (9UL)                     /*!< I3C0CLKPWR (Bit 9)                                    */
#define SYSTEM_PERICLKPWR1_I3C0CLKPWR_Msk (0x200UL)                 /*!< I3C0CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_I3C1CLKPWR_Pos (10UL)                    /*!< I3C1CLKPWR (Bit 10)                                   */
#define SYSTEM_PERICLKPWR1_I3C1CLKPWR_Msk (0x400UL)                 /*!< I3C1CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_I2CAUTOPWRCLKPWR_Pos (11UL)              /*!< I2CAUTOPWRCLKPWR (Bit 11)                             */
#define SYSTEM_PERICLKPWR1_I2CAUTOPWRCLKPWR_Msk (0x800UL)           /*!< I2CAUTOPWRCLKPWR (Bitfield-Mask: 0x01)                */
#define SYSTEM_PERICLKPWR1_MCCLKPWR_Pos   (12UL)                    /*!< MCCLKPWR (Bit 12)                                     */
#define SYSTEM_PERICLKPWR1_MCCLKPWR_Msk   (0x1000UL)                /*!< MCCLKPWR (Bitfield-Mask: 0x01)                        */
#define SYSTEM_PERICLKPWR1_TMR0CLKPWR_Pos (13UL)                    /*!< TMR0CLKPWR (Bit 13)                                   */
#define SYSTEM_PERICLKPWR1_TMR0CLKPWR_Msk (0x2000UL)                /*!< TMR0CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_TMR1CLKPWR_Pos (14UL)                    /*!< TMR1CLKPWR (Bit 14)                                   */
#define SYSTEM_PERICLKPWR1_TMR1CLKPWR_Msk (0x4000UL)                /*!< TMR1CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_TMR2CLKPWR_Pos (15UL)                    /*!< TMR2CLKPWR (Bit 15)                                   */
#define SYSTEM_PERICLKPWR1_TMR2CLKPWR_Msk (0x8000UL)                /*!< TMR2CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_TMR3CLKPWR_Pos (16UL)                    /*!< TMR3CLKPWR (Bit 16)                                   */
#define SYSTEM_PERICLKPWR1_TMR3CLKPWR_Msk (0x10000UL)               /*!< TMR3CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_TMR4CLKPWR_Pos (17UL)                    /*!< TMR4CLKPWR (Bit 17)                                   */
#define SYSTEM_PERICLKPWR1_TMR4CLKPWR_Msk (0x20000UL)               /*!< TMR4CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_TMR5CLKPWR_Pos (18UL)                    /*!< TMR5CLKPWR (Bit 18)                                   */
#define SYSTEM_PERICLKPWR1_TMR5CLKPWR_Msk (0x40000UL)               /*!< TMR5CLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_RTMRCLKPWR_Pos (19UL)                    /*!< RTMRCLKPWR (Bit 19)                                   */
#define SYSTEM_PERICLKPWR1_RTMRCLKPWR_Msk (0x80000UL)               /*!< RTMRCLKPWR (Bitfield-Mask: 0x01)                      */
#define SYSTEM_PERICLKPWR1_SLWTMR0CLKPWR_Pos (20UL)                 /*!< SLWTMR0CLKPWR (Bit 20)                                */
#define SYSTEM_PERICLKPWR1_SLWTMR0CLKPWR_Msk (0x100000UL)           /*!< SLWTMR0CLKPWR (Bitfield-Mask: 0x01)                   */
#define SYSTEM_PERICLKPWR1_SLWTMR1CLKPWR_Pos (21UL)                 /*!< SLWTMR1CLKPWR (Bit 21)                                */
#define SYSTEM_PERICLKPWR1_SLWTMR1CLKPWR_Msk (0x200000UL)           /*!< SLWTMR1CLKPWR (Bitfield-Mask: 0x01)                   */
/* =======================================================  FUNOPTION  ======================================================= */
#define SYSTEM_FUNOPTION_SRAMRANGE_Pos    (0UL)                     /*!< SRAMRANGE (Bit 0)                                     */
#define SYSTEM_FUNOPTION_SRAMRANGE_Msk    (0x1UL)                   /*!< SRAMRANGE (Bitfield-Mask: 0x01)                       */
#define SYSTEM_FUNOPTION_PUFACCESSEN_Pos  (1UL)                     /*!< PUFACCESSEN (Bit 1)                                   */
#define SYSTEM_FUNOPTION_PUFACCESSEN_Msk  (0x2UL)                   /*!< PUFACCESSEN (Bitfield-Mask: 0x01)                     */
#define SYSTEM_FUNOPTION_LALUACCESSEN_Pos (2UL)                     /*!< LALUACCESSEN (Bit 2)                                  */
#define SYSTEM_FUNOPTION_LALUACCESSEN_Msk (0x4UL)                   /*!< LALUACCESSEN (Bitfield-Mask: 0x01)                    */
#define SYSTEM_FUNOPTION_DIOACCESSEN_Pos  (3UL)                     /*!< DIOACCESSEN (Bit 3)                                   */
#define SYSTEM_FUNOPTION_DIOACCESSEN_Msk  (0x8UL)                   /*!< DIOACCESSEN (Bitfield-Mask: 0x01)                     */
/* ======================================================  CPURSTADDR0  ====================================================== */
/* ======================================================  CPURSTADDR1  ====================================================== */
/* ========================================================  SLPCTRL  ======================================================== */
#define SYSTEM_SLPCTRL_CPUDBGEN_Pos       (0UL)                     /*!< CPUDBGEN (Bit 0)                                      */
#define SYSTEM_SLPCTRL_CPUDBGEN_Msk       (0x1UL)                   /*!< CPUDBGEN (Bitfield-Mask: 0x01)                        */
#define SYSTEM_SLPCTRL_SLPMDSEL_Pos       (1UL)                     /*!< SLPMDSEL (Bit 1)                                      */
#define SYSTEM_SLPCTRL_SLPMDSEL_Msk       (0x2UL)                   /*!< SLPMDSEL (Bitfield-Mask: 0x01)                        */
#define SYSTEM_SLPCTRL_ESPIWKEN_Pos       (2UL)                     /*!< ESPIWKEN (Bit 2)                                      */
#define SYSTEM_SLPCTRL_ESPIWKEN_Msk       (0x4UL)                   /*!< ESPIWKEN (Bitfield-Mask: 0x01)                        */
#define SYSTEM_SLPCTRL_PS2WKEN_Pos        (3UL)                     /*!< PS2WKEN (Bit 3)                                       */
#define SYSTEM_SLPCTRL_PS2WKEN_Msk        (0x8UL)                   /*!< PS2WKEN (Bitfield-Mask: 0x01)                         */
#define SYSTEM_SLPCTRL_I2CWKEN_Pos        (4UL)                     /*!< I2CWKEN (Bit 4)                                       */
#define SYSTEM_SLPCTRL_I2CWKEN_Msk        (0x10UL)                  /*!< I2CWKEN (Bitfield-Mask: 0x01)                         */
#define SYSTEM_SLPCTRL_GPIOWKEN_Pos       (5UL)                     /*!< GPIOWKEN (Bit 5)                                      */
#define SYSTEM_SLPCTRL_GPIOWKEN_Msk       (0x20UL)                  /*!< GPIOWKEN (Bitfield-Mask: 0x01)                        */
#define SYSTEM_SLPCTRL_SPISLVWKEN_Pos     (6UL)                     /*!< SPISLVWKEN (Bit 6)                                    */
#define SYSTEM_SLPCTRL_SPISLVWKEN_Msk     (0x40UL)                  /*!< SPISLVWKEN (Bitfield-Mask: 0x01)                      */
/* ========================================================  RSTCTRL  ======================================================== */
#define SYSTEM_RSTCTRL_SWRST_Pos          (0UL)                     /*!< SWRST (Bit 0)                                         */
#define SYSTEM_RSTCTRL_SWRST_Msk          (0x1UL)                   /*!< SWRST (Bitfield-Mask: 0x01)                           */
#define SYSTEM_RSTCTRL_LDO2RST_Pos        (1UL)                     /*!< LDO2RST (Bit 1)                                       */
#define SYSTEM_RSTCTRL_LDO2RST_Msk        (0x2UL)                   /*!< LDO2RST (Bitfield-Mask: 0x01)                         */
/* ======================================================  MSRAMCTRL0  ======================================================= */
/* ======================================================  MSRAMCTRL1  ======================================================= */
/* ======================================================  MSRAMCTRL2  ======================================================= */
/* ======================================================  MSRAMCTRL3  ======================================================= */
/* =====================================================  ESPISRAMCTRL  ====================================================== */
/* =======================================================  VIVOCTRL  ======================================================== */
#define SYSTEM_VIVOCTRL_VI0MDSEL_Pos      (0UL)                     /*!< VI0MDSEL (Bit 0)                                      */
#define SYSTEM_VIVOCTRL_VI0MDSEL_Msk      (0x1UL)                   /*!< VI0MDSEL (Bitfield-Mask: 0x01)                        */
#define SYSTEM_VIVOCTRL_VI1MDSEL_Pos      (1UL)                     /*!< VI1MDSEL (Bit 1)                                      */
#define SYSTEM_VIVOCTRL_VI1MDSEL_Msk      (0x2UL)                   /*!< VI1MDSEL (Bitfield-Mask: 0x01)                        */
#define SYSTEM_VIVOCTRL_VI2MDSEL_Pos      (2UL)                     /*!< VI2MDSEL (Bit 2)                                      */
#define SYSTEM_VIVOCTRL_VI2MDSEL_Msk      (0x4UL)                   /*!< VI2MDSEL (Bitfield-Mask: 0x01)                        */
#define SYSTEM_VIVOCTRL_VI3MDSEL_Pos      (3UL)                     /*!< VI3MDSEL (Bit 3)                                      */
#define SYSTEM_VIVOCTRL_VI3MDSEL_Msk      (0x8UL)                   /*!< VI3MDSEL (Bitfield-Mask: 0x01)                        */
#define SYSTEM_VIVOCTRL_VI4MDSEL_Pos      (4UL)                     /*!< VI4MDSEL (Bit 4)                                      */
#define SYSTEM_VIVOCTRL_VI4MDSEL_Msk      (0x10UL)                  /*!< VI4MDSEL (Bitfield-Mask: 0x01)                        */
#define SYSTEM_VIVOCTRL_VI5MDSEL_Pos      (5UL)                     /*!< VI5MDSEL (Bit 5)                                      */
#define SYSTEM_VIVOCTRL_VI5MDSEL_Msk      (0x20UL)                  /*!< VI5MDSEL (Bitfield-Mask: 0x01)                        */
#define SYSTEM_VIVOCTRL_VI0STS_Pos        (6UL)                     /*!< VI0STS (Bit 6)                                        */
#define SYSTEM_VIVOCTRL_VI0STS_Msk        (0x40UL)                  /*!< VI0STS (Bitfield-Mask: 0x01)                          */
#define SYSTEM_VIVOCTRL_VI1STS_Pos        (7UL)                     /*!< VI1STS (Bit 7)                                        */
#define SYSTEM_VIVOCTRL_VI1STS_Msk        (0x80UL)                  /*!< VI1STS (Bitfield-Mask: 0x01)                          */
#define SYSTEM_VIVOCTRL_VI2STS_Pos        (8UL)                     /*!< VI2STS (Bit 8)                                        */
#define SYSTEM_VIVOCTRL_VI2STS_Msk        (0x100UL)                 /*!< VI2STS (Bitfield-Mask: 0x01)                          */
#define SYSTEM_VIVOCTRL_VI3STS_Pos        (9UL)                     /*!< VI3STS (Bit 9)                                        */
#define SYSTEM_VIVOCTRL_VI3STS_Msk        (0x200UL)                 /*!< VI3STS (Bitfield-Mask: 0x01)                          */
#define SYSTEM_VIVOCTRL_VI4STS_Pos        (10UL)                    /*!< VI4STS (Bit 10)                                       */
#define SYSTEM_VIVOCTRL_VI4STS_Msk        (0x400UL)                 /*!< VI4STS (Bitfield-Mask: 0x01)                          */
#define SYSTEM_VIVOCTRL_VI5STS_Pos        (11UL)                    /*!< VI5STS (Bit 11)                                       */
#define SYSTEM_VIVOCTRL_VI5STS_Msk        (0x800UL)                 /*!< VI5STS (Bitfield-Mask: 0x01)                          */
#define SYSTEM_VIVOCTRL_VI0POL_Pos        (12UL)                    /*!< VI0POL (Bit 12)                                       */
#define SYSTEM_VIVOCTRL_VI0POL_Msk        (0x1000UL)                /*!< VI0POL (Bitfield-Mask: 0x01)                          */
#define SYSTEM_VIVOCTRL_VI1POL_Pos        (13UL)                    /*!< VI1POL (Bit 13)                                       */
#define SYSTEM_VIVOCTRL_VI1POL_Msk        (0x2000UL)                /*!< VI1POL (Bitfield-Mask: 0x01)                          */
#define SYSTEM_VIVOCTRL_VI2POL_Pos        (14UL)                    /*!< VI2POL (Bit 14)                                       */
#define SYSTEM_VIVOCTRL_VI2POL_Msk        (0x4000UL)                /*!< VI2POL (Bitfield-Mask: 0x01)                          */
#define SYSTEM_VIVOCTRL_VI3POL_Pos        (15UL)                    /*!< VI3POL (Bit 15)                                       */
#define SYSTEM_VIVOCTRL_VI3POL_Msk        (0x8000UL)                /*!< VI3POL (Bitfield-Mask: 0x01)                          */
#define SYSTEM_VIVOCTRL_VI4POL_Pos        (16UL)                    /*!< VI4POL (Bit 16)                                       */
#define SYSTEM_VIVOCTRL_VI4POL_Msk        (0x10000UL)               /*!< VI4POL (Bitfield-Mask: 0x01)                          */
#define SYSTEM_VIVOCTRL_VI5POL_Pos        (17UL)                    /*!< VI5POL (Bit 17)                                       */
#define SYSTEM_VIVOCTRL_VI5POL_Msk        (0x20000UL)               /*!< VI5POL (Bitfield-Mask: 0x01)                          */
#define SYSTEM_VIVOCTRL_REGWREN_Pos       (30UL)                    /*!< REGWREN (Bit 30)                                      */
#define SYSTEM_VIVOCTRL_REGWREN_Msk       (0x40000000UL)            /*!< REGWREN (Bitfield-Mask: 0x01)                         */
#define SYSTEM_VIVOCTRL_VOMDSEL_Pos       (31UL)                    /*!< VOMDSEL (Bit 31)                                      */
#define SYSTEM_VIVOCTRL_VOMDSEL_Msk       (0x80000000UL)            /*!< VOMDSEL (Bitfield-Mask: 0x01)                         */
/* ========================================================  LDOCTRL  ======================================================== */
#define SYSTEM_LDOCTRL_LDO1VOL_Pos        (0UL)                     /*!< LDO1VOL (Bit 0)                                       */
#define SYSTEM_LDOCTRL_LDO1VOL_Msk        (0x7UL)                   /*!< LDO1VOL (Bitfield-Mask: 0x07)                         */
#define SYSTEM_LDOCTRL_LDO2PWREN_Pos      (3UL)                     /*!< LDO2PWREN (Bit 3)                                     */
#define SYSTEM_LDOCTRL_LDO2PWREN_Msk      (0x8UL)                   /*!< LDO2PWREN (Bitfield-Mask: 0x01)                       */
#define SYSTEM_LDOCTRL_LDO2VOL_Pos        (4UL)                     /*!< LDO2VOL (Bit 4)                                       */
#define SYSTEM_LDOCTRL_LDO2VOL_Msk        (0x70UL)                  /*!< LDO2VOL (Bitfield-Mask: 0x07)                         */
#define SYSTEM_LDOCTRL_LDO3PWREN_Pos      (7UL)                     /*!< LDO3PWREN (Bit 7)                                     */
#define SYSTEM_LDOCTRL_LDO3PWREN_Msk      (0x80UL)                  /*!< LDO3PWREN (Bitfield-Mask: 0x01)                       */
#define SYSTEM_LDOCTRL_LDO3VOL_Pos        (8UL)                     /*!< LDO3VOL (Bit 8)                                       */
#define SYSTEM_LDOCTRL_LDO3VOL_Msk        (0x700UL)                 /*!< LDO3VOL (Bitfield-Mask: 0x07)                         */
/* =======================================================  RC25MCTRL  ======================================================= */
#define SYSTEM_RC25MCTRL_PWREN_Pos        (0UL)                     /*!< PWREN (Bit 0)                                         */
#define SYSTEM_RC25MCTRL_PWREN_Msk        (0x1UL)                   /*!< PWREN (Bitfield-Mask: 0x01)                           */
#define SYSTEM_RC25MCTRL_CALCURR_Pos      (1UL)                     /*!< CALCURR (Bit 1)                                       */
#define SYSTEM_RC25MCTRL_CALCURR_Msk      (0xfeUL)                  /*!< CALCURR (Bitfield-Mask: 0x7f)                         */
#define SYSTEM_RC25MCTRL_ISEL_Pos         (8UL)                     /*!< ISEL (Bit 8)                                          */
#define SYSTEM_RC25MCTRL_ISEL_Msk         (0x100UL)                 /*!< ISEL (Bitfield-Mask: 0x01)                            */
#define SYSTEM_RC25MCTRL_TSEL_Pos         (9UL)                     /*!< TSEL (Bit 9)                                          */
#define SYSTEM_RC25MCTRL_TSEL_Msk         (0x600UL)                 /*!< TSEL (Bitfield-Mask: 0x03)                            */
#define SYSTEM_RC25MCTRL_CAPSEL_Pos       (11UL)                    /*!< CAPSEL (Bit 11)                                       */
#define SYSTEM_RC25MCTRL_CAPSEL_Msk       (0x1800UL)                /*!< CAPSEL (Bitfield-Mask: 0x03)                          */
/* ========================================================  PLLCTRL  ======================================================== */
#define SYSTEM_PLLCTRL_PWREN_Pos          (0UL)                     /*!< PWREN (Bit 0)                                         */
#define SYSTEM_PLLCTRL_PWREN_Msk          (0x1UL)                   /*!< PWREN (Bitfield-Mask: 0x01)                           */
#define SYSTEM_PLLCTRL_RDY_Pos            (19UL)                    /*!< RDY (Bit 19)                                          */
#define SYSTEM_PLLCTRL_RDY_Msk            (0x80000UL)               /*!< RDY (Bitfield-Mask: 0x01)                             */
/* =======================================================  POR1CTRL  ======================================================== */
/* ====================================================  CRYPTOSRAMCTRL  ===================================================== */
/* ======================================================  ADCLDOCTRL  ======================================================= */
/* ======================================================  ADCANACTRL  ======================================================= */
/* ======================================================  ROMBISTCTRL  ====================================================== */
/* =====================================================  BTRMBISTRES0  ====================================================== */
/* =====================================================  BTRMBISTRES1  ====================================================== */
/* ====================================================  LALURMBISTRES0  ===================================================== */
/* ====================================================  LALURMBISTRES1  ===================================================== */
/* =====================================================  TESTOUTCTRL0  ====================================================== */
#define SYSTEM_TESTOUTCTRL0_TOUT0SEL_Pos  (0UL)                     /*!< TOUT0SEL (Bit 0)                                      */
#define SYSTEM_TESTOUTCTRL0_TOUT0SEL_Msk  (0x7fUL)                  /*!< TOUT0SEL (Bitfield-Mask: 0x7f)                        */
#define SYSTEM_TESTOUTCTRL0_TOUT1SEL_Pos  (8UL)                     /*!< TOUT1SEL (Bit 8)                                      */
#define SYSTEM_TESTOUTCTRL0_TOUT1SEL_Msk  (0x7f00UL)                /*!< TOUT1SEL (Bitfield-Mask: 0x7f)                        */
#define SYSTEM_TESTOUTCTRL0_TOUT2SEL_Pos  (16UL)                    /*!< TOUT2SEL (Bit 16)                                     */
#define SYSTEM_TESTOUTCTRL0_TOUT2SEL_Msk  (0x7f0000UL)              /*!< TOUT2SEL (Bitfield-Mask: 0x7f)                        */
#define SYSTEM_TESTOUTCTRL0_TOUT3SEL_Pos  (24UL)                    /*!< TOUT3SEL (Bit 24)                                     */
#define SYSTEM_TESTOUTCTRL0_TOUT3SEL_Msk  (0xff000000UL)            /*!< TOUT3SEL (Bitfield-Mask: 0xff)                        */
/* =====================================================  TESTOUTCTRL1  ====================================================== */
#define SYSTEM_TESTOUTCTRL1_TOUT4SEL_Pos  (0UL)                     /*!< TOUT4SEL (Bit 0)                                      */
#define SYSTEM_TESTOUTCTRL1_TOUT4SEL_Msk  (0x7fUL)                  /*!< TOUT4SEL (Bitfield-Mask: 0x7f)                        */
#define SYSTEM_TESTOUTCTRL1_TOUT5SEL_Pos  (8UL)                     /*!< TOUT5SEL (Bit 8)                                      */
#define SYSTEM_TESTOUTCTRL1_TOUT5SEL_Msk  (0x7f00UL)                /*!< TOUT5SEL (Bitfield-Mask: 0x7f)                        */
#define SYSTEM_TESTOUTCTRL1_TOUT6SEL_Pos  (16UL)                    /*!< TOUT6SEL (Bit 16)                                     */
#define SYSTEM_TESTOUTCTRL1_TOUT6SEL_Msk  (0x7f0000UL)              /*!< TOUT6SEL (Bitfield-Mask: 0x7f)                        */
#define SYSTEM_TESTOUTCTRL1_TOUT7SEL_Pos  (24UL)                    /*!< TOUT7SEL (Bit 24)                                     */
#define SYSTEM_TESTOUTCTRL1_TOUT7SEL_Msk  (0xff000000UL)            /*!< TOUT7SEL (Bitfield-Mask: 0xff)                        */
/* =======================================================  RC32KCTRL  ======================================================= */
#define SYSTEM_RC32KCTRL_PWREN_Pos        (0UL)                     /*!< PWREN (Bit 0)                                         */
#define SYSTEM_RC32KCTRL_PWREN_Msk        (0x1UL)                   /*!< PWREN (Bitfield-Mask: 0x01)                           */
#define SYSTEM_RC32KCTRL_CAPSEL_Pos       (1UL)                     /*!< CAPSEL (Bit 1)                                        */
#define SYSTEM_RC32KCTRL_CAPSEL_Msk       (0x7eUL)                  /*!< CAPSEL (Bitfield-Mask: 0x3f)                          */
#define SYSTEM_RC32KCTRL_VREFSEL_Pos      (7UL)                     /*!< VREFSEL (Bit 7)                                       */
#define SYSTEM_RC32KCTRL_VREFSEL_Msk      (0x80UL)                  /*!< VREFSEL (Bitfield-Mask: 0x01)                         */
/* =======================================================  POR2CTRL  ======================================================== */
/* ======================================================  PERICLKPWR2  ====================================================== */
#define SYSTEM_PERICLKPWR2_RTCCLKPWR_Pos  (0UL)                     /*!< RTCCLKPWR (Bit 0)                                     */
#define SYSTEM_PERICLKPWR2_RTCCLKPWR_Msk  (0x1UL)                   /*!< RTCCLKPWR (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR2_WDTCLKPWR_Pos  (1UL)                     /*!< WDTCLKPWR (Bit 1)                                     */
#define SYSTEM_PERICLKPWR2_WDTCLKPWR_Msk  (0x2UL)                   /*!< WDTCLKPWR (Bitfield-Mask: 0x01)                       */
#define SYSTEM_PERICLKPWR2_PWRBTNCLKPWR_Pos (2UL)                   /*!< PWRBTNCLKPWR (Bit 2)                                  */
#define SYSTEM_PERICLKPWR2_PWRBTNCLKPWR_Msk (0x4UL)                 /*!< PWRBTNCLKPWR (Bitfield-Mask: 0x01)                    */
#define SYSTEM_PERICLKPWR2_RC32KSRCSEL_Pos (30UL)                   /*!< RC32KSRCSEL (Bit 30)                                  */
#define SYSTEM_PERICLKPWR2_RC32KSRCSEL_Msk (0xc0000000UL)           /*!< RC32KSRCSEL (Bitfield-Mask: 0x03)                     */
/* ======================================================  BATSRAMCTRL  ====================================================== */


/* =========================================================================================================================== */
/* ================                                          OTPDMA                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  STS  ========================================================== */
#define OTPDMA_STS_DONE_Pos               (0UL)                     /*!< DONE (Bit 0)                                          */
#define OTPDMA_STS_DONE_Msk               (0x1UL)                   /*!< DONE (Bitfield-Mask: 0x01)                            */
/* ========================================================  MSRAM0  ========================================================= */
#define OTPDMA_MSRAM0_RME_Pos             (0UL)                     /*!< RME (Bit 0)                                           */
#define OTPDMA_MSRAM0_RME_Msk             (0x1UL)                   /*!< RME (Bitfield-Mask: 0x01)                             */
#define OTPDMA_MSRAM0_RM_Pos              (1UL)                     /*!< RM (Bit 1)                                            */
#define OTPDMA_MSRAM0_RM_Msk              (0x1eUL)                  /*!< RM (Bitfield-Mask: 0x0f)                              */
#define OTPDMA_MSRAM0_RA_Pos              (5UL)                     /*!< RA (Bit 5)                                            */
#define OTPDMA_MSRAM0_RA_Msk              (0x60UL)                  /*!< RA (Bitfield-Mask: 0x03)                              */
#define OTPDMA_MSRAM0_WA_Pos              (7UL)                     /*!< WA (Bit 7)                                            */
#define OTPDMA_MSRAM0_WA_Msk              (0x380UL)                 /*!< WA (Bitfield-Mask: 0x07)                              */
#define OTPDMA_MSRAM0_WPULSE_Pos          (10UL)                    /*!< WPULSE (Bit 10)                                       */
#define OTPDMA_MSRAM0_WPULSE_Msk          (0x1c00UL)                /*!< WPULSE (Bitfield-Mask: 0x07)                          */
#define OTPDMA_MSRAM0_LS_Pos              (13UL)                    /*!< LS (Bit 13)                                           */
#define OTPDMA_MSRAM0_LS_Msk              (0x2000UL)                /*!< LS (Bitfield-Mask: 0x01)                              */
#define OTPDMA_MSRAM0_VALID_Pos           (31UL)                    /*!< VALID (Bit 31)                                        */
#define OTPDMA_MSRAM0_VALID_Msk           (0x80000000UL)            /*!< VALID (Bitfield-Mask: 0x01)                           */
/* ========================================================  MSRAM1  ========================================================= */
#define OTPDMA_MSRAM1_RME_Pos             (0UL)                     /*!< RME (Bit 0)                                           */
#define OTPDMA_MSRAM1_RME_Msk             (0x1UL)                   /*!< RME (Bitfield-Mask: 0x01)                             */
#define OTPDMA_MSRAM1_RM_Pos              (1UL)                     /*!< RM (Bit 1)                                            */
#define OTPDMA_MSRAM1_RM_Msk              (0x1eUL)                  /*!< RM (Bitfield-Mask: 0x0f)                              */
#define OTPDMA_MSRAM1_RA_Pos              (5UL)                     /*!< RA (Bit 5)                                            */
#define OTPDMA_MSRAM1_RA_Msk              (0x60UL)                  /*!< RA (Bitfield-Mask: 0x03)                              */
#define OTPDMA_MSRAM1_WA_Pos              (7UL)                     /*!< WA (Bit 7)                                            */
#define OTPDMA_MSRAM1_WA_Msk              (0x380UL)                 /*!< WA (Bitfield-Mask: 0x07)                              */
#define OTPDMA_MSRAM1_WPULSE_Pos          (10UL)                    /*!< WPULSE (Bit 10)                                       */
#define OTPDMA_MSRAM1_WPULSE_Msk          (0x1c00UL)                /*!< WPULSE (Bitfield-Mask: 0x07)                          */
#define OTPDMA_MSRAM1_LS_Pos              (13UL)                    /*!< LS (Bit 13)                                           */
#define OTPDMA_MSRAM1_LS_Msk              (0x2000UL)                /*!< LS (Bitfield-Mask: 0x01)                              */
#define OTPDMA_MSRAM1_VALID_Pos           (31UL)                    /*!< VALID (Bit 31)                                        */
#define OTPDMA_MSRAM1_VALID_Msk           (0x80000000UL)            /*!< VALID (Bitfield-Mask: 0x01)                           */
/* ========================================================  MSRAM2  ========================================================= */
#define OTPDMA_MSRAM2_RME_Pos             (0UL)                     /*!< RME (Bit 0)                                           */
#define OTPDMA_MSRAM2_RME_Msk             (0x1UL)                   /*!< RME (Bitfield-Mask: 0x01)                             */
#define OTPDMA_MSRAM2_RM_Pos              (1UL)                     /*!< RM (Bit 1)                                            */
#define OTPDMA_MSRAM2_RM_Msk              (0x1eUL)                  /*!< RM (Bitfield-Mask: 0x0f)                              */
#define OTPDMA_MSRAM2_RA_Pos              (5UL)                     /*!< RA (Bit 5)                                            */
#define OTPDMA_MSRAM2_RA_Msk              (0x60UL)                  /*!< RA (Bitfield-Mask: 0x03)                              */
#define OTPDMA_MSRAM2_WA_Pos              (7UL)                     /*!< WA (Bit 7)                                            */
#define OTPDMA_MSRAM2_WA_Msk              (0x380UL)                 /*!< WA (Bitfield-Mask: 0x07)                              */
#define OTPDMA_MSRAM2_WPULSE_Pos          (10UL)                    /*!< WPULSE (Bit 10)                                       */
#define OTPDMA_MSRAM2_WPULSE_Msk          (0x1c00UL)                /*!< WPULSE (Bitfield-Mask: 0x07)                          */
#define OTPDMA_MSRAM2_LS_Pos              (13UL)                    /*!< LS (Bit 13)                                           */
#define OTPDMA_MSRAM2_LS_Msk              (0x2000UL)                /*!< LS (Bitfield-Mask: 0x01)                              */
#define OTPDMA_MSRAM2_VALID_Pos           (31UL)                    /*!< VALID (Bit 31)                                        */
#define OTPDMA_MSRAM2_VALID_Msk           (0x80000000UL)            /*!< VALID (Bitfield-Mask: 0x01)                           */
/* ========================================================  MSRAM3  ========================================================= */
#define OTPDMA_MSRAM3_RME_Pos             (0UL)                     /*!< RME (Bit 0)                                           */
#define OTPDMA_MSRAM3_RME_Msk             (0x1UL)                   /*!< RME (Bitfield-Mask: 0x01)                             */
#define OTPDMA_MSRAM3_RM_Pos              (1UL)                     /*!< RM (Bit 1)                                            */
#define OTPDMA_MSRAM3_RM_Msk              (0x1eUL)                  /*!< RM (Bitfield-Mask: 0x0f)                              */
#define OTPDMA_MSRAM3_RA_Pos              (5UL)                     /*!< RA (Bit 5)                                            */
#define OTPDMA_MSRAM3_RA_Msk              (0x60UL)                  /*!< RA (Bitfield-Mask: 0x03)                              */
#define OTPDMA_MSRAM3_WA_Pos              (7UL)                     /*!< WA (Bit 7)                                            */
#define OTPDMA_MSRAM3_WA_Msk              (0x380UL)                 /*!< WA (Bitfield-Mask: 0x07)                              */
#define OTPDMA_MSRAM3_WPULSE_Pos          (10UL)                    /*!< WPULSE (Bit 10)                                       */
#define OTPDMA_MSRAM3_WPULSE_Msk          (0x1c00UL)                /*!< WPULSE (Bitfield-Mask: 0x07)                          */
#define OTPDMA_MSRAM3_LS_Pos              (13UL)                    /*!< LS (Bit 13)                                           */
#define OTPDMA_MSRAM3_LS_Msk              (0x2000UL)                /*!< LS (Bitfield-Mask: 0x01)                              */
#define OTPDMA_MSRAM3_VALID_Pos           (31UL)                    /*!< VALID (Bit 31)                                        */
#define OTPDMA_MSRAM3_VALID_Msk           (0x80000000UL)            /*!< VALID (Bitfield-Mask: 0x01)                           */
/* ========================================================  MSRAM4  ========================================================= */
#define OTPDMA_MSRAM4_RME_Pos             (0UL)                     /*!< RME (Bit 0)                                           */
#define OTPDMA_MSRAM4_RME_Msk             (0x1UL)                   /*!< RME (Bitfield-Mask: 0x01)                             */
#define OTPDMA_MSRAM4_RM_Pos              (1UL)                     /*!< RM (Bit 1)                                            */
#define OTPDMA_MSRAM4_RM_Msk              (0x1eUL)                  /*!< RM (Bitfield-Mask: 0x0f)                              */
#define OTPDMA_MSRAM4_RA_Pos              (5UL)                     /*!< RA (Bit 5)                                            */
#define OTPDMA_MSRAM4_RA_Msk              (0x60UL)                  /*!< RA (Bitfield-Mask: 0x03)                              */
#define OTPDMA_MSRAM4_WA_Pos              (7UL)                     /*!< WA (Bit 7)                                            */
#define OTPDMA_MSRAM4_WA_Msk              (0x380UL)                 /*!< WA (Bitfield-Mask: 0x07)                              */
#define OTPDMA_MSRAM4_WPULSE_Pos          (10UL)                    /*!< WPULSE (Bit 10)                                       */
#define OTPDMA_MSRAM4_WPULSE_Msk          (0x1c00UL)                /*!< WPULSE (Bitfield-Mask: 0x07)                          */
#define OTPDMA_MSRAM4_LS_Pos              (13UL)                    /*!< LS (Bit 13)                                           */
#define OTPDMA_MSRAM4_LS_Msk              (0x2000UL)                /*!< LS (Bitfield-Mask: 0x01)                              */
#define OTPDMA_MSRAM4_VALID_Pos           (31UL)                    /*!< VALID (Bit 31)                                        */
#define OTPDMA_MSRAM4_VALID_Msk           (0x80000000UL)            /*!< VALID (Bitfield-Mask: 0x01)                           */
/* ========================================================  MSRAM5  ========================================================= */
#define OTPDMA_MSRAM5_RME_Pos             (0UL)                     /*!< RME (Bit 0)                                           */
#define OTPDMA_MSRAM5_RME_Msk             (0x1UL)                   /*!< RME (Bitfield-Mask: 0x01)                             */
#define OTPDMA_MSRAM5_RM_Pos              (1UL)                     /*!< RM (Bit 1)                                            */
#define OTPDMA_MSRAM5_RM_Msk              (0x1eUL)                  /*!< RM (Bitfield-Mask: 0x0f)                              */
#define OTPDMA_MSRAM5_RA_Pos              (5UL)                     /*!< RA (Bit 5)                                            */
#define OTPDMA_MSRAM5_RA_Msk              (0x60UL)                  /*!< RA (Bitfield-Mask: 0x03)                              */
#define OTPDMA_MSRAM5_WA_Pos              (7UL)                     /*!< WA (Bit 7)                                            */
#define OTPDMA_MSRAM5_WA_Msk              (0x380UL)                 /*!< WA (Bitfield-Mask: 0x07)                              */
#define OTPDMA_MSRAM5_WPULSE_Pos          (10UL)                    /*!< WPULSE (Bit 10)                                       */
#define OTPDMA_MSRAM5_WPULSE_Msk          (0x1c00UL)                /*!< WPULSE (Bitfield-Mask: 0x07)                          */
#define OTPDMA_MSRAM5_LS_Pos              (13UL)                    /*!< LS (Bit 13)                                           */
#define OTPDMA_MSRAM5_LS_Msk              (0x2000UL)                /*!< LS (Bitfield-Mask: 0x01)                              */
#define OTPDMA_MSRAM5_VALID_Pos           (31UL)                    /*!< VALID (Bit 31)                                        */
#define OTPDMA_MSRAM5_VALID_Msk           (0x80000000UL)            /*!< VALID (Bitfield-Mask: 0x01)                           */
/* =======================================================  ESPISRAM  ======================================================== */
#define OTPDMA_ESPISRAM_RME_Pos           (0UL)                     /*!< RME (Bit 0)                                           */
#define OTPDMA_ESPISRAM_RME_Msk           (0x1UL)                   /*!< RME (Bitfield-Mask: 0x01)                             */
#define OTPDMA_ESPISRAM_RM_Pos            (1UL)                     /*!< RM (Bit 1)                                            */
#define OTPDMA_ESPISRAM_RM_Msk            (0x1eUL)                  /*!< RM (Bitfield-Mask: 0x0f)                              */
#define OTPDMA_ESPISRAM_RA_Pos            (5UL)                     /*!< RA (Bit 5)                                            */
#define OTPDMA_ESPISRAM_RA_Msk            (0x60UL)                  /*!< RA (Bitfield-Mask: 0x03)                              */
#define OTPDMA_ESPISRAM_WA_Pos            (7UL)                     /*!< WA (Bit 7)                                            */
#define OTPDMA_ESPISRAM_WA_Msk            (0x380UL)                 /*!< WA (Bitfield-Mask: 0x07)                              */
#define OTPDMA_ESPISRAM_WPULSE_Pos        (10UL)                    /*!< WPULSE (Bit 10)                                       */
#define OTPDMA_ESPISRAM_WPULSE_Msk        (0x1c00UL)                /*!< WPULSE (Bitfield-Mask: 0x07)                          */
#define OTPDMA_ESPISRAM_LS_Pos            (13UL)                    /*!< LS (Bit 13)                                           */
#define OTPDMA_ESPISRAM_LS_Msk            (0x2000UL)                /*!< LS (Bitfield-Mask: 0x01)                              */
#define OTPDMA_ESPISRAM_VALID_Pos         (31UL)                    /*!< VALID (Bit 31)                                        */
#define OTPDMA_ESPISRAM_VALID_Msk         (0x80000000UL)            /*!< VALID (Bitfield-Mask: 0x01)                           */
/* ======================================================  CRYPTOSRAM  ======================================================= */
#define OTPDMA_CRYPTOSRAM_RME_Pos         (0UL)                     /*!< RME (Bit 0)                                           */
#define OTPDMA_CRYPTOSRAM_RME_Msk         (0x1UL)                   /*!< RME (Bitfield-Mask: 0x01)                             */
#define OTPDMA_CRYPTOSRAM_RM_Pos          (1UL)                     /*!< RM (Bit 1)                                            */
#define OTPDMA_CRYPTOSRAM_RM_Msk          (0x1eUL)                  /*!< RM (Bitfield-Mask: 0x0f)                              */
#define OTPDMA_CRYPTOSRAM_RA_Pos          (5UL)                     /*!< RA (Bit 5)                                            */
#define OTPDMA_CRYPTOSRAM_RA_Msk          (0x60UL)                  /*!< RA (Bitfield-Mask: 0x03)                              */
#define OTPDMA_CRYPTOSRAM_WA_Pos          (7UL)                     /*!< WA (Bit 7)                                            */
#define OTPDMA_CRYPTOSRAM_WA_Msk          (0x380UL)                 /*!< WA (Bitfield-Mask: 0x07)                              */
#define OTPDMA_CRYPTOSRAM_WPULSE_Pos      (10UL)                    /*!< WPULSE (Bit 10)                                       */
#define OTPDMA_CRYPTOSRAM_WPULSE_Msk      (0x1c00UL)                /*!< WPULSE (Bitfield-Mask: 0x07)                          */
#define OTPDMA_CRYPTOSRAM_LS_Pos          (13UL)                    /*!< LS (Bit 13)                                           */
#define OTPDMA_CRYPTOSRAM_LS_Msk          (0x2000UL)                /*!< LS (Bitfield-Mask: 0x01)                              */
#define OTPDMA_CRYPTOSRAM_VALID_Pos       (31UL)                    /*!< VALID (Bit 31)                                        */
#define OTPDMA_CRYPTOSRAM_VALID_Msk       (0x80000000UL)            /*!< VALID (Bitfield-Mask: 0x01)                           */
/* ========================================================  BATSRAM  ======================================================== */
#define OTPDMA_BATSRAM_RME_Pos            (0UL)                     /*!< RME (Bit 0)                                           */
#define OTPDMA_BATSRAM_RME_Msk            (0x1UL)                   /*!< RME (Bitfield-Mask: 0x01)                             */
#define OTPDMA_BATSRAM_RM_Pos             (1UL)                     /*!< RM (Bit 1)                                            */
#define OTPDMA_BATSRAM_RM_Msk             (0x1eUL)                  /*!< RM (Bitfield-Mask: 0x0f)                              */
#define OTPDMA_BATSRAM_RA_Pos             (5UL)                     /*!< RA (Bit 5)                                            */
#define OTPDMA_BATSRAM_RA_Msk             (0x60UL)                  /*!< RA (Bitfield-Mask: 0x03)                              */
#define OTPDMA_BATSRAM_WA_Pos             (7UL)                     /*!< WA (Bit 7)                                            */
#define OTPDMA_BATSRAM_WA_Msk             (0x380UL)                 /*!< WA (Bitfield-Mask: 0x07)                              */
#define OTPDMA_BATSRAM_WPULSE_Pos         (10UL)                    /*!< WPULSE (Bit 10)                                       */
#define OTPDMA_BATSRAM_WPULSE_Msk         (0x1c00UL)                /*!< WPULSE (Bitfield-Mask: 0x07)                          */
#define OTPDMA_BATSRAM_LS_Pos             (13UL)                    /*!< LS (Bit 13)                                           */
#define OTPDMA_BATSRAM_LS_Msk             (0x2000UL)                /*!< LS (Bitfield-Mask: 0x01)                              */
#define OTPDMA_BATSRAM_VALID_Pos          (31UL)                    /*!< VALID (Bit 31)                                        */
#define OTPDMA_BATSRAM_VALID_Msk          (0x80000000UL)            /*!< VALID (Bitfield-Mask: 0x01)                           */
/* =======================================================  GATECTRL  ======================================================== */
#define OTPDMA_GATECTRL_DIO_Pos           (28UL)                    /*!< DIO (Bit 28)                                          */
#define OTPDMA_GATECTRL_DIO_Msk           (0x10000000UL)            /*!< DIO (Bitfield-Mask: 0x01)                             */
#define OTPDMA_GATECTRL_LALU_Pos          (29UL)                    /*!< LALU (Bit 29)                                         */
#define OTPDMA_GATECTRL_LALU_Msk          (0x20000000UL)            /*!< LALU (Bitfield-Mask: 0x01)                            */
#define OTPDMA_GATECTRL_PUF_Pos           (30UL)                    /*!< PUF (Bit 30)                                          */
#define OTPDMA_GATECTRL_PUF_Msk           (0x40000000UL)            /*!< PUF (Bitfield-Mask: 0x01)                             */
#define OTPDMA_GATECTRL_SRAM_Pos          (31UL)                    /*!< SRAM (Bit 31)                                         */
#define OTPDMA_GATECTRL_SRAM_Msk          (0x80000000UL)            /*!< SRAM (Bitfield-Mask: 0x01)                            */
/* ========================================================  GATESRC  ======================================================== */
#define OTPDMA_GATESRC_DIO_Pos            (28UL)                    /*!< DIO (Bit 28)                                          */
#define OTPDMA_GATESRC_DIO_Msk            (0x10000000UL)            /*!< DIO (Bitfield-Mask: 0x01)                             */
#define OTPDMA_GATESRC_LALU_Pos           (29UL)                    /*!< LALU (Bit 29)                                         */
#define OTPDMA_GATESRC_LALU_Msk           (0x20000000UL)            /*!< LALU (Bitfield-Mask: 0x01)                            */
#define OTPDMA_GATESRC_PUF_Pos            (30UL)                    /*!< PUF (Bit 30)                                          */
#define OTPDMA_GATESRC_PUF_Msk            (0x40000000UL)            /*!< PUF (Bitfield-Mask: 0x01)                             */
#define OTPDMA_GATESRC_SRAM_Pos           (31UL)                    /*!< SRAM (Bit 31)                                         */
#define OTPDMA_GATESRC_SRAM_Msk           (0x80000000UL)            /*!< SRAM (Bitfield-Mask: 0x01)                            */


/* =========================================================================================================================== */
/* ================                                            PKE                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL0  ========================================================= */
#define PKE_CTRL0_GOTOEND_Pos             (0UL)                     /*!< GOTOEND (Bit 0)                                       */
#define PKE_CTRL0_GOTOEND_Msk             (0x1UL)                   /*!< GOTOEND (Bitfield-Mask: 0x01)                         */
#define PKE_CTRL0_IMEMRDEN_Pos            (1UL)                     /*!< IMEMRDEN (Bit 1)                                      */
#define PKE_CTRL0_IMEMRDEN_Msk            (0x2UL)                   /*!< IMEMRDEN (Bitfield-Mask: 0x01)                        */
#define PKE_CTRL0_DPAEN_Pos               (2UL)                     /*!< DPAEN (Bit 2)                                         */
#define PKE_CTRL0_DPAEN_Msk               (0x4UL)                   /*!< DPAEN (Bitfield-Mask: 0x01)                           */
#define PKE_CTRL0_TATTKDEFEN_Pos          (3UL)                     /*!< TATTKDEFEN (Bit 3)                                    */
#define PKE_CTRL0_TATTKDEFEN_Msk          (0x8UL)                   /*!< TATTKDEFEN (Bitfield-Mask: 0x01)                      */
#define PKE_CTRL0_INTRLFSR_Pos            (4UL)                     /*!< INTRLFSR (Bit 4)                                      */
#define PKE_CTRL0_INTRLFSR_Msk            (0x10UL)                  /*!< INTRLFSR (Bitfield-Mask: 0x01)                        */
#define PKE_CTRL0_CURVES_Pos              (5UL)                     /*!< CURVES (Bit 5)                                        */
#define PKE_CTRL0_CURVES_Msk              (0x20UL)                  /*!< CURVES (Bitfield-Mask: 0x01)                          */
#define PKE_CTRL0_ALG_Pos                 (6UL)                     /*!< ALG (Bit 6)                                           */
#define PKE_CTRL0_ALG_Msk                 (0xc0UL)                  /*!< ALG (Bitfield-Mask: 0x03)                             */
#define PKE_CTRL0_LEN_Pos                 (8UL)                     /*!< LEN (Bit 8)                                           */
#define PKE_CTRL0_LEN_Msk                 (0xffff00UL)              /*!< LEN (Bitfield-Mask: 0xffff)                           */
#define PKE_CTRL0_BYTESWAP_Pos            (25UL)                    /*!< BYTESWAP (Bit 25)                                     */
#define PKE_CTRL0_BYTESWAP_Msk            (0x2000000UL)             /*!< BYTESWAP (Bitfield-Mask: 0x01)                        */
#define PKE_CTRL0_WORDSWAP_Pos            (26UL)                    /*!< WORDSWAP (Bit 26)                                     */
#define PKE_CTRL0_WORDSWAP_Msk            (0x4000000UL)             /*!< WORDSWAP (Bitfield-Mask: 0x01)                        */
#define PKE_CTRL0_OTHER_Pos               (27UL)                    /*!< OTHER (Bit 27)                                        */
#define PKE_CTRL0_OTHER_Msk               (0x8000000UL)             /*!< OTHER (Bitfield-Mask: 0x01)                           */
#define PKE_CTRL0_START_Pos               (30UL)                    /*!< START (Bit 30)                                        */
#define PKE_CTRL0_START_Msk               (0x40000000UL)            /*!< START (Bitfield-Mask: 0x01)                           */
#define PKE_CTRL0_SIMPLIFY_Pos            (31UL)                    /*!< SIMPLIFY (Bit 31)                                     */
#define PKE_CTRL0_SIMPLIFY_Msk            (0x80000000UL)            /*!< SIMPLIFY (Bitfield-Mask: 0x01)                        */
/* =========================================================  CTRL3  ========================================================= */
#define PKE_CTRL3_SWAPEN_Pos              (6UL)                     /*!< SWAPEN (Bit 6)                                        */
#define PKE_CTRL3_SWAPEN_Msk              (0x40UL)                  /*!< SWAPEN (Bitfield-Mask: 0x01)                          */
#define PKE_CTRL3_SWAP_Pos                (7UL)                     /*!< SWAP (Bit 7)                                          */
#define PKE_CTRL3_SWAP_Msk                (0x80UL)                  /*!< SWAP (Bitfield-Mask: 0x01)                            */
#define PKE_CTRL3_DMARXSINGLE_Pos         (8UL)                     /*!< DMARXSINGLE (Bit 8)                                   */
#define PKE_CTRL3_DMARXSINGLE_Msk         (0x100UL)                 /*!< DMARXSINGLE (Bitfield-Mask: 0x01)                     */
#define PKE_CTRL3_DMARXREQ_Pos            (9UL)                     /*!< DMARXREQ (Bit 9)                                      */
#define PKE_CTRL3_DMARXREQ_Msk            (0x200UL)                 /*!< DMARXREQ (Bitfield-Mask: 0x01)                        */
#define PKE_CTRL3_DMARXLAST_Pos           (10UL)                    /*!< DMARXLAST (Bit 10)                                    */
#define PKE_CTRL3_DMARXLAST_Msk           (0x400UL)                 /*!< DMARXLAST (Bitfield-Mask: 0x01)                       */
#define PKE_CTRL3_DMATXSINGLE_Pos         (11UL)                    /*!< DMATXSINGLE (Bit 11)                                  */
#define PKE_CTRL3_DMATXSINGLE_Msk         (0x800UL)                 /*!< DMATXSINGLE (Bitfield-Mask: 0x01)                     */
#define PKE_CTRL3_DMATXREQ_Pos            (12UL)                    /*!< DMATXREQ (Bit 12)                                     */
#define PKE_CTRL3_DMATXREQ_Msk            (0x1000UL)                /*!< DMATXREQ (Bitfield-Mask: 0x01)                        */
#define PKE_CTRL3_DMATXLAST_Pos           (13UL)                    /*!< DMATXLAST (Bit 13)                                    */
#define PKE_CTRL3_DMATXLAST_Msk           (0x2000UL)                /*!< DMATXLAST (Bitfield-Mask: 0x01)                       */
/* ==========================================================  STS  ========================================================== */
#define PKE_STS_FIN_Pos                   (0UL)                     /*!< FIN (Bit 0)                                           */
#define PKE_STS_FIN_Msk                   (0x1UL)                   /*!< FIN (Bitfield-Mask: 0x01)                             */
#define PKE_STS_PRIMEERR_Pos              (1UL)                     /*!< PRIMEERR (Bit 1)                                      */
#define PKE_STS_PRIMEERR_Msk              (0x2UL)                   /*!< PRIMEERR (Bitfield-Mask: 0x01)                        */
#define PKE_STS_R2MODN_Pos                (2UL)                     /*!< R2MODN (Bit 2)                                        */
#define PKE_STS_R2MODN_Msk                (0x4UL)                   /*!< R2MODN (Bitfield-Mask: 0x01)                          */
#define PKE_STS_ECCODDPOINT_Pos           (3UL)                     /*!< ECCODDPOINT (Bit 3)                                   */
#define PKE_STS_ECCODDPOINT_Msk           (0x8UL)                   /*!< ECCODDPOINT (Bitfield-Mask: 0x01)                     */
#define PKE_STS_ECCZEQUZERO_Pos           (4UL)                     /*!< ECCZEQUZERO (Bit 4)                                   */
#define PKE_STS_ECCZEQUZERO_Msk           (0x10UL)                  /*!< ECCZEQUZERO (Bitfield-Mask: 0x01)                     */
#define PKE_STS_MODINVERR_Pos             (5UL)                     /*!< MODINVERR (Bit 5)                                     */
#define PKE_STS_MODINVERR_Msk             (0x20UL)                  /*!< MODINVERR (Bitfield-Mask: 0x01)                       */
#define PKE_STS_INTPUTERR_Pos             (6UL)                     /*!< INTPUTERR (Bit 6)                                     */
#define PKE_STS_INTPUTERR_Msk             (0x40UL)                  /*!< INTPUTERR (Bitfield-Mask: 0x01)                       */
#define PKE_STS_EXPERR_Pos                (7UL)                     /*!< EXPERR (Bit 7)                                        */
#define PKE_STS_EXPERR_Msk                (0x80UL)                  /*!< EXPERR (Bitfield-Mask: 0x01)                          */
#define PKE_STS_IDLE_Pos                  (8UL)                     /*!< IDLE (Bit 8)                                          */
#define PKE_STS_IDLE_Msk                  (0x100UL)                 /*!< IDLE (Bitfield-Mask: 0x01)                            */
#define PKE_STS_SIMPLIFY_Pos              (9UL)                     /*!< SIMPLIFY (Bit 9)                                      */
#define PKE_STS_SIMPLIFY_Msk              (0x200UL)                 /*!< SIMPLIFY (Bitfield-Mask: 0x01)                        */
/* ========================================================  INTMSK  ========================================================= */
#define PKE_INTMSK_FIN_Pos                (0UL)                     /*!< FIN (Bit 0)                                           */
#define PKE_INTMSK_FIN_Msk                (0x1UL)                   /*!< FIN (Bitfield-Mask: 0x01)                             */
#define PKE_INTMSK_PRIMEERR_Pos           (1UL)                     /*!< PRIMEERR (Bit 1)                                      */
#define PKE_INTMSK_PRIMEERR_Msk           (0x2UL)                   /*!< PRIMEERR (Bitfield-Mask: 0x01)                        */
#define PKE_INTMSK_R2MODN_Pos             (2UL)                     /*!< R2MODN (Bit 2)                                        */
#define PKE_INTMSK_R2MODN_Msk             (0x4UL)                   /*!< R2MODN (Bitfield-Mask: 0x01)                          */
#define PKE_INTMSK_ECCODDPOINT_Pos        (3UL)                     /*!< ECCODDPOINT (Bit 3)                                   */
#define PKE_INTMSK_ECCODDPOINT_Msk        (0x8UL)                   /*!< ECCODDPOINT (Bitfield-Mask: 0x01)                     */
#define PKE_INTMSK_ECCZEQUZERO_Pos        (4UL)                     /*!< ECCZEQUZERO (Bit 4)                                   */
#define PKE_INTMSK_ECCZEQUZERO_Msk        (0x10UL)                  /*!< ECCZEQUZERO (Bitfield-Mask: 0x01)                     */
#define PKE_INTMSK_MODINVERR_Pos          (5UL)                     /*!< MODINVERR (Bit 5)                                     */
#define PKE_INTMSK_MODINVERR_Msk          (0x20UL)                  /*!< MODINVERR (Bitfield-Mask: 0x01)                       */
#define PKE_INTMSK_INTPUTERR_Pos          (6UL)                     /*!< INTPUTERR (Bit 6)                                     */
#define PKE_INTMSK_INTPUTERR_Msk          (0x40UL)                  /*!< INTPUTERR (Bitfield-Mask: 0x01)                       */
#define PKE_INTMSK_EXPERR_Pos             (7UL)                     /*!< EXPERR (Bit 7)                                        */
#define PKE_INTMSK_EXPERR_Msk             (0x80UL)                  /*!< EXPERR (Bitfield-Mask: 0x01)                          */
#define PKE_INTMSK_SIMPLIFY_Pos           (8UL)                     /*!< SIMPLIFY (Bit 8)                                      */
#define PKE_INTMSK_SIMPLIFY_Msk           (0x100UL)                 /*!< SIMPLIFY (Bitfield-Mask: 0x01)                        */
/* =========================================================  CTRL2  ========================================================= */
/* =======================================================  SWAPADDR  ======================================================== */
#define PKE_SWAPADDR_ADDR_Pos             (5UL)                     /*!< ADDR (Bit 5)                                          */
#define PKE_SWAPADDR_ADDR_Msk             (0xfe0UL)                 /*!< ADDR (Bitfield-Mask: 0x7f)                            */
/* ========================================================  VERSION  ======================================================== */
/* =========================================================  MMEM  ========================================================== */
/* =========================================================  TMEM  ========================================================== */
/* =========================================================  IROM  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            EMI                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CFG  ========================================================== */
#define EMI_CFG_STSADDR_Pos               (0UL)                     /*!< STSADDR (Bit 0)                                       */
#define EMI_CFG_STSADDR_Msk               (0x3UL)                   /*!< STSADDR (Bitfield-Mask: 0x03)                         */
#define EMI_CFG_WRPROT_Pos                (2UL)                     /*!< WRPROT (Bit 2)                                        */
#define EMI_CFG_WRPROT_Msk                (0x4UL)                   /*!< WRPROT (Bitfield-Mask: 0x01)                          */
/* ========================================================  INTCTRL  ======================================================== */
#define EMI_INTCTRL_IRQEN_Pos             (0UL)                     /*!< IRQEN (Bit 0)                                         */
#define EMI_INTCTRL_IRQEN_Msk             (0x1UL)                   /*!< IRQEN (Bitfield-Mask: 0x01)                           */
#define EMI_INTCTRL_TGLV_Pos              (1UL)                     /*!< TGLV (Bit 1)                                          */
#define EMI_INTCTRL_TGLV_Msk              (0x2UL)                   /*!< TGLV (Bitfield-Mask: 0x01)                            */
#define EMI_INTCTRL_INTEN_Pos             (2UL)                     /*!< INTEN (Bit 2)                                         */
#define EMI_INTCTRL_INTEN_Msk             (0x4UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  IRQNUM  ========================================================= */
#define EMI_IRQNUM_NUM_Pos                (0UL)                     /*!< NUM (Bit 0)                                           */
#define EMI_IRQNUM_NUM_Msk                (0xffUL)                  /*!< NUM (Bitfield-Mask: 0xff)                             */
/* ==========================================================  SAR  ========================================================== */
/* ========================================================  INTSTS  ========================================================= */
#define EMI_INTSTS_STS_Pos                (0UL)                     /*!< STS (Bit 0)                                           */
#define EMI_INTSTS_STS_Msk                (0x1UL)                   /*!< STS (Bitfield-Mask: 0x01)                             */


/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  GCR  ========================================================== */
#define GPIO_GCR_DIR_Pos                  (0UL)                     /*!< DIR (Bit 0)                                           */
#define GPIO_GCR_DIR_Msk                  (0x1UL)                   /*!< DIR (Bitfield-Mask: 0x01)                             */
#define GPIO_GCR_INDETEN_Pos              (1UL)                     /*!< INDETEN (Bit 1)                                       */
#define GPIO_GCR_INDETEN_Msk              (0x2UL)                   /*!< INDETEN (Bitfield-Mask: 0x01)                         */
#define GPIO_GCR_INVOLMD_Pos              (2UL)                     /*!< INVOLMD (Bit 2)                                       */
#define GPIO_GCR_INVOLMD_Msk              (0x4UL)                   /*!< INVOLMD (Bitfield-Mask: 0x01)                         */
#define GPIO_GCR_PINSTS_Pos               (3UL)                     /*!< PINSTS (Bit 3)                                        */
#define GPIO_GCR_PINSTS_Msk               (0x8UL)                   /*!< PINSTS (Bitfield-Mask: 0x01)                          */
#define GPIO_GCR_MFCTRL_Pos               (8UL)                     /*!< MFCTRL (Bit 8)                                        */
#define GPIO_GCR_MFCTRL_Msk               (0x700UL)                 /*!< MFCTRL (Bitfield-Mask: 0x07)                          */
#define GPIO_GCR_OUTDRV_Pos               (11UL)                    /*!< OUTDRV (Bit 11)                                       */
#define GPIO_GCR_OUTDRV_Msk               (0x800UL)                 /*!< OUTDRV (Bitfield-Mask: 0x01)                          */
#define GPIO_GCR_SLEWRATE_Pos             (12UL)                    /*!< SLEWRATE (Bit 12)                                     */
#define GPIO_GCR_SLEWRATE_Msk             (0x1000UL)                /*!< SLEWRATE (Bitfield-Mask: 0x01)                        */
#define GPIO_GCR_PULLDWEN_Pos             (13UL)                    /*!< PULLDWEN (Bit 13)                                     */
#define GPIO_GCR_PULLDWEN_Msk             (0x2000UL)                /*!< PULLDWEN (Bitfield-Mask: 0x01)                        */
#define GPIO_GCR_PULLUPEN_Pos             (14UL)                    /*!< PULLUPEN (Bit 14)                                     */
#define GPIO_GCR_PULLUPEN_Msk             (0x4000UL)                /*!< PULLUPEN (Bitfield-Mask: 0x01)                        */
#define GPIO_GCR_SCHEN_Pos                (15UL)                    /*!< SCHEN (Bit 15)                                        */
#define GPIO_GCR_SCHEN_Msk                (0x8000UL)                /*!< SCHEN (Bitfield-Mask: 0x01)                           */
#define GPIO_GCR_OUTTYPCTRL_Pos           (16UL)                    /*!< OUTTYPCTRL (Bit 16)                                   */
#define GPIO_GCR_OUTTYPCTRL_Msk           (0x10000UL)               /*!< OUTTYPCTRL (Bitfield-Mask: 0x01)                      */
#define GPIO_GCR_OUTCTRL_Pos              (17UL)                    /*!< OUTCTRL (Bit 17)                                      */
#define GPIO_GCR_OUTCTRL_Msk              (0x20000UL)               /*!< OUTCTRL (Bitfield-Mask: 0x01)                         */
#define GPIO_GCR_INTCTRL_Pos              (24UL)                    /*!< INTCTRL (Bit 24)                                      */
#define GPIO_GCR_INTCTRL_Msk              (0x7000000UL)             /*!< INTCTRL (Bitfield-Mask: 0x07)                         */
#define GPIO_GCR_INTEN_Pos                (28UL)                    /*!< INTEN (Bit 28)                                        */
#define GPIO_GCR_INTEN_Msk                (0x10000000UL)            /*!< INTEN (Bitfield-Mask: 0x01)                           */
#define GPIO_GCR_INTSTS_Pos               (31UL)                    /*!< INTSTS (Bit 31)                                       */
#define GPIO_GCR_INTSTS_Msk               (0x80000000UL)            /*!< INTSTS (Bitfield-Mask: 0x01)                          */


/* =========================================================================================================================== */
/* ================                                           IOPAD                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  FLASHWP  ======================================================== */
#define IOPAD_FLASHWP_INDETEN_Pos         (0UL)                     /*!< INDETEN (Bit 0)                                       */
#define IOPAD_FLASHWP_INDETEN_Msk         (0x1UL)                   /*!< INDETEN (Bitfield-Mask: 0x01)                         */
#define IOPAD_FLASHWP_OUTDRV_Pos          (1UL)                     /*!< OUTDRV (Bit 1)                                        */
#define IOPAD_FLASHWP_OUTDRV_Msk          (0x2UL)                   /*!< OUTDRV (Bitfield-Mask: 0x01)                          */
#define IOPAD_FLASHWP_SLEWRATE_Pos        (2UL)                     /*!< SLEWRATE (Bit 2)                                      */
#define IOPAD_FLASHWP_SLEWRATE_Msk        (0x4UL)                   /*!< SLEWRATE (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHWP_PULLDWEN_Pos        (3UL)                     /*!< PULLDWEN (Bit 3)                                      */
#define IOPAD_FLASHWP_PULLDWEN_Msk        (0x8UL)                   /*!< PULLDWEN (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHWP_PULLUPEN_Pos        (4UL)                     /*!< PULLUPEN (Bit 4)                                      */
#define IOPAD_FLASHWP_PULLUPEN_Msk        (0x10UL)                  /*!< PULLUPEN (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHWP_SCHEN_Pos           (5UL)                     /*!< SCHEN (Bit 5)                                         */
#define IOPAD_FLASHWP_SCHEN_Msk           (0x20UL)                  /*!< SCHEN (Bitfield-Mask: 0x01)                           */
/* =======================================================  FLASHHOLD  ======================================================= */
#define IOPAD_FLASHHOLD_INDETEN_Pos       (0UL)                     /*!< INDETEN (Bit 0)                                       */
#define IOPAD_FLASHHOLD_INDETEN_Msk       (0x1UL)                   /*!< INDETEN (Bitfield-Mask: 0x01)                         */
#define IOPAD_FLASHHOLD_OUTDRV_Pos        (1UL)                     /*!< OUTDRV (Bit 1)                                        */
#define IOPAD_FLASHHOLD_OUTDRV_Msk        (0x2UL)                   /*!< OUTDRV (Bitfield-Mask: 0x01)                          */
#define IOPAD_FLASHHOLD_SLEWRATE_Pos      (2UL)                     /*!< SLEWRATE (Bit 2)                                      */
#define IOPAD_FLASHHOLD_SLEWRATE_Msk      (0x4UL)                   /*!< SLEWRATE (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHHOLD_PULLDWEN_Pos      (3UL)                     /*!< PULLDWEN (Bit 3)                                      */
#define IOPAD_FLASHHOLD_PULLDWEN_Msk      (0x8UL)                   /*!< PULLDWEN (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHHOLD_PULLUPEN_Pos      (4UL)                     /*!< PULLUPEN (Bit 4)                                      */
#define IOPAD_FLASHHOLD_PULLUPEN_Msk      (0x10UL)                  /*!< PULLUPEN (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHHOLD_SCHEN_Pos         (5UL)                     /*!< SCHEN (Bit 5)                                         */
#define IOPAD_FLASHHOLD_SCHEN_Msk         (0x20UL)                  /*!< SCHEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  FLASHSI  ======================================================== */
#define IOPAD_FLASHSI_INDETEN_Pos         (0UL)                     /*!< INDETEN (Bit 0)                                       */
#define IOPAD_FLASHSI_INDETEN_Msk         (0x1UL)                   /*!< INDETEN (Bitfield-Mask: 0x01)                         */
#define IOPAD_FLASHSI_OUTDRV_Pos          (1UL)                     /*!< OUTDRV (Bit 1)                                        */
#define IOPAD_FLASHSI_OUTDRV_Msk          (0x2UL)                   /*!< OUTDRV (Bitfield-Mask: 0x01)                          */
#define IOPAD_FLASHSI_SLEWRATE_Pos        (2UL)                     /*!< SLEWRATE (Bit 2)                                      */
#define IOPAD_FLASHSI_SLEWRATE_Msk        (0x4UL)                   /*!< SLEWRATE (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHSI_PULLDWEN_Pos        (3UL)                     /*!< PULLDWEN (Bit 3)                                      */
#define IOPAD_FLASHSI_PULLDWEN_Msk        (0x8UL)                   /*!< PULLDWEN (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHSI_PULLUPEN_Pos        (4UL)                     /*!< PULLUPEN (Bit 4)                                      */
#define IOPAD_FLASHSI_PULLUPEN_Msk        (0x10UL)                  /*!< PULLUPEN (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHSI_SCHEN_Pos           (5UL)                     /*!< SCHEN (Bit 5)                                         */
#define IOPAD_FLASHSI_SCHEN_Msk           (0x20UL)                  /*!< SCHEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  FLASHSO  ======================================================== */
#define IOPAD_FLASHSO_INDETEN_Pos         (0UL)                     /*!< INDETEN (Bit 0)                                       */
#define IOPAD_FLASHSO_INDETEN_Msk         (0x1UL)                   /*!< INDETEN (Bitfield-Mask: 0x01)                         */
#define IOPAD_FLASHSO_OUTDRV_Pos          (1UL)                     /*!< OUTDRV (Bit 1)                                        */
#define IOPAD_FLASHSO_OUTDRV_Msk          (0x2UL)                   /*!< OUTDRV (Bitfield-Mask: 0x01)                          */
#define IOPAD_FLASHSO_SLEWRATE_Pos        (2UL)                     /*!< SLEWRATE (Bit 2)                                      */
#define IOPAD_FLASHSO_SLEWRATE_Msk        (0x4UL)                   /*!< SLEWRATE (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHSO_PULLDWEN_Pos        (3UL)                     /*!< PULLDWEN (Bit 3)                                      */
#define IOPAD_FLASHSO_PULLDWEN_Msk        (0x8UL)                   /*!< PULLDWEN (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHSO_PULLUPEN_Pos        (4UL)                     /*!< PULLUPEN (Bit 4)                                      */
#define IOPAD_FLASHSO_PULLUPEN_Msk        (0x10UL)                  /*!< PULLUPEN (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHSO_SCHEN_Pos           (5UL)                     /*!< SCHEN (Bit 5)                                         */
#define IOPAD_FLASHSO_SCHEN_Msk           (0x20UL)                  /*!< SCHEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  FLASHCS  ======================================================== */
#define IOPAD_FLASHCS_INDETEN_Pos         (0UL)                     /*!< INDETEN (Bit 0)                                       */
#define IOPAD_FLASHCS_INDETEN_Msk         (0x1UL)                   /*!< INDETEN (Bitfield-Mask: 0x01)                         */
#define IOPAD_FLASHCS_OUTDRV_Pos          (1UL)                     /*!< OUTDRV (Bit 1)                                        */
#define IOPAD_FLASHCS_OUTDRV_Msk          (0x2UL)                   /*!< OUTDRV (Bitfield-Mask: 0x01)                          */
#define IOPAD_FLASHCS_SLEWRATE_Pos        (2UL)                     /*!< SLEWRATE (Bit 2)                                      */
#define IOPAD_FLASHCS_SLEWRATE_Msk        (0x4UL)                   /*!< SLEWRATE (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHCS_PULLDWEN_Pos        (3UL)                     /*!< PULLDWEN (Bit 3)                                      */
#define IOPAD_FLASHCS_PULLDWEN_Msk        (0x8UL)                   /*!< PULLDWEN (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHCS_PULLUPEN_Pos        (4UL)                     /*!< PULLUPEN (Bit 4)                                      */
#define IOPAD_FLASHCS_PULLUPEN_Msk        (0x10UL)                  /*!< PULLUPEN (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHCS_SCHEN_Pos           (5UL)                     /*!< SCHEN (Bit 5)                                         */
#define IOPAD_FLASHCS_SCHEN_Msk           (0x20UL)                  /*!< SCHEN (Bitfield-Mask: 0x01)                           */
/* =======================================================  FLASHCLK  ======================================================== */
#define IOPAD_FLASHCLK_INDETEN_Pos        (0UL)                     /*!< INDETEN (Bit 0)                                       */
#define IOPAD_FLASHCLK_INDETEN_Msk        (0x1UL)                   /*!< INDETEN (Bitfield-Mask: 0x01)                         */
#define IOPAD_FLASHCLK_OUTDRV_Pos         (1UL)                     /*!< OUTDRV (Bit 1)                                        */
#define IOPAD_FLASHCLK_OUTDRV_Msk         (0x2UL)                   /*!< OUTDRV (Bitfield-Mask: 0x01)                          */
#define IOPAD_FLASHCLK_SLEWRATE_Pos       (2UL)                     /*!< SLEWRATE (Bit 2)                                      */
#define IOPAD_FLASHCLK_SLEWRATE_Msk       (0x4UL)                   /*!< SLEWRATE (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHCLK_PULLDWEN_Pos       (3UL)                     /*!< PULLDWEN (Bit 3)                                      */
#define IOPAD_FLASHCLK_PULLDWEN_Msk       (0x8UL)                   /*!< PULLDWEN (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHCLK_PULLUPEN_Pos       (4UL)                     /*!< PULLUPEN (Bit 4)                                      */
#define IOPAD_FLASHCLK_PULLUPEN_Msk       (0x10UL)                  /*!< PULLUPEN (Bitfield-Mask: 0x01)                        */
#define IOPAD_FLASHCLK_SCHEN_Pos          (5UL)                     /*!< SCHEN (Bit 5)                                         */
#define IOPAD_FLASHCLK_SCHEN_Msk          (0x20UL)                  /*!< SCHEN (Bitfield-Mask: 0x01)                           */
/* =========================================================  PECI  ========================================================== */
#define IOPAD_PECI_INDETEN_Pos            (0UL)                     /*!< INDETEN (Bit 0)                                       */
#define IOPAD_PECI_INDETEN_Msk            (0x1UL)                   /*!< INDETEN (Bitfield-Mask: 0x01)                         */
#define IOPAD_PECI_OUTDRV_Pos             (1UL)                     /*!< OUTDRV (Bit 1)                                        */
#define IOPAD_PECI_OUTDRV_Msk             (0x2UL)                   /*!< OUTDRV (Bitfield-Mask: 0x01)                          */
#define IOPAD_PECI_SLEWRATE_Pos           (2UL)                     /*!< SLEWRATE (Bit 2)                                      */
#define IOPAD_PECI_SLEWRATE_Msk           (0x4UL)                   /*!< SLEWRATE (Bitfield-Mask: 0x01)                        */
#define IOPAD_PECI_PULLDWEN_Pos           (3UL)                     /*!< PULLDWEN (Bit 3)                                      */
#define IOPAD_PECI_PULLDWEN_Msk           (0x8UL)                   /*!< PULLDWEN (Bitfield-Mask: 0x01)                        */
#define IOPAD_PECI_PULLUPEN_Pos           (4UL)                     /*!< PULLUPEN (Bit 4)                                      */
#define IOPAD_PECI_PULLUPEN_Msk           (0x10UL)                  /*!< PULLUPEN (Bitfield-Mask: 0x01)                        */
#define IOPAD_PECI_SCHEN_Pos              (5UL)                     /*!< SCHEN (Bit 5)                                         */
#define IOPAD_PECI_SCHEN_Msk              (0x20UL)                  /*!< SCHEN (Bitfield-Mask: 0x01)                           */


/* =========================================================================================================================== */
/* ================                                           PECI                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  TX  =========================================================== */
#define PECI_TX_DATA_Pos                  (0UL)                     /*!< DATA (Bit 0)                                          */
#define PECI_TX_DATA_Msk                  (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
/* ==========================================================  RX  =========================================================== */
#define PECI_RX_DATA_Pos                  (0UL)                     /*!< DATA (Bit 0)                                          */
#define PECI_RX_DATA_Msk                  (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
/* =========================================================  CTRL  ========================================================== */
#define PECI_CTRL_EN_Pos                  (0UL)                     /*!< EN (Bit 0)                                            */
#define PECI_CTRL_EN_Msk                  (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define PECI_CTRL_RST_Pos                 (3UL)                     /*!< RST (Bit 3)                                           */
#define PECI_CTRL_RST_Msk                 (0x8UL)                   /*!< RST (Bitfield-Mask: 0x01)                             */
#define PECI_CTRL_FIFORST_Pos             (5UL)                     /*!< FIFORST (Bit 5)                                       */
#define PECI_CTRL_FIFORST_Msk             (0x20UL)                  /*!< FIFORST (Bitfield-Mask: 0x01)                         */
#define PECI_CTRL_TXEN_Pos                (6UL)                     /*!< TXEN (Bit 6)                                          */
#define PECI_CTRL_TXEN_Msk                (0x40UL)                  /*!< TXEN (Bitfield-Mask: 0x01)                            */
#define PECI_CTRL_INTEN_Pos               (7UL)                     /*!< INTEN (Bit 7)                                         */
#define PECI_CTRL_INTEN_Msk               (0x80UL)                  /*!< INTEN (Bitfield-Mask: 0x01)                           */
/* =========================================================  STS0  ========================================================== */
#define PECI_STS0_BOFSTS_Pos              (0UL)                     /*!< BOFSTS (Bit 0)                                        */
#define PECI_STS0_BOFSTS_Msk              (0x1UL)                   /*!< BOFSTS (Bitfield-Mask: 0x01)                          */
#define PECI_STS0_EOFSTS_Pos              (1UL)                     /*!< EOFSTS (Bit 1)                                        */
#define PECI_STS0_EOFSTS_Msk              (0x2UL)                   /*!< EOFSTS (Bitfield-Mask: 0x01)                          */
#define PECI_STS0_ERRSTS_Pos              (2UL)                     /*!< ERRSTS (Bit 2)                                        */
#define PECI_STS0_ERRSTS_Msk              (0x4UL)                   /*!< ERRSTS (Bitfield-Mask: 0x01)                          */
#define PECI_STS0_INTSTS_Pos              (7UL)                     /*!< INTSTS (Bit 7)                                        */
#define PECI_STS0_INTSTS_Msk              (0x80UL)                  /*!< INTSTS (Bitfield-Mask: 0x01)                          */
/* =========================================================  STS1  ========================================================== */
#define PECI_STS1_TXFULL_Pos              (0UL)                     /*!< TXFULL (Bit 0)                                        */
#define PECI_STS1_TXFULL_Msk              (0x1UL)                   /*!< TXFULL (Bitfield-Mask: 0x01)                          */
#define PECI_STS1_TXEMPTY_Pos             (1UL)                     /*!< TXEMPTY (Bit 1)                                       */
#define PECI_STS1_TXEMPTY_Msk             (0x2UL)                   /*!< TXEMPTY (Bitfield-Mask: 0x01)                         */
#define PECI_STS1_RXFULL_Pos              (2UL)                     /*!< RXFULL (Bit 2)                                        */
#define PECI_STS1_RXFULL_Msk              (0x4UL)                   /*!< RXFULL (Bitfield-Mask: 0x01)                          */
#define PECI_STS1_RXEMPTY_Pos             (3UL)                     /*!< RXEMPTY (Bit 3)                                       */
#define PECI_STS1_RXEMPTY_Msk             (0x8UL)                   /*!< RXEMPTY (Bitfield-Mask: 0x01)                         */
#define PECI_STS1_BUSY_Pos                (7UL)                     /*!< BUSY (Bit 7)                                          */
#define PECI_STS1_BUSY_Msk                (0x80UL)                  /*!< BUSY (Bitfield-Mask: 0x01)                            */
/* ==========================================================  ERR  ========================================================== */
#define PECI_ERR_FCSERR_Pos               (0UL)                     /*!< FCSERR (Bit 0)                                        */
#define PECI_ERR_FCSERR_Msk               (0x1UL)                   /*!< FCSERR (Bitfield-Mask: 0x01)                          */
#define PECI_ERR_BUSERR_Pos               (1UL)                     /*!< BUSERR (Bit 1)                                        */
#define PECI_ERR_BUSERR_Msk               (0x2UL)                   /*!< BUSERR (Bitfield-Mask: 0x01)                          */
#define PECI_ERR_TXOV_Pos                 (4UL)                     /*!< TXOV (Bit 4)                                          */
#define PECI_ERR_TXOV_Msk                 (0x10UL)                  /*!< TXOV (Bitfield-Mask: 0x01)                            */
#define PECI_ERR_TXUDRUN_Pos              (5UL)                     /*!< TXUDRUN (Bit 5)                                       */
#define PECI_ERR_TXUDRUN_Msk              (0x20UL)                  /*!< TXUDRUN (Bitfield-Mask: 0x01)                         */
#define PECI_ERR_RXOV_Pos                 (6UL)                     /*!< RXOV (Bit 6)                                          */
#define PECI_ERR_RXOV_Msk                 (0x40UL)                  /*!< RXOV (Bitfield-Mask: 0x01)                            */
#define PECI_ERR_CLKERR_Pos               (7UL)                     /*!< CLKERR (Bit 7)                                        */
#define PECI_ERR_CLKERR_Msk               (0x80UL)                  /*!< CLKERR (Bitfield-Mask: 0x01)                          */
/* ========================================================  INTEN0  ========================================================= */
#define PECI_INTEN0_BOFEN_Pos             (0UL)                     /*!< BOFEN (Bit 0)                                         */
#define PECI_INTEN0_BOFEN_Msk             (0x1UL)                   /*!< BOFEN (Bitfield-Mask: 0x01)                           */
#define PECI_INTEN0_EOFEN_Pos             (1UL)                     /*!< EOFEN (Bit 1)                                         */
#define PECI_INTEN0_EOFEN_Msk             (0x2UL)                   /*!< EOFEN (Bitfield-Mask: 0x01)                           */
#define PECI_INTEN0_ERREN_Pos             (2UL)                     /*!< ERREN (Bit 2)                                         */
#define PECI_INTEN0_ERREN_Msk             (0x4UL)                   /*!< ERREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  INTEN1  ========================================================= */
#define PECI_INTEN1_WFEEN_Pos             (1UL)                     /*!< WFEEN (Bit 1)                                         */
#define PECI_INTEN1_WFEEN_Msk             (0x2UL)                   /*!< WFEEN (Bitfield-Mask: 0x01)                           */
#define PECI_INTEN1_RFFEN_Pos             (2UL)                     /*!< RFFEN (Bit 2)                                         */
#define PECI_INTEN1_RFFEN_Msk             (0x4UL)                   /*!< RFFEN (Bitfield-Mask: 0x01)                           */
/* =========================================================  OBTL  ========================================================== */
#define PECI_OBTL_VAL_Pos                 (0UL)                     /*!< VAL (Bit 0)                                           */
#define PECI_OBTL_VAL_Msk                 (0xffUL)                  /*!< VAL (Bitfield-Mask: 0xff)                             */
/* =========================================================  OBTH  ========================================================== */
#define PECI_OBTH_VAL_Pos                 (0UL)                     /*!< VAL (Bit 0)                                           */
#define PECI_OBTH_VAL_Msk                 (0xffUL)                  /*!< VAL (Bitfield-Mask: 0xff)                             */
/* =========================================================  BLKID  ========================================================= */
/* ========================================================  VERSION  ======================================================== */
/* ========================================================  BTCTRL  ========================================================= */


/* =========================================================================================================================== */
/* ================                                            KBC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  STS  ========================================================== */
#define KBC_STS_OBF_Pos                   (0UL)                     /*!< OBF (Bit 0)                                           */
#define KBC_STS_OBF_Msk                   (0x1UL)                   /*!< OBF (Bitfield-Mask: 0x01)                             */
#define KBC_STS_IBF_Pos                   (1UL)                     /*!< IBF (Bit 1)                                           */
#define KBC_STS_IBF_Msk                   (0x2UL)                   /*!< IBF (Bitfield-Mask: 0x01)                             */
#define KBC_STS_STS0_Pos                  (2UL)                     /*!< STS0 (Bit 2)                                          */
#define KBC_STS_STS0_Msk                  (0x4UL)                   /*!< STS0 (Bitfield-Mask: 0x01)                            */
#define KBC_STS_CMDSEL_Pos                (3UL)                     /*!< CMDSEL (Bit 3)                                        */
#define KBC_STS_CMDSEL_Msk                (0x8UL)                   /*!< CMDSEL (Bitfield-Mask: 0x01)                          */
#define KBC_STS_STS1_Pos                  (4UL)                     /*!< STS1 (Bit 4)                                          */
#define KBC_STS_STS1_Msk                  (0x10UL)                  /*!< STS1 (Bitfield-Mask: 0x01)                            */
#define KBC_STS_STS2_Pos                  (5UL)                     /*!< STS2 (Bit 5)                                          */
#define KBC_STS_STS2_Msk                  (0x20UL)                  /*!< STS2 (Bitfield-Mask: 0x01)                            */
#define KBC_STS_STS3_Pos                  (6UL)                     /*!< STS3 (Bit 6)                                          */
#define KBC_STS_STS3_Msk                  (0x40UL)                  /*!< STS3 (Bitfield-Mask: 0x01)                            */
#define KBC_STS_STS4_Pos                  (7UL)                     /*!< STS4 (Bit 7)                                          */
#define KBC_STS_STS4_Msk                  (0x80UL)                  /*!< STS4 (Bitfield-Mask: 0x01)                            */
/* ==========================================================  IB  =========================================================== */
#define KBC_IB_IBDAT_Pos                  (0UL)                     /*!< IBDAT (Bit 0)                                         */
#define KBC_IB_IBDAT_Msk                  (0xffUL)                  /*!< IBDAT (Bitfield-Mask: 0xff)                           */
#define KBC_IB_IBCLR_Pos                  (8UL)                     /*!< IBCLR (Bit 8)                                         */
#define KBC_IB_IBCLR_Msk                  (0x100UL)                 /*!< IBCLR (Bitfield-Mask: 0x01)                           */
/* ==========================================================  OB  =========================================================== */
#define KBC_OB_OBDAT_Pos                  (0UL)                     /*!< OBDAT (Bit 0)                                         */
#define KBC_OB_OBDAT_Msk                  (0xffUL)                  /*!< OBDAT (Bitfield-Mask: 0xff)                           */
#define KBC_OB_OBCLR_Pos                  (8UL)                     /*!< OBCLR (Bit 8)                                         */
#define KBC_OB_OBCLR_Msk                  (0x100UL)                 /*!< OBCLR (Bitfield-Mask: 0x01)                           */
/* ========================================================  PTADDR  ========================================================= */
#define KBC_PTADDR_ADDR_Pos               (0UL)                     /*!< ADDR (Bit 0)                                          */
#define KBC_PTADDR_ADDR_Msk               (0xfffUL)                 /*!< ADDR (Bitfield-Mask: 0xfff)                           */
#define KBC_PTADDR_OFFSET_Pos             (12UL)                    /*!< OFFSET (Bit 12)                                       */
#define KBC_PTADDR_OFFSET_Msk             (0x7000UL)                /*!< OFFSET (Bitfield-Mask: 0x07)                          */
/* =========================================================  INTEN  ========================================================= */
#define KBC_INTEN_OBFINTEN_Pos            (0UL)                     /*!< OBFINTEN (Bit 0)                                      */
#define KBC_INTEN_OBFINTEN_Msk            (0x1UL)                   /*!< OBFINTEN (Bitfield-Mask: 0x01)                        */
#define KBC_INTEN_IBFINTEN_Pos            (1UL)                     /*!< IBFINTEN (Bit 1)                                      */
#define KBC_INTEN_IBFINTEN_Msk            (0x2UL)                   /*!< IBFINTEN (Bitfield-Mask: 0x01)                        */
/* ========================================================  VWCTRL0  ======================================================== */
#define KBC_VWCTRL0_IRQEN_Pos             (0UL)                     /*!< IRQEN (Bit 0)                                         */
#define KBC_VWCTRL0_IRQEN_Msk             (0x1UL)                   /*!< IRQEN (Bitfield-Mask: 0x01)                           */
#define KBC_VWCTRL0_TGLV_Pos              (1UL)                     /*!< TGLV (Bit 1)                                          */
#define KBC_VWCTRL0_TGLV_Msk              (0x2UL)                   /*!< TGLV (Bitfield-Mask: 0x01)                            */
/* ========================================================  VWCTRL1  ======================================================== */
#define KBC_VWCTRL1_IRQNUM_Pos            (0UL)                     /*!< IRQNUM (Bit 0)                                        */
#define KBC_VWCTRL1_IRQNUM_Msk            (0xffUL)                  /*!< IRQNUM (Bitfield-Mask: 0xff)                          */
#define KBC_VWCTRL1_ACTEN_Pos             (8UL)                     /*!< ACTEN (Bit 8)                                         */
#define KBC_VWCTRL1_ACTEN_Msk             (0x100UL)                 /*!< ACTEN (Bitfield-Mask: 0x01)                           */


/* =========================================================================================================================== */
/* ================                                           ACPI                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  STS  ========================================================== */
#define ACPI_STS_OBF_Pos                  (0UL)                     /*!< OBF (Bit 0)                                           */
#define ACPI_STS_OBF_Msk                  (0x1UL)                   /*!< OBF (Bitfield-Mask: 0x01)                             */
#define ACPI_STS_IBF_Pos                  (1UL)                     /*!< IBF (Bit 1)                                           */
#define ACPI_STS_IBF_Msk                  (0x2UL)                   /*!< IBF (Bitfield-Mask: 0x01)                             */
#define ACPI_STS_STS0_Pos                 (2UL)                     /*!< STS0 (Bit 2)                                          */
#define ACPI_STS_STS0_Msk                 (0x4UL)                   /*!< STS0 (Bitfield-Mask: 0x01)                            */
#define ACPI_STS_CMDSEL_Pos               (3UL)                     /*!< CMDSEL (Bit 3)                                        */
#define ACPI_STS_CMDSEL_Msk               (0x8UL)                   /*!< CMDSEL (Bitfield-Mask: 0x01)                          */
#define ACPI_STS_BURST_Pos                (4UL)                     /*!< BURST (Bit 4)                                         */
#define ACPI_STS_BURST_Msk                (0x10UL)                  /*!< BURST (Bitfield-Mask: 0x01)                           */
#define ACPI_STS_STS2_Pos                 (5UL)                     /*!< STS2 (Bit 5)                                          */
#define ACPI_STS_STS2_Msk                 (0x20UL)                  /*!< STS2 (Bitfield-Mask: 0x01)                            */
#define ACPI_STS_STS3_Pos                 (6UL)                     /*!< STS3 (Bit 6)                                          */
#define ACPI_STS_STS3_Msk                 (0x40UL)                  /*!< STS3 (Bitfield-Mask: 0x01)                            */
#define ACPI_STS_STS4_Pos                 (7UL)                     /*!< STS4 (Bit 7)                                          */
#define ACPI_STS_STS4_Msk                 (0x80UL)                  /*!< STS4 (Bitfield-Mask: 0x01)                            */
/* ==========================================================  IB  =========================================================== */
#define ACPI_IB_IBDAT_Pos                 (0UL)                     /*!< IBDAT (Bit 0)                                         */
#define ACPI_IB_IBDAT_Msk                 (0xffUL)                  /*!< IBDAT (Bitfield-Mask: 0xff)                           */
#define ACPI_IB_IBCLR_Pos                 (8UL)                     /*!< IBCLR (Bit 8)                                         */
#define ACPI_IB_IBCLR_Msk                 (0x100UL)                 /*!< IBCLR (Bitfield-Mask: 0x01)                           */
/* ==========================================================  OB  =========================================================== */
#define ACPI_OB_OBDAT_Pos                 (0UL)                     /*!< OBDAT (Bit 0)                                         */
#define ACPI_OB_OBDAT_Msk                 (0xffUL)                  /*!< OBDAT (Bitfield-Mask: 0xff)                           */
#define ACPI_OB_OBCLR_Pos                 (8UL)                     /*!< OBCLR (Bit 8)                                         */
#define ACPI_OB_OBCLR_Msk                 (0x100UL)                 /*!< OBCLR (Bitfield-Mask: 0x01)                           */
/* ========================================================  PTADDR  ========================================================= */
#define ACPI_PTADDR_ADDR_Pos              (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ACPI_PTADDR_ADDR_Msk              (0xfffUL)                 /*!< ADDR (Bitfield-Mask: 0xfff)                           */
#define ACPI_PTADDR_OFFSET_Pos            (12UL)                    /*!< OFFSET (Bit 12)                                       */
#define ACPI_PTADDR_OFFSET_Msk            (0x7000UL)                /*!< OFFSET (Bitfield-Mask: 0x07)                          */
/* =========================================================  INTEN  ========================================================= */
#define ACPI_INTEN_OBFINTEN_Pos           (0UL)                     /*!< OBFINTEN (Bit 0)                                      */
#define ACPI_INTEN_OBFINTEN_Msk           (0x1UL)                   /*!< OBFINTEN (Bitfield-Mask: 0x01)                        */
#define ACPI_INTEN_IBFINTEN_Pos           (1UL)                     /*!< IBFINTEN (Bit 1)                                      */
#define ACPI_INTEN_IBFINTEN_Msk           (0x2UL)                   /*!< IBFINTEN (Bitfield-Mask: 0x01)                        */
/* ========================================================  VWCTRL0  ======================================================== */
#define ACPI_VWCTRL0_IRQEN_Pos            (0UL)                     /*!< IRQEN (Bit 0)                                         */
#define ACPI_VWCTRL0_IRQEN_Msk            (0x1UL)                   /*!< IRQEN (Bitfield-Mask: 0x01)                           */
#define ACPI_VWCTRL0_TGLV_Pos             (1UL)                     /*!< TGLV (Bit 1)                                          */
#define ACPI_VWCTRL0_TGLV_Msk             (0x2UL)                   /*!< TGLV (Bitfield-Mask: 0x01)                            */
/* ========================================================  VWCTRL1  ======================================================== */
#define ACPI_VWCTRL1_IRQNUM_Pos           (0UL)                     /*!< IRQNUM (Bit 0)                                        */
#define ACPI_VWCTRL1_IRQNUM_Msk           (0xffUL)                  /*!< IRQNUM (Bitfield-Mask: 0xff)                          */
#define ACPI_VWCTRL1_ACTEN_Pos            (8UL)                     /*!< ACTEN (Bit 8)                                         */
#define ACPI_VWCTRL1_ACTEN_Msk            (0x100UL)                 /*!< ACTEN (Bitfield-Mask: 0x01)                           */


/* =========================================================================================================================== */
/* ================                                          PMPORT                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  STS  ========================================================== */
#define PMPORT_STS_OBF_Pos                (0UL)                     /*!< OBF (Bit 0)                                           */
#define PMPORT_STS_OBF_Msk                (0x1UL)                   /*!< OBF (Bitfield-Mask: 0x01)                             */
#define PMPORT_STS_IBF_Pos                (1UL)                     /*!< IBF (Bit 1)                                           */
#define PMPORT_STS_IBF_Msk                (0x2UL)                   /*!< IBF (Bitfield-Mask: 0x01)                             */
#define PMPORT_STS_STS0_Pos               (2UL)                     /*!< STS0 (Bit 2)                                          */
#define PMPORT_STS_STS0_Msk               (0x4UL)                   /*!< STS0 (Bitfield-Mask: 0x01)                            */
#define PMPORT_STS_CMDSEL_Pos             (3UL)                     /*!< CMDSEL (Bit 3)                                        */
#define PMPORT_STS_CMDSEL_Msk             (0x8UL)                   /*!< CMDSEL (Bitfield-Mask: 0x01)                          */
#define PMPORT_STS_STS1_Pos               (4UL)                     /*!< STS1 (Bit 4)                                          */
#define PMPORT_STS_STS1_Msk               (0x10UL)                  /*!< STS1 (Bitfield-Mask: 0x01)                            */
#define PMPORT_STS_STS2_Pos               (5UL)                     /*!< STS2 (Bit 5)                                          */
#define PMPORT_STS_STS2_Msk               (0x20UL)                  /*!< STS2 (Bitfield-Mask: 0x01)                            */
#define PMPORT_STS_STS3_Pos               (6UL)                     /*!< STS3 (Bit 6)                                          */
#define PMPORT_STS_STS3_Msk               (0x40UL)                  /*!< STS3 (Bitfield-Mask: 0x01)                            */
#define PMPORT_STS_STS4_Pos               (7UL)                     /*!< STS4 (Bit 7)                                          */
#define PMPORT_STS_STS4_Msk               (0x80UL)                  /*!< STS4 (Bitfield-Mask: 0x01)                            */
/* ==========================================================  IB  =========================================================== */
#define PMPORT_IB_IBDAT_Pos               (0UL)                     /*!< IBDAT (Bit 0)                                         */
#define PMPORT_IB_IBDAT_Msk               (0xffUL)                  /*!< IBDAT (Bitfield-Mask: 0xff)                           */
#define PMPORT_IB_IBCLR_Pos               (8UL)                     /*!< IBCLR (Bit 8)                                         */
#define PMPORT_IB_IBCLR_Msk               (0x100UL)                 /*!< IBCLR (Bitfield-Mask: 0x01)                           */
/* ==========================================================  OB  =========================================================== */
#define PMPORT_OB_OBDAT_Pos               (0UL)                     /*!< OBDAT (Bit 0)                                         */
#define PMPORT_OB_OBDAT_Msk               (0xffUL)                  /*!< OBDAT (Bitfield-Mask: 0xff)                           */
#define PMPORT_OB_OBCLR_Pos               (8UL)                     /*!< OBCLR (Bit 8)                                         */
#define PMPORT_OB_OBCLR_Msk               (0x100UL)                 /*!< OBCLR (Bitfield-Mask: 0x01)                           */
/* ========================================================  PTADDR  ========================================================= */
#define PMPORT_PTADDR_ADDR_Pos            (0UL)                     /*!< ADDR (Bit 0)                                          */
#define PMPORT_PTADDR_ADDR_Msk            (0xfffUL)                 /*!< ADDR (Bitfield-Mask: 0xfff)                           */
#define PMPORT_PTADDR_OFFSET_Pos          (12UL)                    /*!< OFFSET (Bit 12)                                       */
#define PMPORT_PTADDR_OFFSET_Msk          (0x7000UL)                /*!< OFFSET (Bitfield-Mask: 0x07)                          */
/* =========================================================  INTEN  ========================================================= */
#define PMPORT_INTEN_OBFINTEN_Pos         (0UL)                     /*!< OBFINTEN (Bit 0)                                      */
#define PMPORT_INTEN_OBFINTEN_Msk         (0x1UL)                   /*!< OBFINTEN (Bitfield-Mask: 0x01)                        */
#define PMPORT_INTEN_IBFINTEN_Pos         (1UL)                     /*!< IBFINTEN (Bit 1)                                      */
#define PMPORT_INTEN_IBFINTEN_Msk         (0x2UL)                   /*!< IBFINTEN (Bitfield-Mask: 0x01)                        */
/* ========================================================  VWCTRL0  ======================================================== */
#define PMPORT_VWCTRL0_IRQEN_Pos          (0UL)                     /*!< IRQEN (Bit 0)                                         */
#define PMPORT_VWCTRL0_IRQEN_Msk          (0x1UL)                   /*!< IRQEN (Bitfield-Mask: 0x01)                           */
#define PMPORT_VWCTRL0_TGLV_Pos           (1UL)                     /*!< TGLV (Bit 1)                                          */
#define PMPORT_VWCTRL0_TGLV_Msk           (0x2UL)                   /*!< TGLV (Bitfield-Mask: 0x01)                            */
/* ========================================================  VWCTRL1  ======================================================== */
#define PMPORT_VWCTRL1_IRQNUM_Pos         (0UL)                     /*!< IRQNUM (Bit 0)                                        */
#define PMPORT_VWCTRL1_IRQNUM_Msk         (0xffUL)                  /*!< IRQNUM (Bitfield-Mask: 0xff)                          */
#define PMPORT_VWCTRL1_ACTEN_Pos          (8UL)                     /*!< ACTEN (Bit 8)                                         */
#define PMPORT_VWCTRL1_ACTEN_Msk          (0x100UL)                 /*!< ACTEN (Bitfield-Mask: 0x01)                           */


/* =========================================================================================================================== */
/* ================                                            DIO                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  ADDR  ========================================================== */
#define DIO_ADDR_ADDR_Pos                 (0UL)                     /*!< ADDR (Bit 0)                                          */
#define DIO_ADDR_ADDR_Msk                 (0xffffUL)                /*!< ADDR (Bitfield-Mask: 0xffff)                          */
/* ==========================================================  CFG  ========================================================== */
#define DIO_CFG_EN_Pos                    (0UL)                     /*!< EN (Bit 0)                                            */
#define DIO_CFG_EN_Msk                    (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */


/* =========================================================================================================================== */
/* ================                                          PORT80                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  STS  ========================================================== */
#define PORT80_STS_FIFOEM_Pos             (0UL)                     /*!< FIFOEM (Bit 0)                                        */
#define PORT80_STS_FIFOEM_Msk             (0x1UL)                   /*!< FIFOEM (Bitfield-Mask: 0x01)                          */
#define PORT80_STS_FIFOFUL_Pos            (1UL)                     /*!< FIFOFUL (Bit 1)                                       */
#define PORT80_STS_FIFOFUL_Msk            (0x2UL)                   /*!< FIFOFUL (Bitfield-Mask: 0x01)                         */
#define PORT80_STS_FIFOOVRN_Pos           (2UL)                     /*!< FIFOOVRN (Bit 2)                                      */
#define PORT80_STS_FIFOOVRN_Msk           (0x4UL)                   /*!< FIFOOVRN (Bitfield-Mask: 0x01)                        */
/* ==========================================================  CFG  ========================================================== */
#define PORT80_CFG_CLRFLG_Pos             (0UL)                     /*!< CLRFLG (Bit 0)                                        */
#define PORT80_CFG_CLRFLG_Msk             (0x1UL)                   /*!< CLRFLG (Bitfield-Mask: 0x01)                          */
#define PORT80_CFG_THRE_Pos               (1UL)                     /*!< THRE (Bit 1)                                          */
#define PORT80_CFG_THRE_Msk               (0x6UL)                   /*!< THRE (Bitfield-Mask: 0x03)                            */
#define PORT80_CFG_THREEN_Pos             (7UL)                     /*!< THREEN (Bit 7)                                        */
#define PORT80_CFG_THREEN_Msk             (0x80UL)                  /*!< THREEN (Bitfield-Mask: 0x01)                          */
#define PORT80_CFG_UARTPASS_Pos           (8UL)                     /*!< UARTPASS (Bit 8)                                      */
#define PORT80_CFG_UARTPASS_Msk           (0x100UL)                 /*!< UARTPASS (Bitfield-Mask: 0x01)                        */
/* =========================================================  INTEN  ========================================================= */
#define PORT80_INTEN_THREINTEN_Pos        (0UL)                     /*!< THREINTEN (Bit 0)                                     */
#define PORT80_INTEN_THREINTEN_Msk        (0x1UL)                   /*!< THREINTEN (Bitfield-Mask: 0x01)                       */
/* =========================================================  DATA  ========================================================== */
#define PORT80_DATA_DATA_Pos              (0UL)                     /*!< DATA (Bit 0)                                          */
#define PORT80_DATA_DATA_Msk              (0xffUL)                  /*!< DATA (Bitfield-Mask: 0xff)                            */
/* =========================================================  ADDR  ========================================================== */
#define PORT80_ADDR_ADDR_Pos              (0UL)                     /*!< ADDR (Bit 0)                                          */
#define PORT80_ADDR_ADDR_Msk              (0xffUL)                  /*!< ADDR (Bitfield-Mask: 0xff)                            */


/* =========================================================================================================================== */
/* ================                                           ESPI                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  EPSTS  ========================================================= */
#define ESPI_EPSTS_MWDONE_Pos             (0UL)                     /*!< MWDONE (Bit 0)                                        */
#define ESPI_EPSTS_MWDONE_Msk             (0x1UL)                   /*!< MWDONE (Bitfield-Mask: 0x01)                          */
#define ESPI_EPSTS_MWADMS_Pos             (1UL)                     /*!< MWADMS (Bit 1)                                        */
#define ESPI_EPSTS_MWADMS_Msk             (0x2UL)                   /*!< MWADMS (Bitfield-Mask: 0x01)                          */
#define ESPI_EPSTS_MRDONE_Pos             (2UL)                     /*!< MRDONE (Bit 2)                                        */
#define ESPI_EPSTS_MRDONE_Msk             (0x4UL)                   /*!< MRDONE (Bitfield-Mask: 0x01)                          */
#define ESPI_EPSTS_LTXDONE_Pos            (3UL)                     /*!< LTXDONE (Bit 3)                                       */
#define ESPI_EPSTS_LTXDONE_Msk            (0x8UL)                   /*!< LTXDONE (Bitfield-Mask: 0x01)                         */
/* =========================================================  EPCFG  ========================================================= */
#define ESPI_EPCFG_CHEN_Pos               (0UL)                     /*!< CHEN (Bit 0)                                          */
#define ESPI_EPCFG_CHEN_Msk               (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01)                            */
#define ESPI_EPCFG_CHRDY_Pos              (1UL)                     /*!< CHRDY (Bit 1)                                         */
#define ESPI_EPCFG_CHRDY_Msk              (0x2UL)                   /*!< CHRDY (Bitfield-Mask: 0x01)                           */
#define ESPI_EPCFG_BMTREN_Pos             (2UL)                     /*!< BMTREN (Bit 2)                                        */
#define ESPI_EPCFG_BMTREN_Msk             (0x4UL)                   /*!< BMTREN (Bitfield-Mask: 0x01)                          */
#define ESPI_EPCFG_MXPLSUP_Pos            (4UL)                     /*!< MXPLSUP (Bit 4)                                       */
#define ESPI_EPCFG_MXPLSUP_Msk            (0x70UL)                  /*!< MXPLSUP (Bitfield-Mask: 0x07)                         */
#define ESPI_EPCFG_MXPLSEL_Pos            (8UL)                     /*!< MXPLSEL (Bit 8)                                       */
#define ESPI_EPCFG_MXPLSEL_Msk            (0x700UL)                 /*!< MXPLSEL (Bitfield-Mask: 0x07)                         */
#define ESPI_EPCFG_MXRDSZ_Pos             (12UL)                    /*!< MXRDSZ (Bit 12)                                       */
#define ESPI_EPCFG_MXRDSZ_Msk             (0x7000UL)                /*!< MXRDSZ (Bitfield-Mask: 0x07)                          */
/* ========================================================  EPINTEN  ======================================================== */
#define ESPI_EPINTEN_CFGCHGEN_Pos         (0UL)                     /*!< CFGCHGEN (Bit 0)                                      */
#define ESPI_EPINTEN_CFGCHGEN_Msk         (0x1UL)                   /*!< CFGCHGEN (Bitfield-Mask: 0x01)                        */
#define ESPI_EPINTEN_MEMWREN_Pos          (1UL)                     /*!< MEMWREN (Bit 1)                                       */
#define ESPI_EPINTEN_MEMWREN_Msk          (0x2UL)                   /*!< MEMWREN (Bitfield-Mask: 0x01)                         */
#define ESPI_EPINTEN_MEMRDEN_Pos          (2UL)                     /*!< MEMRDEN (Bit 2)                                       */
#define ESPI_EPINTEN_MEMRDEN_Msk          (0x4UL)                   /*!< MEMRDEN (Bitfield-Mask: 0x01)                         */
/* =======================================================  EPRXINFO  ======================================================== */
#define ESPI_EPRXINFO_LENGTH_Pos          (0UL)                     /*!< LENGTH (Bit 0)                                        */
#define ESPI_EPRXINFO_LENGTH_Msk          (0xfffUL)                 /*!< LENGTH (Bitfield-Mask: 0xfff)                         */
#define ESPI_EPRXINFO_TAG_Pos             (12UL)                    /*!< TAG (Bit 12)                                          */
#define ESPI_EPRXINFO_TAG_Msk             (0xf000UL)                /*!< TAG (Bitfield-Mask: 0x0f)                             */
#define ESPI_EPRXINFO_CYCLE_Pos           (16UL)                    /*!< CYCLE (Bit 16)                                        */
#define ESPI_EPRXINFO_CYCLE_Msk           (0xff0000UL)              /*!< CYCLE (Bitfield-Mask: 0xff)                           */
#define ESPI_EPRXINFO_OPCODE_Pos          (24UL)                    /*!< OPCODE (Bit 24)                                       */
#define ESPI_EPRXINFO_OPCODE_Msk          (0xff000000UL)            /*!< OPCODE (Bitfield-Mask: 0xff)                          */
/* =======================================================  EPRXADRH  ======================================================== */
/* =======================================================  EPRXADRL  ======================================================== */
/* =======================================================  EPCPRADR  ======================================================== */
/* =======================================================  EPCPRVLD  ======================================================== */
#define ESPI_EPCPRVLD_VALIDEN_Pos         (0UL)                     /*!< VALIDEN (Bit 0)                                       */
#define ESPI_EPCPRVLD_VALIDEN_Msk         (0x1UL)                   /*!< VALIDEN (Bitfield-Mask: 0x01)                         */
/* =========================================================  EPBUF  ========================================================= */
/* ========================================================  EPBUFSZ  ======================================================== */
#define ESPI_EPBUFSZ_SIZE_Pos             (0UL)                     /*!< SIZE (Bit 0)                                          */
#define ESPI_EPBUFSZ_SIZE_Msk             (0xfUL)                   /*!< SIZE (Bitfield-Mask: 0x0f)                            */
/* =======================================================  EPPTRCLR  ======================================================== */
#define ESPI_EPPTRCLR_WRCLR_Pos           (0UL)                     /*!< WRCLR (Bit 0)                                         */
#define ESPI_EPPTRCLR_WRCLR_Msk           (0x1UL)                   /*!< WRCLR (Bitfield-Mask: 0x01)                           */
#define ESPI_EPPTRCLR_RDCLR_Pos           (1UL)                     /*!< RDCLR (Bit 1)                                         */
#define ESPI_EPPTRCLR_RDCLR_Msk           (0x2UL)                   /*!< RDCLR (Bitfield-Mask: 0x01)                           */
/* =========================================================  ELMSG  ========================================================= */
#define ESPI_ELMSG_MSGDAT_Pos             (0UL)                     /*!< MSGDAT (Bit 0)                                        */
#define ESPI_ELMSG_MSGDAT_Msk             (0xffffUL)                /*!< MSGDAT (Bitfield-Mask: 0xffff)                        */
#define ESPI_ELMSG_MSGCODE_Pos            (16UL)                    /*!< MSGCODE (Bit 16)                                      */
#define ESPI_ELMSG_MSGCODE_Msk            (0xffff0000UL)            /*!< MSGCODE (Bitfield-Mask: 0xffff)                       */
/* ========================================================  EPMRDA  ========================================================= */
/* =======================================================  EPMRADRL  ======================================================== */
/* =======================================================  EPMRADRH  ======================================================== */
/* ========================================================  EPMRLEN  ======================================================== */
#define ESPI_EPMRLEN_RXLEN_Pos            (0UL)                     /*!< RXLEN (Bit 0)                                         */
#define ESPI_EPMRLEN_RXLEN_Msk            (0xfffUL)                 /*!< RXLEN (Bitfield-Mask: 0xfff)                          */
/* =========================================================  EVSTS  ========================================================= */
#define ESPI_EVSTS_RXEPT_Pos              (0UL)                     /*!< RXEPT (Bit 0)                                         */
#define ESPI_EVSTS_RXEPT_Msk              (0x1UL)                   /*!< RXEPT (Bitfield-Mask: 0x01)                           */
#define ESPI_EVSTS_RXOVR_Pos              (1UL)                     /*!< RXOVR (Bit 1)                                         */
#define ESPI_EVSTS_RXOVR_Msk              (0x2UL)                   /*!< RXOVR (Bitfield-Mask: 0x01)                           */
#define ESPI_EVSTS_TXFULL_Pos             (2UL)                     /*!< TXFULL (Bit 2)                                        */
#define ESPI_EVSTS_TXFULL_Msk             (0x4UL)                   /*!< TXFULL (Bitfield-Mask: 0x01)                          */
#define ESPI_EVSTS_ILLCHG_Pos             (3UL)                     /*!< ILLCHG (Bit 3)                                        */
#define ESPI_EVSTS_ILLCHG_Msk             (0x8UL)                   /*!< ILLCHG (Bitfield-Mask: 0x01)                          */
#define ESPI_EVSTS_IDX2CHG_Pos            (4UL)                     /*!< IDX2CHG (Bit 4)                                       */
#define ESPI_EVSTS_IDX2CHG_Msk            (0x10UL)                  /*!< IDX2CHG (Bitfield-Mask: 0x01)                         */
#define ESPI_EVSTS_IDX3CHG_Pos            (5UL)                     /*!< IDX3CHG (Bit 5)                                       */
#define ESPI_EVSTS_IDX3CHG_Msk            (0x20UL)                  /*!< IDX3CHG (Bitfield-Mask: 0x01)                         */
#define ESPI_EVSTS_IDX7CHG_Pos            (6UL)                     /*!< IDX7CHG (Bit 6)                                       */
#define ESPI_EVSTS_IDX7CHG_Msk            (0x40UL)                  /*!< IDX7CHG (Bitfield-Mask: 0x01)                         */
#define ESPI_EVSTS_IDX41CHG_Pos           (7UL)                     /*!< IDX41CHG (Bit 7)                                      */
#define ESPI_EVSTS_IDX41CHG_Msk           (0x80UL)                  /*!< IDX41CHG (Bitfield-Mask: 0x01)                        */
#define ESPI_EVSTS_IDX42CHG_Pos           (8UL)                     /*!< IDX42CHG (Bit 8)                                      */
#define ESPI_EVSTS_IDX42CHG_Msk           (0x100UL)                 /*!< IDX42CHG (Bitfield-Mask: 0x01)                        */
#define ESPI_EVSTS_IDX43CHG_Pos           (9UL)                     /*!< IDX43CHG (Bit 9)                                      */
#define ESPI_EVSTS_IDX43CHG_Msk           (0x200UL)                 /*!< IDX43CHG (Bitfield-Mask: 0x01)                        */
#define ESPI_EVSTS_IDX44CHG_Pos           (10UL)                    /*!< IDX44CHG (Bit 10)                                     */
#define ESPI_EVSTS_IDX44CHG_Msk           (0x400UL)                 /*!< IDX44CHG (Bitfield-Mask: 0x01)                        */
#define ESPI_EVSTS_IDX47CHG_Pos           (11UL)                    /*!< IDX47CHG (Bit 11)                                     */
#define ESPI_EVSTS_IDX47CHG_Msk           (0x800UL)                 /*!< IDX47CHG (Bitfield-Mask: 0x01)                        */
#define ESPI_EVSTS_IDX4ACHG_Pos           (12UL)                    /*!< IDX4ACHG (Bit 12)                                     */
#define ESPI_EVSTS_IDX4ACHG_Msk           (0x1000UL)                /*!< IDX4ACHG (Bitfield-Mask: 0x01)                        */
#define ESPI_EVSTS_IDX51CHG_Pos           (13UL)                    /*!< IDX51CHG (Bit 13)                                     */
#define ESPI_EVSTS_IDX51CHG_Msk           (0x2000UL)                /*!< IDX51CHG (Bitfield-Mask: 0x01)                        */
#define ESPI_EVSTS_IDX61CHG_Pos           (14UL)                    /*!< IDX61CHG (Bit 14)                                     */
#define ESPI_EVSTS_IDX61CHG_Msk           (0x4000UL)                /*!< IDX61CHG (Bitfield-Mask: 0x01)                        */
#define ESPI_EVSTS_CFGCHG_Pos             (15UL)                    /*!< CFGCHG (Bit 15)                                       */
#define ESPI_EVSTS_CFGCHG_Msk             (0x8000UL)                /*!< CFGCHG (Bitfield-Mask: 0x01)                          */
#define ESPI_EVSTS_TXDONE_Pos             (16UL)                    /*!< TXDONE (Bit 16)                                       */
#define ESPI_EVSTS_TXDONE_Msk             (0x10000UL)               /*!< TXDONE (Bitfield-Mask: 0x01)                          */
#define ESPI_EVSTS_RXIDXCLR_Pos           (17UL)                    /*!< RXIDXCLR (Bit 17)                                     */
#define ESPI_EVSTS_RXIDXCLR_Msk           (0x20000UL)               /*!< RXIDXCLR (Bitfield-Mask: 0x01)                        */
/* =========================================================  EVCFG  ========================================================= */
#define ESPI_EVCFG_CHEN_Pos               (0UL)                     /*!< CHEN (Bit 0)                                          */
#define ESPI_EVCFG_CHEN_Msk               (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01)                            */
#define ESPI_EVCFG_CHRDY_Pos              (1UL)                     /*!< CHRDY (Bit 1)                                         */
#define ESPI_EVCFG_CHRDY_Msk              (0x2UL)                   /*!< CHRDY (Bitfield-Mask: 0x01)                           */
#define ESPI_EVCFG_MAXSUP_Pos             (8UL)                     /*!< MAXSUP (Bit 8)                                        */
#define ESPI_EVCFG_MAXSUP_Msk             (0x3f00UL)                /*!< MAXSUP (Bitfield-Mask: 0x3f)                          */
#define ESPI_EVCFG_MAXCNT_Pos             (16UL)                    /*!< MAXCNT (Bit 16)                                       */
#define ESPI_EVCFG_MAXCNT_Msk             (0x3f0000UL)              /*!< MAXCNT (Bitfield-Mask: 0x3f)                          */
/* ========================================================  EVIDX2  ========================================================= */
#define ESPI_EVIDX2_RXDAT_Pos             (0UL)                     /*!< RXDAT (Bit 0)                                         */
#define ESPI_EVIDX2_RXDAT_Msk             (0xffUL)                  /*!< RXDAT (Bitfield-Mask: 0xff)                           */
/* ========================================================  EVIDX3  ========================================================= */
#define ESPI_EVIDX3_RXDAT_Pos             (0UL)                     /*!< RXDAT (Bit 0)                                         */
#define ESPI_EVIDX3_RXDAT_Msk             (0xffUL)                  /*!< RXDAT (Bitfield-Mask: 0xff)                           */
/* ========================================================  EVIDX7  ========================================================= */
#define ESPI_EVIDX7_RXDAT_Pos             (0UL)                     /*!< RXDAT (Bit 0)                                         */
#define ESPI_EVIDX7_RXDAT_Msk             (0xffUL)                  /*!< RXDAT (Bitfield-Mask: 0xff)                           */
/* ========================================================  EVIDX41  ======================================================== */
#define ESPI_EVIDX41_RXDAT_Pos            (0UL)                     /*!< RXDAT (Bit 0)                                         */
#define ESPI_EVIDX41_RXDAT_Msk            (0xffUL)                  /*!< RXDAT (Bitfield-Mask: 0xff)                           */
/* ========================================================  EVIDX42  ======================================================== */
#define ESPI_EVIDX42_RXDAT_Pos            (0UL)                     /*!< RXDAT (Bit 0)                                         */
#define ESPI_EVIDX42_RXDAT_Msk            (0xffUL)                  /*!< RXDAT (Bitfield-Mask: 0xff)                           */
/* ========================================================  EVIDX43  ======================================================== */
#define ESPI_EVIDX43_RXDAT_Pos            (0UL)                     /*!< RXDAT (Bit 0)                                         */
#define ESPI_EVIDX43_RXDAT_Msk            (0xffUL)                  /*!< RXDAT (Bitfield-Mask: 0xff)                           */
/* ========================================================  EVIDX44  ======================================================== */
#define ESPI_EVIDX44_RXDAT_Pos            (0UL)                     /*!< RXDAT (Bit 0)                                         */
#define ESPI_EVIDX44_RXDAT_Msk            (0xffUL)                  /*!< RXDAT (Bitfield-Mask: 0xff)                           */
/* ========================================================  EVIDX47  ======================================================== */
#define ESPI_EVIDX47_RXDAT_Pos            (0UL)                     /*!< RXDAT (Bit 0)                                         */
#define ESPI_EVIDX47_RXDAT_Msk            (0xffUL)                  /*!< RXDAT (Bitfield-Mask: 0xff)                           */
/* ========================================================  EVIDX4A  ======================================================== */
#define ESPI_EVIDX4A_RXDAT_Pos            (0UL)                     /*!< RXDAT (Bit 0)                                         */
#define ESPI_EVIDX4A_RXDAT_Msk            (0xffUL)                  /*!< RXDAT (Bitfield-Mask: 0xff)                           */
/* ========================================================  EVTXDAT  ======================================================== */
#define ESPI_EVTXDAT_TXDAT_Pos            (0UL)                     /*!< TXDAT (Bit 0)                                         */
#define ESPI_EVTXDAT_TXDAT_Msk            (0xffUL)                  /*!< TXDAT (Bitfield-Mask: 0xff)                           */
#define ESPI_EVTXDAT_TXIDX_Pos            (8UL)                     /*!< TXIDX (Bit 8)                                         */
#define ESPI_EVTXDAT_TXIDX_Msk            (0xff00UL)                /*!< TXIDX (Bitfield-Mask: 0xff)                           */
/* ========================================================  EVPVIDX  ======================================================== */
#define ESPI_EVPVIDX_PVIDX_Pos            (0UL)                     /*!< PVIDX (Bit 0)                                         */
#define ESPI_EVPVIDX_PVIDX_Msk            (0xffUL)                  /*!< PVIDX (Bitfield-Mask: 0xff)                           */
/* =======================================================  EVRXINTEN  ======================================================= */
#define ESPI_EVRXINTEN_CFGCHGEN_Pos       (0UL)                     /*!< CFGCHGEN (Bit 0)                                      */
#define ESPI_EVRXINTEN_CFGCHGEN_Msk       (0x1UL)                   /*!< CFGCHGEN (Bitfield-Mask: 0x01)                        */
#define ESPI_EVRXINTEN_RXCHGEN_Pos        (2UL)                     /*!< RXCHGEN (Bit 2)                                       */
#define ESPI_EVRXINTEN_RXCHGEN_Msk        (0x4UL)                   /*!< RXCHGEN (Bitfield-Mask: 0x01)                         */
/* =======================================================  EVTXINTEN  ======================================================= */
#define ESPI_EVTXINTEN_TXMPTEN_Pos        (0UL)                     /*!< TXMPTEN (Bit 0)                                       */
#define ESPI_EVTXINTEN_TXMPTEN_Msk        (0x1UL)                   /*!< TXMPTEN (Bitfield-Mask: 0x01)                         */
/* =========================================================  EOSTS  ========================================================= */
#define ESPI_EOSTS_RXPND_Pos              (0UL)                     /*!< RXPND (Bit 0)                                         */
#define ESPI_EOSTS_RXPND_Msk              (0x1UL)                   /*!< RXPND (Bitfield-Mask: 0x01)                           */
#define ESPI_EOSTS_RXDONE_Pos             (1UL)                     /*!< RXDONE (Bit 1)                                        */
#define ESPI_EOSTS_RXDONE_Msk             (0x2UL)                   /*!< RXDONE (Bitfield-Mask: 0x01)                          */
#define ESPI_EOSTS_TXPND_Pos              (2UL)                     /*!< TXPND (Bit 2)                                         */
#define ESPI_EOSTS_TXPND_Msk              (0x4UL)                   /*!< TXPND (Bitfield-Mask: 0x01)                           */
#define ESPI_EOSTS_TXDONE_Pos             (3UL)                     /*!< TXDONE (Bit 3)                                        */
#define ESPI_EOSTS_TXDONE_Msk             (0x8UL)                   /*!< TXDONE (Bitfield-Mask: 0x01)                          */
#define ESPI_EOSTS_CFGENCHG_Pos           (4UL)                     /*!< CFGENCHG (Bit 4)                                      */
#define ESPI_EOSTS_CFGENCHG_Msk           (0x10UL)                  /*!< CFGENCHG (Bitfield-Mask: 0x01)                        */
/* =========================================================  EOCFG  ========================================================= */
#define ESPI_EOCFG_CHEN_Pos               (0UL)                     /*!< CHEN (Bit 0)                                          */
#define ESPI_EOCFG_CHEN_Msk               (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01)                            */
#define ESPI_EOCFG_CHRDY_Pos              (1UL)                     /*!< CHRDY (Bit 1)                                         */
#define ESPI_EOCFG_CHRDY_Msk              (0x2UL)                   /*!< CHRDY (Bitfield-Mask: 0x01)                           */
#define ESPI_EOCFG_MXSZSUP_Pos            (4UL)                     /*!< MXSZSUP (Bit 4)                                       */
#define ESPI_EOCFG_MXSZSUP_Msk            (0x70UL)                  /*!< MXSZSUP (Bitfield-Mask: 0x07)                         */
#define ESPI_EOCFG_MXSZSEL_Pos            (8UL)                     /*!< MXSZSEL (Bit 8)                                       */
#define ESPI_EOCFG_MXSZSEL_Msk            (0x700UL)                 /*!< MXSZSEL (Bitfield-Mask: 0x07)                         */
/* =======================================================  EORXINTEN  ======================================================= */
#define ESPI_EORXINTEN_CHENCHG_Pos        (0UL)                     /*!< CHENCHG (Bit 0)                                       */
#define ESPI_EORXINTEN_CHENCHG_Msk        (0x1UL)                   /*!< CHENCHG (Bitfield-Mask: 0x01)                         */
#define ESPI_EORXINTEN_RXEN_Pos           (1UL)                     /*!< RXEN (Bit 1)                                          */
#define ESPI_EORXINTEN_RXEN_Msk           (0x2UL)                   /*!< RXEN (Bitfield-Mask: 0x01)                            */
/* ========================================================  EORXBUF  ======================================================== */
/* ========================================================  EORXLEN  ======================================================== */
#define ESPI_EORXLEN_LENGTH_Pos           (0UL)                     /*!< LENGTH (Bit 0)                                        */
#define ESPI_EORXLEN_LENGTH_Msk           (0xfffUL)                 /*!< LENGTH (Bitfield-Mask: 0xfff)                         */
/* ========================================================  EOTXBUF  ======================================================== */
/* ========================================================  EOTXLEN  ======================================================== */
#define ESPI_EOTXLEN_LENGTH_Pos           (0UL)                     /*!< LENGTH (Bit 0)                                        */
#define ESPI_EOTXLEN_LENGTH_Msk           (0xfffUL)                 /*!< LENGTH (Bitfield-Mask: 0xfff)                         */
/* =======================================================  EOTXCTRL  ======================================================== */
#define ESPI_EOTXCTRL_TXSTR_Pos           (0UL)                     /*!< TXSTR (Bit 0)                                         */
#define ESPI_EOTXCTRL_TXSTR_Msk           (0x1UL)                   /*!< TXSTR (Bitfield-Mask: 0x01)                           */
/* =======================================================  EOTXINTEN  ======================================================= */
#define ESPI_EOTXINTEN_TXEN_Pos           (0UL)                     /*!< TXEN (Bit 0)                                          */
#define ESPI_EOTXINTEN_TXEN_Msk           (0x1UL)                   /*!< TXEN (Bitfield-Mask: 0x01)                            */
/* =========================================================  EFSTS  ========================================================= */
#define ESPI_EFSTS_MAFTXDN_Pos            (0UL)                     /*!< MAFTXDN (Bit 0)                                       */
#define ESPI_EFSTS_MAFTXDN_Msk            (0x1UL)                   /*!< MAFTXDN (Bitfield-Mask: 0x01)                         */
#define ESPI_EFSTS_MAFREOVR_Pos           (1UL)                     /*!< MAFREOVR (Bit 1)                                      */
#define ESPI_EFSTS_MAFREOVR_Msk           (0x2UL)                   /*!< MAFREOVR (Bitfield-Mask: 0x01)                        */
#define ESPI_EFSTS_MAFREUDR_Pos           (2UL)                     /*!< MAFREUDR (Bit 2)                                      */
#define ESPI_EFSTS_MAFREUDR_Msk           (0x4UL)                   /*!< MAFREUDR (Bitfield-Mask: 0x01)                        */
#define ESPI_EFSTS_SAFDONE_Pos            (3UL)                     /*!< SAFDONE (Bit 3)                                       */
#define ESPI_EFSTS_SAFDONE_Msk            (0x8UL)                   /*!< SAFDONE (Bitfield-Mask: 0x01)                         */
#define ESPI_EFSTS_SAFRW_Pos              (4UL)                     /*!< SAFRW (Bit 4)                                         */
#define ESPI_EFSTS_SAFRW_Msk              (0x10UL)                  /*!< SAFRW (Bitfield-Mask: 0x01)                           */
#define ESPI_EFSTS_SAFERS_Pos             (5UL)                     /*!< SAFERS (Bit 5)                                        */
#define ESPI_EFSTS_SAFERS_Msk             (0x20UL)                  /*!< SAFERS (Bitfield-Mask: 0x01)                          */
#define ESPI_EFSTS_CHENCHG_Pos            (6UL)                     /*!< CHENCHG (Bit 6)                                       */
#define ESPI_EFSTS_CHENCHG_Msk            (0x40UL)                  /*!< CHENCHG (Bitfield-Mask: 0x01)                         */
#define ESPI_EFSTS_RPMCOP2_Pos            (7UL)                     /*!< RPMCOP2 (Bit 7)                                       */
#define ESPI_EFSTS_RPMCOP2_Msk            (0x80UL)                  /*!< RPMCOP2 (Bitfield-Mask: 0x01)                         */
/* ========================================================  EFCONF  ========================================================= */
#define ESPI_EFCONF_CHEN_Pos              (0UL)                     /*!< CHEN (Bit 0)                                          */
#define ESPI_EFCONF_CHEN_Msk              (0x1UL)                   /*!< CHEN (Bitfield-Mask: 0x01)                            */
#define ESPI_EFCONF_CHRDY_Pos             (1UL)                     /*!< CHRDY (Bit 1)                                         */
#define ESPI_EFCONF_CHRDY_Msk             (0x2UL)                   /*!< CHRDY (Bitfield-Mask: 0x01)                           */
#define ESPI_EFCONF_ERBLKSZ_Pos           (2UL)                     /*!< ERBLKSZ (Bit 2)                                       */
#define ESPI_EFCONF_ERBLKSZ_Msk           (0x1cUL)                  /*!< ERBLKSZ (Bitfield-Mask: 0x07)                         */
#define ESPI_EFCONF_MXPLSUP_Pos           (5UL)                     /*!< MXPLSUP (Bit 5)                                       */
#define ESPI_EFCONF_MXPLSUP_Msk           (0xe0UL)                  /*!< MXPLSUP (Bitfield-Mask: 0x07)                         */
#define ESPI_EFCONF_MXPLSEL_Pos           (8UL)                     /*!< MXPLSEL (Bit 8)                                       */
#define ESPI_EFCONF_MXPLSEL_Msk           (0x700UL)                 /*!< MXPLSEL (Bitfield-Mask: 0x07)                         */
#define ESPI_EFCONF_SHAREMD_Pos           (11UL)                    /*!< SHAREMD (Bit 11)                                      */
#define ESPI_EFCONF_SHAREMD_Msk           (0x800UL)                 /*!< SHAREMD (Bitfield-Mask: 0x01)                         */
#define ESPI_EFCONF_MXRDSZ_Pos            (12UL)                    /*!< MXRDSZ (Bit 12)                                       */
#define ESPI_EFCONF_MXRDSZ_Msk            (0x7000UL)                /*!< MXRDSZ (Bitfield-Mask: 0x07)                          */
#define ESPI_EFCONF_SHARECAPSP_Pos        (16UL)                    /*!< SHARECAPSP (Bit 16)                                   */
#define ESPI_EFCONF_SHARECAPSP_Msk        (0x30000UL)               /*!< SHARECAPSP (Bitfield-Mask: 0x03)                      */
#define ESPI_EFCONF_RPMCCNT1_Pos          (20UL)                    /*!< RPMCCNT1 (Bit 20)                                     */
#define ESPI_EFCONF_RPMCCNT1_Msk          (0xf00000UL)              /*!< RPMCCNT1 (Bitfield-Mask: 0x0f)                        */
#define ESPI_EFCONF_RPMCOP1_Pos           (24UL)                    /*!< RPMCOP1 (Bit 24)                                      */
#define ESPI_EFCONF_RPMCOP1_Msk           (0xff000000UL)            /*!< RPMCOP1 (Bitfield-Mask: 0xff)                         */
/* =========================================================  EMADR  ========================================================= */
/* ========================================================  EMTRLEN  ======================================================== */
#define ESPI_EMTRLEN_TRLEN_Pos            (0UL)                     /*!< TRLEN (Bit 0)                                         */
#define ESPI_EMTRLEN_TRLEN_Msk            (0xfffUL)                 /*!< TRLEN (Bitfield-Mask: 0xfff)                          */
/* =========================================================  EMBUF  ========================================================= */
/* ========================================================  EMCTRL  ========================================================= */
#define ESPI_EMCTRL_START_Pos             (0UL)                     /*!< START (Bit 0)                                         */
#define ESPI_EMCTRL_START_Msk             (0x1UL)                   /*!< START (Bitfield-Mask: 0x01)                           */
#define ESPI_EMCTRL_MDSEL_Pos             (1UL)                     /*!< MDSEL (Bit 1)                                         */
#define ESPI_EMCTRL_MDSEL_Msk             (0x6UL)                   /*!< MDSEL (Bitfield-Mask: 0x03)                           */
/* ========================================================  EMINTEN  ======================================================== */
#define ESPI_EMINTEN_CHENCHG_Pos          (0UL)                     /*!< CHENCHG (Bit 0)                                       */
#define ESPI_EMINTEN_CHENCHG_Msk          (0x1UL)                   /*!< CHENCHG (Bitfield-Mask: 0x01)                         */
#define ESPI_EMINTEN_TRDONEEN_Pos         (1UL)                     /*!< TRDONEEN (Bit 1)                                      */
#define ESPI_EMINTEN_TRDONEEN_Msk         (0x2UL)                   /*!< TRDONEEN (Bitfield-Mask: 0x01)                        */
/* =========================================================  ESBUF  ========================================================= */
/* ========================================================  ESINTEN  ======================================================== */
#define ESPI_ESINTEN_TRDONEEN_Pos         (0UL)                     /*!< TRDONEEN (Bit 0)                                      */
#define ESPI_ESINTEN_TRDONEEN_Msk         (0x1UL)                   /*!< TRDONEEN (Bitfield-Mask: 0x01)                        */
#define ESPI_ESINTEN_ERASEEN_Pos          (1UL)                     /*!< ERASEEN (Bit 1)                                       */
#define ESPI_ESINTEN_ERASEEN_Msk          (0x2UL)                   /*!< ERASEEN (Bitfield-Mask: 0x01)                         */
#define ESPI_ESINTEN_RPMCEN_Pos           (2UL)                     /*!< RPMCEN (Bit 2)                                        */
#define ESPI_ESINTEN_RPMCEN_Msk           (0x4UL)                   /*!< RPMCEN (Bitfield-Mask: 0x01)                          */
/* ========================================================  ESRXADR  ======================================================== */
/* ========================================================  ESRXLEN  ======================================================== */
#define ESPI_ESRXLEN_LENGTH_Pos           (0UL)                     /*!< LENGTH (Bit 0)                                        */
#define ESPI_ESRXLEN_LENGTH_Msk           (0xfffUL)                 /*!< LENGTH (Bitfield-Mask: 0xfff)                         */
/* ========================================================  ESPICFG  ======================================================== */
#define ESPI_ESPICFG_CHSUP_Pos            (0UL)                     /*!< CHSUP (Bit 0)                                         */
#define ESPI_ESPICFG_CHSUP_Msk            (0xffUL)                  /*!< CHSUP (Bitfield-Mask: 0xff)                           */
#define ESPI_ESPICFG_MXWAITALW_Pos        (12UL)                    /*!< MXWAITALW (Bit 12)                                    */
#define ESPI_ESPICFG_MXWAITALW_Msk        (0xf000UL)                /*!< MXWAITALW (Bitfield-Mask: 0x0f)                       */
#define ESPI_ESPICFG_MXFREQSUP_Pos        (16UL)                    /*!< MXFREQSUP (Bit 16)                                    */
#define ESPI_ESPICFG_MXFREQSUP_Msk        (0x70000UL)               /*!< MXFREQSUP (Bitfield-Mask: 0x07)                       */
#define ESPI_ESPICFG_ODALRSUP_Pos         (19UL)                    /*!< ODALRSUP (Bit 19)                                     */
#define ESPI_ESPICFG_ODALRSUP_Msk         (0x80000UL)               /*!< ODALRSUP (Bitfield-Mask: 0x01)                        */
#define ESPI_ESPICFG_OPFREQ_Pos           (20UL)                    /*!< OPFREQ (Bit 20)                                       */
#define ESPI_ESPICFG_OPFREQ_Msk           (0x700000UL)              /*!< OPFREQ (Bitfield-Mask: 0x07)                          */
#define ESPI_ESPICFG_ODALRSEL_Pos         (23UL)                    /*!< ODALRSEL (Bit 23)                                     */
#define ESPI_ESPICFG_ODALRSEL_Msk         (0x800000UL)              /*!< ODALRSEL (Bitfield-Mask: 0x01)                        */
#define ESPI_ESPICFG_IOSUP_Pos            (24UL)                    /*!< IOSUP (Bit 24)                                        */
#define ESPI_ESPICFG_IOSUP_Msk            (0x3000000UL)             /*!< IOSUP (Bitfield-Mask: 0x03)                           */
#define ESPI_ESPICFG_IOSEL_Pos            (26UL)                    /*!< IOSEL (Bit 26)                                        */
#define ESPI_ESPICFG_IOSEL_Msk            (0xc000000UL)             /*!< IOSEL (Bitfield-Mask: 0x03)                           */
#define ESPI_ESPICFG_ALRMODE_Pos          (28UL)                    /*!< ALRMODE (Bit 28)                                      */
#define ESPI_ESPICFG_ALRMODE_Msk          (0x10000000UL)            /*!< ALRMODE (Bitfield-Mask: 0x01)                         */
#define ESPI_ESPICFG_RTCINBMC_Pos         (29UL)                    /*!< RTCINBMC (Bit 29)                                     */
#define ESPI_ESPICFG_RTCINBMC_Msk         (0x20000000UL)            /*!< RTCINBMC (Bitfield-Mask: 0x01)                        */
#define ESPI_ESPICFG_RSPMDFEN_Pos         (30UL)                    /*!< RSPMDFEN (Bit 30)                                     */
#define ESPI_ESPICFG_RSPMDFEN_Msk         (0x40000000UL)            /*!< RSPMDFEN (Bitfield-Mask: 0x01)                        */
#define ESPI_ESPICFG_CRCCHKEN_Pos         (31UL)                    /*!< CRCCHKEN (Bit 31)                                     */
#define ESPI_ESPICFG_CRCCHKEN_Msk         (0x80000000UL)            /*!< CRCCHKEN (Bitfield-Mask: 0x01)                        */
/* ========================================================  ERSTCFG  ======================================================== */
/* ========================================================  EVIDX51  ======================================================== */
#define ESPI_EVIDX51_RXDAT_Pos            (0UL)                     /*!< RXDAT (Bit 0)                                         */
#define ESPI_EVIDX51_RXDAT_Msk            (0xffUL)                  /*!< RXDAT (Bitfield-Mask: 0xff)                           */
/* ========================================================  EVIDX61  ======================================================== */
#define ESPI_EVIDX61_RXDAT_Pos            (0UL)                     /*!< RXDAT (Bit 0)                                         */
#define ESPI_EVIDX61_RXDAT_Msk            (0xffUL)                  /*!< RXDAT (Bitfield-Mask: 0xff)                           */
/* =========================================================  ESRXC  ========================================================= */
/* ========================================================  EFCFG2  ========================================================= */
#define ESPI_EFCFG2_MXRDSZ_Pos            (0UL)                     /*!< MXRDSZ (Bit 0)                                        */
#define ESPI_EFCFG2_MXRDSZ_Msk            (0x7UL)                   /*!< MXRDSZ (Bitfield-Mask: 0x07)                          */
#define ESPI_EFCFG2_ERBLKSZ_Pos           (8UL)                     /*!< ERBLKSZ (Bit 8)                                       */
#define ESPI_EFCFG2_ERBLKSZ_Msk           (0xff00UL)                /*!< ERBLKSZ (Bitfield-Mask: 0xff)                         */
#define ESPI_EFCFG2_RPMCSP_Pos            (16UL)                    /*!< RPMCSP (Bit 16)                                       */
#define ESPI_EFCFG2_RPMCSP_Msk            (0x3f0000UL)              /*!< RPMCSP (Bitfield-Mask: 0x3f)                          */
#define ESPI_EFCFG2_NUMRPMC_Pos           (22UL)                    /*!< NUMRPMC (Bit 22)                                      */
#define ESPI_EFCFG2_NUMRPMC_Msk           (0xc00000UL)              /*!< NUMRPMC (Bitfield-Mask: 0x03)                         */
/* ========================================================  EFCFG3  ========================================================= */
#define ESPI_EFCFG3_RPMCCNT2_Pos          (20UL)                    /*!< RPMCCNT2 (Bit 20)                                     */
#define ESPI_EFCFG3_RPMCCNT2_Msk          (0xf00000UL)              /*!< RPMCCNT2 (Bitfield-Mask: 0x0f)                        */
#define ESPI_EFCFG3_RPMCOP2_Pos           (24UL)                    /*!< RPMCOP2 (Bit 24)                                      */
#define ESPI_EFCFG3_RPMCOP2_Msk           (0xff000000UL)            /*!< RPMCOP2 (Bitfield-Mask: 0xff)                         */
/* ========================================================  EFCFG4  ========================================================= */
#define ESPI_EFCFG4_RPMCCNT3_Pos          (4UL)                     /*!< RPMCCNT3 (Bit 4)                                      */
#define ESPI_EFCFG4_RPMCCNT3_Msk          (0xf0UL)                  /*!< RPMCCNT3 (Bitfield-Mask: 0x0f)                        */
#define ESPI_EFCFG4_RPMCOP3_Pos           (8UL)                     /*!< RPMCOP3 (Bit 8)                                       */
#define ESPI_EFCFG4_RPMCOP3_Msk           (0xff00UL)                /*!< RPMCOP3 (Bitfield-Mask: 0xff)                         */
#define ESPI_EFCFG4_RPMCCNT4_Pos          (20UL)                    /*!< RPMCCNT4 (Bit 20)                                     */
#define ESPI_EFCFG4_RPMCCNT4_Msk          (0xf00000UL)              /*!< RPMCCNT4 (Bitfield-Mask: 0x0f)                        */
#define ESPI_EFCFG4_RPMCOP4_Pos           (24UL)                    /*!< RPMCOP4 (Bit 24)                                      */
#define ESPI_EFCFG4_RPMCOP4_Msk           (0xff000000UL)            /*!< RPMCOP4 (Bitfield-Mask: 0xff)                         */
/* ========================================================  ELCTRL  ========================================================= */
#define ESPI_ELCTRL_TXSTR_Pos             (0UL)                     /*!< TXSTR (Bit 0)                                         */
#define ESPI_ELCTRL_TXSTR_Msk             (0x1UL)                   /*!< TXSTR (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESBUF1  ========================================================= */
/* ========================================================  ESPRG0  ========================================================= */
#define ESPI_ESPRG0_TAG0GRP_Pos           (0UL)                     /*!< TAG0GRP (Bit 0)                                       */
#define ESPI_ESPRG0_TAG0GRP_Msk           (0x7UL)                   /*!< TAG0GRP (Bitfield-Mask: 0x07)                         */
#define ESPI_ESPRG0_TAG1GRP_Pos           (4UL)                     /*!< TAG1GRP (Bit 4)                                       */
#define ESPI_ESPRG0_TAG1GRP_Msk           (0x70UL)                  /*!< TAG1GRP (Bitfield-Mask: 0x07)                         */
#define ESPI_ESPRG0_TAG2GRP_Pos           (8UL)                     /*!< TAG2GRP (Bit 8)                                       */
#define ESPI_ESPRG0_TAG2GRP_Msk           (0x700UL)                 /*!< TAG2GRP (Bitfield-Mask: 0x07)                         */
#define ESPI_ESPRG0_TAG3GRP_Pos           (12UL)                    /*!< TAG3GRP (Bit 12)                                      */
#define ESPI_ESPRG0_TAG3GRP_Msk           (0x7000UL)                /*!< TAG3GRP (Bitfield-Mask: 0x07)                         */
#define ESPI_ESPRG0_TAG4GRP_Pos           (16UL)                    /*!< TAG4GRP (Bit 16)                                      */
#define ESPI_ESPRG0_TAG4GRP_Msk           (0x70000UL)               /*!< TAG4GRP (Bitfield-Mask: 0x07)                         */
#define ESPI_ESPRG0_TAG5GRP_Pos           (20UL)                    /*!< TAG5GRP (Bit 20)                                      */
#define ESPI_ESPRG0_TAG5GRP_Msk           (0x700000UL)              /*!< TAG5GRP (Bitfield-Mask: 0x07)                         */
#define ESPI_ESPRG0_TAG6GRP_Pos           (24UL)                    /*!< TAG6GRP (Bit 24)                                      */
#define ESPI_ESPRG0_TAG6GRP_Msk           (0x7000000UL)             /*!< TAG6GRP (Bitfield-Mask: 0x07)                         */
#define ESPI_ESPRG0_TAG7GRP_Pos           (28UL)                    /*!< TAG7GRP (Bit 28)                                      */
#define ESPI_ESPRG0_TAG7GRP_Msk           (0x70000000UL)            /*!< TAG7GRP (Bitfield-Mask: 0x07)                         */
/* ========================================================  ESPRG1  ========================================================= */
#define ESPI_ESPRG1_TAG8GRP_Pos           (0UL)                     /*!< TAG8GRP (Bit 0)                                       */
#define ESPI_ESPRG1_TAG8GRP_Msk           (0x7UL)                   /*!< TAG8GRP (Bitfield-Mask: 0x07)                         */
#define ESPI_ESPRG1_TAG9GRP_Pos           (4UL)                     /*!< TAG9GRP (Bit 4)                                       */
#define ESPI_ESPRG1_TAG9GRP_Msk           (0x70UL)                  /*!< TAG9GRP (Bitfield-Mask: 0x07)                         */
#define ESPI_ESPRG1_TAGAGRP_Pos           (8UL)                     /*!< TAGAGRP (Bit 8)                                       */
#define ESPI_ESPRG1_TAGAGRP_Msk           (0x700UL)                 /*!< TAGAGRP (Bitfield-Mask: 0x07)                         */
#define ESPI_ESPRG1_TAGBGRP_Pos           (12UL)                    /*!< TAGBGRP (Bit 12)                                      */
#define ESPI_ESPRG1_TAGBGRP_Msk           (0x7000UL)                /*!< TAGBGRP (Bitfield-Mask: 0x07)                         */
#define ESPI_ESPRG1_TAGCGRP_Pos           (16UL)                    /*!< TAGCGRP (Bit 16)                                      */
#define ESPI_ESPRG1_TAGCGRP_Msk           (0x70000UL)               /*!< TAGCGRP (Bitfield-Mask: 0x07)                         */
#define ESPI_ESPRG1_TAGDGRP_Pos           (20UL)                    /*!< TAGDGRP (Bit 20)                                      */
#define ESPI_ESPRG1_TAGDGRP_Msk           (0x700000UL)              /*!< TAGDGRP (Bitfield-Mask: 0x07)                         */
#define ESPI_ESPRG1_TAGEGRP_Pos           (24UL)                    /*!< TAGEGRP (Bit 24)                                      */
#define ESPI_ESPRG1_TAGEGRP_Msk           (0x7000000UL)             /*!< TAGEGRP (Bitfield-Mask: 0x07)                         */
#define ESPI_ESPRG1_TAGFGRP_Pos           (28UL)                    /*!< TAGFGRP (Bit 28)                                      */
#define ESPI_ESPRG1_TAGFGRP_Msk           (0x70000000UL)            /*!< TAGFGRP (Bitfield-Mask: 0x07)                         */
/* ========================================================  ESPDRT  ========================================================= */
#define ESPI_ESPDRT_TAGDRT_Pos            (0UL)                     /*!< TAGDRT (Bit 0)                                        */
#define ESPI_ESPDRT_TAGDRT_Msk            (0x1UL)                   /*!< TAGDRT (Bitfield-Mask: 0x01)                          */
/* ========================================================  ESP0STR  ======================================================== */
#define ESPI_ESP0STR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESP0STR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESP1STR  ======================================================== */
#define ESPI_ESP1STR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESP1STR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESP2STR  ======================================================== */
#define ESPI_ESP2STR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESP2STR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESP3STR  ======================================================== */
#define ESPI_ESP3STR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESP3STR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESP4STR  ======================================================== */
#define ESPI_ESP4STR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESP4STR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESP5STR  ======================================================== */
#define ESPI_ESP5STR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESP5STR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESP6STR  ======================================================== */
#define ESPI_ESP6STR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESP6STR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESP7STR  ======================================================== */
#define ESPI_ESP7STR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESP7STR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESP8STR  ======================================================== */
#define ESPI_ESP8STR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESP8STR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESP9STR  ======================================================== */
#define ESPI_ESP9STR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESP9STR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESPASTR  ======================================================== */
#define ESPI_ESPASTR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESPASTR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESPBSTR  ======================================================== */
#define ESPI_ESPBSTR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESPBSTR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESPCSTR  ======================================================== */
#define ESPI_ESPCSTR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESPCSTR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESPDSTR  ======================================================== */
#define ESPI_ESPDSTR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESPDSTR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESPESTR  ======================================================== */
#define ESPI_ESPESTR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESPESTR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESPFSTR  ======================================================== */
#define ESPI_ESPFSTR_ADDR_Pos             (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_ESPFSTR_ADDR_Msk             (0xfffffUL)               /*!< ADDR (Bitfield-Mask: 0xfffff)                         */
/* ========================================================  ESP0LEN  ======================================================== */
#define ESPI_ESP0LEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESP0LEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESP1LEN  ======================================================== */
#define ESPI_ESP1LEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESP1LEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESP2LEN  ======================================================== */
#define ESPI_ESP2LEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESP2LEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESP3LEN  ======================================================== */
#define ESPI_ESP3LEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESP3LEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESP4LEN  ======================================================== */
#define ESPI_ESP4LEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESP4LEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESP5LEN  ======================================================== */
#define ESPI_ESP5LEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESP5LEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESP6LEN  ======================================================== */
#define ESPI_ESP6LEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESP6LEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESP7LEN  ======================================================== */
#define ESPI_ESP7LEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESP7LEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESP8LEN  ======================================================== */
#define ESPI_ESP8LEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESP8LEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESP9LEN  ======================================================== */
#define ESPI_ESP9LEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESP9LEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESPALEN  ======================================================== */
#define ESPI_ESPALEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESPALEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESPBLEN  ======================================================== */
#define ESPI_ESPBLEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESPBLEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESPCLEN  ======================================================== */
#define ESPI_ESPCLEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESPCLEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESPDLEN  ======================================================== */
#define ESPI_ESPDLEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESPDLEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESPELEN  ======================================================== */
#define ESPI_ESPELEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESPELEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESPFLEN  ======================================================== */
#define ESPI_ESPFLEN_LEN_Pos              (0UL)                     /*!< LEN (Bit 0)                                           */
#define ESPI_ESPFLEN_LEN_Msk              (0xfffffUL)               /*!< LEN (Bitfield-Mask: 0xfffff)                          */
/* ========================================================  ESWPRG0  ======================================================== */
#define ESPI_ESWPRG0_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRG0_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESWPRG1  ======================================================== */
#define ESPI_ESWPRG1_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRG1_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESWPRG2  ======================================================== */
#define ESPI_ESWPRG2_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRG2_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESWPRG3  ======================================================== */
#define ESPI_ESWPRG3_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRG3_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESWPRG4  ======================================================== */
#define ESPI_ESWPRG4_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRG4_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESWPRG5  ======================================================== */
#define ESPI_ESWPRG5_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRG5_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESWPRG6  ======================================================== */
#define ESPI_ESWPRG6_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRG6_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESWPRG7  ======================================================== */
#define ESPI_ESWPRG7_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRG7_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESWPRG8  ======================================================== */
#define ESPI_ESWPRG8_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRG8_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESWPRG9  ======================================================== */
#define ESPI_ESWPRG9_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRG9_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESWPRGA  ======================================================== */
#define ESPI_ESWPRGA_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRGA_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESWPRGB  ======================================================== */
#define ESPI_ESWPRGB_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRGB_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESWPRGC  ======================================================== */
#define ESPI_ESWPRGC_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRGC_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESWPRGD  ======================================================== */
#define ESPI_ESWPRGD_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRGD_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESWPRGE  ======================================================== */
#define ESPI_ESWPRGE_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRGE_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESWPRGF  ======================================================== */
#define ESPI_ESWPRGF_GWREN_Pos            (0UL)                     /*!< GWREN (Bit 0)                                         */
#define ESPI_ESWPRGF_GWREN_Msk            (0x1UL)                   /*!< GWREN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRG0  ======================================================== */
#define ESPI_ESRPRG0_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRG0_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRG1  ======================================================== */
#define ESPI_ESRPRG1_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRG1_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRG2  ======================================================== */
#define ESPI_ESRPRG2_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRG2_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRG3  ======================================================== */
#define ESPI_ESRPRG3_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRG3_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRG4  ======================================================== */
#define ESPI_ESRPRG4_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRG4_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRG5  ======================================================== */
#define ESPI_ESRPRG5_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRG5_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRG6  ======================================================== */
#define ESPI_ESRPRG6_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRG6_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRG7  ======================================================== */
#define ESPI_ESRPRG7_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRG7_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRG8  ======================================================== */
#define ESPI_ESRPRG8_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRG8_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRG9  ======================================================== */
#define ESPI_ESRPRG9_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRG9_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRGA  ======================================================== */
#define ESPI_ESRPRGA_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRGA_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRGB  ======================================================== */
#define ESPI_ESRPRGB_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRGB_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRGC  ======================================================== */
#define ESPI_ESRPRGC_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRGC_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRGD  ======================================================== */
#define ESPI_ESRPRGD_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRGD_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRGE  ======================================================== */
#define ESPI_ESRPRGE_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRGE_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESRPRGF  ======================================================== */
#define ESPI_ESRPRGF_GRDEN_Pos            (0UL)                     /*!< GRDEN (Bit 0)                                         */
#define ESPI_ESRPRGF_GRDEN_Msk            (0x1UL)                   /*!< GRDEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESPREN  ========================================================= */
#define ESPI_ESPREN_EN_Pos                (0UL)                     /*!< EN (Bit 0)                                            */
#define ESPI_ESPREN_EN_Msk                (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
/* ========================================================  ESPSTS  ========================================================= */
#define ESPI_ESPSTS_OVSIZE_Pos            (0UL)                     /*!< OVSIZE (Bit 0)                                        */
#define ESPI_ESPSTS_OVSIZE_Msk            (0x1UL)                   /*!< OVSIZE (Bitfield-Mask: 0x01)                          */
#define ESPI_ESPSTS_HIT_Pos               (1UL)                     /*!< HIT (Bit 1)                                           */
#define ESPI_ESPSTS_HIT_Msk               (0x2UL)                   /*!< HIT (Bitfield-Mask: 0x01)                             */
#define ESPI_ESPSTS_CRS4K_Pos             (2UL)                     /*!< CRS4K (Bit 2)                                         */
#define ESPI_ESPSTS_CRS4K_Msk             (0x4UL)                   /*!< CRS4K (Bitfield-Mask: 0x01)                           */
/* ========================================================  ESFLSZ  ========================================================= */
/* =======================================================  ESPINTEN  ======================================================== */
#define ESPI_ESPINTEN_OVSIZEEN_Pos        (0UL)                     /*!< OVSIZEEN (Bit 0)                                      */
#define ESPI_ESPINTEN_OVSIZEEN_Msk        (0x1UL)                   /*!< OVSIZEEN (Bitfield-Mask: 0x01)                        */
#define ESPI_ESPINTEN_HITEN_Pos           (1UL)                     /*!< HITEN (Bit 1)                                         */
#define ESPI_ESPINTEN_HITEN_Msk           (0x2UL)                   /*!< HITEN (Bitfield-Mask: 0x01)                           */
#define ESPI_ESPINTEN_CRS4KEN_Pos         (2UL)                     /*!< CRS4KEN (Bit 2)                                       */
#define ESPI_ESPINTEN_CRS4KEN_Msk         (0x4UL)                   /*!< CRS4KEN (Bitfield-Mask: 0x01)                         */
/* ================================================  IOSHORIOSHORTSTSTRDSTS  ================================================= */
#define ESPI_IOSHORIOSHORTSTSTRDSTS_BYTES_Pos (0UL)                 /*!< BYTES (Bit 0)                                         */
#define ESPI_IOSHORIOSHORTSTSTRDSTS_BYTES_Msk (0x3UL)               /*!< BYTES (Bitfield-Mask: 0x03)                           */
#define ESPI_IOSHORIOSHORTSTSTRDSTS_TYPE_Pos (2UL)                  /*!< TYPE (Bit 2)                                          */
#define ESPI_IOSHORIOSHORTSTSTRDSTS_TYPE_Msk (0x4UL)                /*!< TYPE (Bitfield-Mask: 0x01)                            */
#define ESPI_IOSHORIOSHORTSTSTRDSTS_ACCEPT_Pos (3UL)                /*!< ACCEPT (Bit 3)                                        */
#define ESPI_IOSHORIOSHORTSTSTRDSTS_ACCEPT_Msk (0x8UL)              /*!< ACCEPT (Bitfield-Mask: 0x01)                          */
/* =====================================================  IOSHORTRDADDR  ===================================================== */
#define ESPI_IOSHORTRDADDR_ADDR_Pos       (0UL)                     /*!< ADDR (Bit 0)                                          */
#define ESPI_IOSHORTRDADDR_ADDR_Msk       (0xffffUL)                /*!< ADDR (Bitfield-Mask: 0xffff)                          */
/* =====================================================  IOSHORTRDDATA  ===================================================== */
/* ========================================================  LDNCFG  ========================================================= */
#define ESPI_LDNCFG_IDX_Pos               (0UL)                     /*!< IDX (Bit 0)                                           */
#define ESPI_LDNCFG_IDX_Msk               (0xffffUL)                /*!< IDX (Bitfield-Mask: 0xffff)                           */
/* ==========================================================  ID0  ========================================================== */
/* ==========================================================  ID1  ========================================================== */
/* ==========================================================  VER  ========================================================== */


/* =========================================================================================================================== */
/* ================                                         MONOTONIC                                         ================ */
/* =========================================================================================================================== */

/* =========================================================  CTRL  ========================================================== */
#define MONOTONIC_CTRL_INC0_Pos           (0UL)                     /*!< INC0 (Bit 0)                                          */
#define MONOTONIC_CTRL_INC0_Msk           (0x1UL)                   /*!< INC0 (Bitfield-Mask: 0x01)                            */
#define MONOTONIC_CTRL_INC1_Pos           (8UL)                     /*!< INC1 (Bit 8)                                          */
#define MONOTONIC_CTRL_INC1_Msk           (0x100UL)                 /*!< INC1 (Bitfield-Mask: 0x01)                            */
#define MONOTONIC_CTRL_INC2_Pos           (16UL)                    /*!< INC2 (Bit 16)                                         */
#define MONOTONIC_CTRL_INC2_Msk           (0x10000UL)               /*!< INC2 (Bitfield-Mask: 0x01)                            */
#define MONOTONIC_CTRL_INC3_Pos           (24UL)                    /*!< INC3 (Bit 24)                                         */
#define MONOTONIC_CTRL_INC3_Msk           (0x1000000UL)             /*!< INC3 (Bitfield-Mask: 0x01)                            */
#define MONOTONIC_CTRL_LOAD_Pos           (25UL)                    /*!< LOAD (Bit 25)                                         */
#define MONOTONIC_CTRL_LOAD_Msk           (0x2000000UL)             /*!< LOAD (Bitfield-Mask: 0x01)                            */
#define MONOTONIC_CTRL_UPDATE_Pos         (26UL)                    /*!< UPDATE (Bit 26)                                       */
#define MONOTONIC_CTRL_UPDATE_Msk         (0x4000000UL)             /*!< UPDATE (Bitfield-Mask: 0x01)                          */
/* =========================================================  MCNT0  ========================================================= */
/* =========================================================  MCNT1  ========================================================= */
/* =========================================================  MCNT2  ========================================================= */
/* =========================================================  MCNT3  ========================================================= */


/* =========================================================================================================================== */
/* ================                                            MBX                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  STS  ========================================================== */
#define MBX_STS_STS_Pos                   (0UL)                     /*!< STS (Bit 0)                                           */
#define MBX_STS_STS_Msk                   (0xffUL)                  /*!< STS (Bitfield-Mask: 0xff)                             */
/* =========================================================  DATA  ========================================================== */
/* ========================================================  INTCTRL  ======================================================== */
#define MBX_INTCTRL_IRQEN_Pos             (0UL)                     /*!< IRQEN (Bit 0)                                         */
#define MBX_INTCTRL_IRQEN_Msk             (0x1UL)                   /*!< IRQEN (Bitfield-Mask: 0x01)                           */
#define MBX_INTCTRL_TGLV_Pos              (1UL)                     /*!< TGLV (Bit 1)                                          */
#define MBX_INTCTRL_TGLV_Msk              (0x2UL)                   /*!< TGLV (Bitfield-Mask: 0x01)                            */
#define MBX_INTCTRL_INTEN_Pos             (2UL)                     /*!< INTEN (Bit 2)                                         */
#define MBX_INTCTRL_INTEN_Msk             (0x4UL)                   /*!< INTEN (Bitfield-Mask: 0x01)                           */
/* ========================================================  IRQNUM  ========================================================= */
#define MBX_IRQNUM_NUM_Pos                (0UL)                     /*!< NUM (Bit 0)                                           */
#define MBX_IRQNUM_NUM_Msk                (0xffUL)                  /*!< NUM (Bitfield-Mask: 0xff)                             */
/* ========================================================  INTSTS  ========================================================= */
#define MBX_INTSTS_STS_Pos                (0UL)                     /*!< STS (Bit 0)                                           */
#define MBX_INTSTS_STS_Msk                (0x1UL)                   /*!< STS (Bitfield-Mask: 0x01)                             */
#define MBX_INTSTS_CLR_Pos                (1UL)                     /*!< CLR (Bit 1)                                           */
#define MBX_INTSTS_CLR_Msk                (0x2UL)                   /*!< CLR (Bitfield-Mask: 0x01)                             */

/** @} */ /* End of group PosMask_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* RTS5911_H */


/** @} */ /* End of group RTS5911 */

/** @} */ /* End of group Realtek Semiconductor Corp. */
